/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-02-16 11:05:28 -0500 (Thu, 16 Feb 2012) $
 * Revision:      $LastChangedRevision: 5451 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged {
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>TriggerEvent</summary>
     * 
     * <remarks>MCAI_MT700227CA.ControlActEvent: Trigger Event 
     * <p>Identifies the action that resulted in this message being 
     * sent.</p> <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700212CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700222CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700218CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700217CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700210CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700226CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700221CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700216CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700211CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p> 
     * MCAI_MT700220CA.ControlActEvent: Trigger Event <p>Identifies 
     * the action that resulted in this message being sent.</p> 
     * <p>Key to understanding what action a message 
     * represents.</p> <p>There may be constraints on the usage of 
     * the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"MCAI_MT700210CA.ControlActEvent","MCAI_MT700211CA.ControlActEvent","MCAI_MT700212CA.ControlActEvent","MCAI_MT700216CA.ControlActEvent","MCAI_MT700217CA.ControlActEvent","MCAI_MT700218CA.ControlActEvent","MCAI_MT700220CA.ControlActEvent","MCAI_MT700221CA.ControlActEvent","MCAI_MT700222CA.ControlActEvent","MCAI_MT700226CA.ControlActEvent","MCAI_MT700227CA.ControlActEvent"})]
    public class TriggerEvent_1<ACT> : MessagePartBean {

        private II id;
        private CV code;
        private IVL<TS, Interval<PlatformDate>> effectiveTime;
        private CV reasonCode;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.RecordTarget recordTarget;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.RefersTo_1<ACT> subject;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.Issues> subjectOfDetectedIssueEvent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.HealthcareWorker responsiblePartyAssignedEntity;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.CreatedBy author;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.IActingPerson dataEntererActingPerson;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.CreatedAt location;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.ServiceLocation dataEntryLocationServiceDeliveryLocation;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.AuthenticationToken pertinentInformationAuthorizationToken;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.AuthorizedBy subjectOf2;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.CareCompositions> componentOf;

        public TriggerEvent_1() {
            this.id = new IIImpl();
            this.code = new CVImpl();
            this.effectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.reasonCode = new CVImpl();
            this.subjectOfDetectedIssueEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.Issues>();
            this.componentOf = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.CareCompositions>();
        }
        /**
         * <summary>EventIdentifier</summary>
         * 
         * <remarks>B:Event Identifier <p>A unique identifier for this 
         * particular event assigned by the system in which the event 
         * occurred.</p> <p>Allows the event to be referenced (for 
         * undos) and also indicates whether multiple interactions were 
         * caused by the same triggering event. Also used for audit 
         * purposes.</p> <p>Identifier needs to be persisted by 
         * receiving applications, except for queries (queries cannot 
         * be retracted or undone).</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier Id {
            get { return this.id.Value; }
            set { this.id.Value = value; }
        }

        /**
         * <summary>EventType</summary>
         * 
         * <remarks>A:Event Type <p>Identifies the trigger event that 
         * occurred.</p> <p>This is mandatory because it is essential 
         * to understanding the meaning of the event.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public HL7TriggerEventCode Code {
            get { return (HL7TriggerEventCode) this.code.Value; }
            set { this.code.Value = value; }
        }

        /**
         * <summary>EventEffectivePeriod</summary>
         * 
         * <remarks>C:Event Effective Period <p>Indicates the time the 
         * event (e.g. query, change, activation) should begin and 
         * occasionally when it should end.</p> <p>The time an event 
         * becomes effective may differ from the time the event is 
         * recorded (i.e. it may be in the future or the past). For 
         * events such as 'suspend', an intended end date may also be 
         * indicated.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> EffectiveTime {
            get { return this.effectiveTime.Value; }
            set { this.effectiveTime.Value = value; }
        }

        /**
         * <summary>EventReason</summary>
         * 
         * <remarks>E:Event Reason <p>Identifies why this specific 
         * message interaction (e.g. query, activation request, 
         * modification request) occurred.</p> <p>Allows identifying a 
         * reason for a specific action, such as 'reason for hold' or 
         * 'reason for accessing information'.</p> <p>The domain 
         * associated with this attribute will vary for each 
         * interaction and will be noted as part of the interaction 
         * description.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"reasonCode"})]
        public ControlActReason ReasonCode {
            get { return (ControlActReason) this.reasonCode.Value; }
            set { this.reasonCode.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"recordTarget"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.RecordTarget RecordTarget {
            get { return this.recordTarget; }
            set { this.recordTarget = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subject"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.RefersTo_1<ACT> Subject {
            get { return this.subject; }
            set { this.subject = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf/detectedIssueEvent","subjectOf1/detectedIssueEvent"})]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700216CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700217CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700218CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700220CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700221CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700222CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700226CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf", Type="MCAI_MT700227CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf/detectedIssueEvent", Type="COCT_MT260010CA.DetectedIssueEvent")]
        [Hl7MapByPartType(Name="subjectOf/detectedIssueEvent", Type="COCT_MT260012CA.DetectedIssueEvent")]
        [Hl7MapByPartType(Name="subjectOf/detectedIssueEvent", Type="COCT_MT260020CA.DetectedIssueEvent")]
        [Hl7MapByPartType(Name="subjectOf/detectedIssueEvent", Type="COCT_MT260022CA.DetectedIssueEvent")]
        [Hl7MapByPartType(Name="subjectOf1", Type="MCAI_MT700210CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf1", Type="MCAI_MT700211CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf1", Type="MCAI_MT700212CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf1/detectedIssueEvent", Type="COCT_MT260010CA.DetectedIssueEvent")]
        [Hl7MapByPartType(Name="subjectOf1/detectedIssueEvent", Type="COCT_MT260012CA.DetectedIssueEvent")]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.Issues> SubjectOfDetectedIssueEvent {
            get { return this.subjectOfDetectedIssueEvent; }
        }

        [Hl7XmlMappingAttribute(new string[] {"responsibleParty/assignedEntity"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.HealthcareWorker ResponsiblePartyAssignedEntity {
            get { return this.responsiblePartyAssignedEntity; }
            set { this.responsiblePartyAssignedEntity = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.CreatedBy Author {
            get { return this.author; }
            set { this.author = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"dataEnterer/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.IActingPerson DataEntererActingPerson {
            get { return this.dataEntererActingPerson; }
            set { this.dataEntererActingPerson = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"location"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.CreatedAt Location {
            get { return this.location; }
            set { this.location = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"dataEntryLocation/serviceDeliveryLocation"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Merged.ServiceLocation DataEntryLocationServiceDeliveryLocation {
            get { return this.dataEntryLocationServiceDeliveryLocation; }
            set { this.dataEntryLocationServiceDeliveryLocation = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"pertinentInformation/authorizationToken"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.AuthenticationToken PertinentInformationAuthorizationToken {
            get { return this.pertinentInformationAuthorizationToken; }
            set { this.pertinentInformationAuthorizationToken = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf2"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.AuthorizedBy SubjectOf2 {
            get { return this.subjectOf2; }
            set { this.subjectOf2 = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"componentOf"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r01.Common.Merged.CareCompositions> ComponentOf {
            get { return this.componentOf; }
        }

    }

}