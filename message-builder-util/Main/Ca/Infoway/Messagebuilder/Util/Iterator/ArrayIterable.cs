/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Util.Iterator {
	
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	internal class ArrayIterable<T> : IEnumerable<T> {
	
		public class IteratorImpl : IEnumerator<T> {

			private T[] _t;
			private int _currentIndex;
				
			public IteratorImpl(T[] t) {
				_t = t;
				_currentIndex = -1;
			}
		
			public T Current {
				get { return _t[_currentIndex]; }
			}
			public void Dispose() {}

			public bool MoveNext()
			{
				_currentIndex++;
				return _currentIndex < _t.Length;
			}
			
			public void Reset()
			{
				_currentIndex = -1;
			}
			
			object IEnumerator.Current
			{
				get { return _t[_currentIndex]; }
			}
			
	}
	
		internal readonly T[] t;
	
		internal ArrayIterable(T[] t_0) {
			this.t = t_0;
		}
	
		/* @SuppressWarnings("unchecked")*/
		public static IEnumerable<TE> Reverse<TE>(TE[] array) {
			TE[] copy = ArrayUtils.Clone(array);
            ArrayUtils.Reverse(copy);
			return new ArrayIterable<TE>(copy);
		}

        #region IEnumerable<T> Members

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
			return new IteratorImpl(t);
        }

        #endregion

        #region IEnumerable Members

        IEnumerator IEnumerable.GetEnumerator()
        {
			return new IteratorImpl(t);
        }

        #endregion
    }
}
