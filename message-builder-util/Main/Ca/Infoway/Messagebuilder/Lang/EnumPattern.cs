/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: sdoxsee $
 * Last modified: $LastChangedDate: 2012-01-23 15:45:58 -0500 (Mon, 23 Jan 2012) $
 * Revision:      $LastChangedRevision: 4750 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Lang {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
    using System.Reflection;
	
	/// <summary>
	/// An Enum Pattern. Enums that implement
	/// an interface and/or contain behaviour do not have a direct counterpart in .Net. 
	/// </summary>
	///
	public class EnumPattern : Enum {
	
		private const long serialVersionUID = -3291561094355852907L;

        
		protected internal EnumPattern(String name) : base(name) {
		}
	
		/// <summary>
		/// Obtains the enum value of a given string.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="enumClass">the enum class</param>
		/// <param name="name">the enum name</param>
		/// <returns>the enum representing the name value</returns>
		public static T ValueOf<T>(Type enumClass, String name) where T : class {
			Enum enum1 = Ca.Infoway.Messagebuilder.Lang.EnumUtils.GetEnum(enumClass, name);
			return enum1 as T;
		}

		public static T ValueOf<T>(String name) where T : class {
			return ValueOf<T>(typeof(T), name);
		}
		
		/// <summary>
		/// Returns the enum values for a given enum class.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="enumClass">the enum class</param>
		/// <returns>the list</returns>
		/* @SuppressWarnings("unchecked")*/
		public static IList<T> Values<T>(Type enumClass) {
            ForciblyLoadClassIfPossible(enumClass);
			Object[] constants = GetEnumConstants(enumClass);
			IList<T> result = new List<T>();
			foreach (Object c in constants) {
				result.Add((T) c);
			}
			return result;
		}

        private static void ForciblyLoadClassIfPossible(Type enumClass)
        {
            try
            {

                //invoke first available constructor passing null in all parameters

                var constructorInfos = enumClass.GetConstructors(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);

                foreach (var constructor in constructorInfos)
                {
                    constructor.Invoke(new object[constructor.GetParameters().Length]);

                    break;
                }

                ILOG.J2CsMapping.Reflect.Helper.GetNativeType(enumClass.FullName);

            }
            catch (/*TypeLoadException*/ Exception e)
            {
            }
        }

		public static IList<T> Values<T>() {
			return (IList<T>) Values<T>(typeof(T));
		}
		
		/// <summary>
		/// Gets the enum constants for a given enum.
		/// </summary>
		///
		/// <param name="enumClass">the enum class</param>
		/// <returns>the enum constants</returns>
		public static Object[] GetEnumConstants(Type enumClass) {
			if (typeof(EnumPattern).IsAssignableFrom(enumClass)) {
                return ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(EnumUtils.GetEnumList(enumClass));
			} else {
				return (Object[]) System.Enum.GetValues(enumClass);
			}
		}
	
		/// <summary>
		/// Checks if is an enum.
		/// </summary>
		///
		/// <param name="enumClass">the enum class</param>
		/// <returns>true, if is enum</returns>
        public static bool IsEnum(Type enumClass)
        {
            return enumClass.IsEnum || typeof(EnumPattern).IsAssignableFrom(enumClass);
        }

        public static bool Initialize()
        {
            //does nothing
            return true;
        }
	
		/// <summary>
		/// {@inheritDoc}}
		/// </summary>
		///
		public override String ToString() {
			return Name;
		}
	}
}
