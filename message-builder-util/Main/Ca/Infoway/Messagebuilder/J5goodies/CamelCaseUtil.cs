/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:44:08 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4347 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	public class CamelCaseUtil {
	
		public static String ConvertToWords(String camelCaseString) {
			char[] chars = (camelCaseString == null) ? null : camelCaseString
					.ToCharArray();
			StringBuilder builder = new StringBuilder();
			for (int i = 0, length = (chars == null) ? 0 : chars.Length; i < length; i++) {
				if (Char.IsUpper(chars[i])) {
					if (builder.Length > 0) {
						builder.Append(' ');
						builder.Append(Char.ToLower(chars[i]));
					} else {
						builder.Append(chars[i]);
					}
				} else if (builder.Length > 0) {
					builder.Append(chars[i]);
				} else {
					builder.Append(Char.ToUpper(chars[i]));
				}
			}
			return builder.ToString();
		}
	}
}
