/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:44:08 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4347 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Reflection;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// This class provides some utilities for dealing with Generics in the bean
	/// definitions of collections.
	/// </summary>
	///
	public class Generics {
	
		/// <summary>
		/// Determine the return type of a collection property.  For example, consider the
		/// following getter:
		/// <pre>
		/// public List&lt;String&gt; getNames() {
		/// ...
		/// }
		/// </pre>
		/// In this case, the getElementType method will return "String".
		/// </summary>
		///
		/// <param name="descriptor"></param>
		/// <returns></returns>
		public static Type GetParameterType(PropertyInfo descriptor) {
			return GetParameterType(descriptor.GetGetMethod().ReturnType);
		}
	
		
		/// <param name="returnType"></param>
		/// <returns></returns>
		public static Type GetParameterType(Type returnType) {
			if (IsCollectionParameterizedType(returnType)) {
//~				Type[] parameters = ((ParameterizedType) returnType).GetActualTypeArguments();
                Type[] parameters = returnType.GetGenericArguments();
                // we assume that whatever extends Collection, here, has one parameter
				Type elementType = parameters[0];
				if (elementType  is  Type) {
					return (Type) elementType;
                /*
				} else if (elementType  is  ParameterizedType) {
					return (Type) ((ParameterizedType) elementType).GetRawType();
                */
                } else {
					throw new ArgumentException(
							"Don't know how to handle type " + elementType);
				}
			} else {
				throw new ArgumentException(
						"Expected parameterized type that implements Collection: "
								+ returnType);
			}
		}
	
		/// <summary>
		/// This method is used to determine if the type is a Parameterized Type that 
		/// implements the Collection interface (typically a List or a Set).  Note that Maps
		/// do not implement the Collection interface.
		/// </summary>
		///
		/// <param name="type"></param>
		/// <returns></returns>
		/* @SuppressWarnings("unchecked")*/
		public static bool IsCollectionParameterizedType(Type type) {
            try {
                return type.IsGenericType && typeof(ICollection<>).MakeGenericType(type.GetGenericArguments()).IsAssignableFrom(type);
            }
            catch (Exception) {
                return false;
            }

            /*
            if (!(type is ParameterizedType)) {
				return false;
			} else if (((ParameterizedType)type).GetRawType()  is  Type) {
				return typeof(ICollection)
						.IsAssignableFrom((Type) ((ParameterizedType) type)
								.GetRawType());
			} else {
				return false;
			}
            */
		}
	}
}
