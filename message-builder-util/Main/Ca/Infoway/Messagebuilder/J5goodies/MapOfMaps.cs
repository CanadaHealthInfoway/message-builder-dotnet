/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-03-01 17:48:17 -0500 (Fri, 01 Mar 2013) $
 * Revision:      $LastChangedRevision: 6663 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using Ca.Infoway.Messagebuilder;
	using ILOG.J2CsMapping.Collections;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// This class provides simple semantics for the common situation where you want to have
	/// a map that contains other maps.
	/// </summary>
	///
	public class MapOfMaps<K1, K2, V> : IDictionary<K1, IDictionary<K2, V>> where K1 : class {
	
		public MapOfMaps() {
			this.map = Ca.Infoway.Messagebuilder.CollUtils
					.SynchronizedMap(new Dictionary<K1, IDictionary<K2, V>>());
		}
	
		private IDictionary<K1, IDictionary<K2, V>> map;
	
		public virtual void Clear() {
			this.map.Clear();
		}
	
		public virtual bool ContainsKey(Object key) {
                return key is K1 ? this.map.ContainsKey(key as K1) : false;
		}
	
		public virtual bool ContainsValue(Object value_ren) {
			return value_ren is IDictionary<K2, V> ? this.map.Values.Contains(value_ren as IDictionary<K2, V>) : false;
		}
	
		public virtual  ISet EntrySet() {
			return (ISet) new ILOG.J2CsMapping.Collections.Generics.ListSet<KeyValuePair<K1,System.Collections.Generic.IDictionary<K2,V>>>(this.map);
		}
	
		public virtual IDictionary<K2, V> Get(Object key) {
            IDictionary<K2, V> res = null;
            if (key is K1)
                this.map.TryGetValue(key as K1, out res);
            return res;
//~			return ((System.Collections.Generic.IDictionary<K2,V>)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.map,key));
		}
	
		
		public virtual bool Empty {
		  get {
				return (this.map.Count==0);
			}
		}
		
	
		public virtual  ISet KeySet() {
            return (ISet)this.map.Keys;
//~			return new ILOG.J2CsMapping.Collections.Generics.ListSet<K1>(this.map.Keys);
		}
	
		public virtual IDictionary<K2, V> Put(K1 key, IDictionary<K2, V> value_ren) {
			return (System.Collections.Generic.IDictionary<K2,V>)ILOG.J2CsMapping.Collections.Generics.Collections.Put(this.map,(K1)(key),(System.Collections.Generic.IDictionary<K2,V>)(value_ren));
		}
	
//~		public virtual void PutAll<T0,T1>(IDictionary<T0, ? : IDictionary<K2, V>> t)  where T0 : K1   where T1 : MapK2V  {
		public virtual void PutAll(IDictionary<K1, IDictionary<K2, V>> t) {
			ILOG.J2CsMapping.Collections.Generics.Collections.PutAll(this.map, t);
		}
	
		public virtual IDictionary<K2, V> Remove(K1 key) {
			return ILOG.J2CsMapping.Collections.Generics.Collections.Remove(this.map, key);
		}
	
		
		public virtual int Count {
            get { return this.map.Count; }
		}
		
	
		
		public virtual ICollection Values {
            get { return (ICollection) this.map.Values; }
		}
		
	
		public void Put(K1 key1, K2 key2, V value_ren) {
			if (!ContainsKey(key1)) {
				Put(key1, new Dictionary<K2, V>());
			}
			ILOG.J2CsMapping.Collections.Generics.Collections.Put(Get(key1),(K2)(key2),(V)(value_ren));
		}
	
		public bool ContainsKey(K1 key1, K2 key2) {
			return ContainsKey(key1) && Get(key1).ContainsKey(key2);
		}
	
		public V Get(K1 key1, K2 key2) {
			if (ContainsKey(key1)) {
				return ((V)ILOG.J2CsMapping.Collections.Generics.Collections.Get(Get(key1),key2));
			} else {
				return  default(V)/* was: null */;
			}
		}
	
		public override  System.String ToString() {
			return this.map.ToString();
		}

        #region IDictionary<K1,IDictionary<K2,V>> Members

        void IDictionary<K1, IDictionary<K2, V>>.Add(K1 key, IDictionary<K2, V> value)
        {
            this.map.Add(key, value);
        }

        bool IDictionary<K1, IDictionary<K2, V>>.ContainsKey(K1 key)
        {
            return this.map.ContainsKey(key);
        }

        ICollection<K1> IDictionary<K1, IDictionary<K2, V>>.Keys
        {
            get { return this.map.Keys; }
        }

        bool IDictionary<K1, IDictionary<K2, V>>.Remove(K1 key)
        {
            return this.map.Remove(key);
        }

        bool IDictionary<K1, IDictionary<K2, V>>.TryGetValue(K1 key, out IDictionary<K2, V> value)
        {
            return this.map.TryGetValue(key, out value);
        }

        ICollection<IDictionary<K2, V>> IDictionary<K1, IDictionary<K2, V>>.Values
        {
            get { return this.map.Values; }
        }

        IDictionary<K2, V> IDictionary<K1, IDictionary<K2, V>>.this[K1 key]
        {
            get { return this.map[key]; }
            set { this.map[key] = value; }
        }

        #endregion

        #region ICollection<KeyValuePair<K1,IDictionary<K2,V>>> Members

        void ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.Add(KeyValuePair<K1, IDictionary<K2, V>> item)
        {
            this.map.Add(item);
        }

        void ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.Clear()
        {
            this.map.Clear();
        }

        bool ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.Contains(KeyValuePair<K1, IDictionary<K2, V>> item)
        {
            return this.map.Contains(item);
        }

        void ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.CopyTo(KeyValuePair<K1, IDictionary<K2, V>>[] array, int arrayIndex)
        {
            this.map.CopyTo(array, arrayIndex);
        }

        int ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.Count
        {
            get { return this.map.Count; }
        }

        bool ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.IsReadOnly
        {
            get { return this.map.IsReadOnly; }
        }

        bool ICollection<KeyValuePair<K1, IDictionary<K2, V>>>.Remove(KeyValuePair<K1, IDictionary<K2, V>> item)
        {
            return this.map.Remove(item);
        }

        #endregion

        #region IEnumerable<KeyValuePair<K1,IDictionary<K2,V>>> Members

        IEnumerator<KeyValuePair<K1, IDictionary<K2, V>>> IEnumerable<KeyValuePair<K1, IDictionary<K2, V>>>.GetEnumerator()
        {
            return this.map.GetEnumerator();
        }

        #endregion

        #region IEnumerable Members

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.map.GetEnumerator();
        }

        #endregion
    }
}
