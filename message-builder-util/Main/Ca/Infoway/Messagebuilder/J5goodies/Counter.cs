/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:44:08 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4347 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	public class Counter<T> where T : IComparable<T>  {
	
		public Counter() {
			this.map = Ca.Infoway.Messagebuilder.CollUtils
					.SynchronizedMap(new Dictionary<T, Int32?>());
		}
	
		// if adding interfaces or behaviour to this enum, please consider using enum pattern for translation purposes
		public enum Order {
			Ascending, Descending
		} 
	
		private IDictionary<T, Int32?> map;
	
		public void Increment(T t) {
			if (this.map.ContainsKey(t)) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Put(this.map,(T)(t),(System.Int32?)((((System.Int32?)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.map,t))).Value + 1));
			} else {
				ILOG.J2CsMapping.Collections.Generics.Collections.Put(this.map,(T)(t),(System.Int32?)(1));
			}
		}
	
		public IList<Tally<T>> GetAll(Order order) {
	
			IList<Tally<T>> list = new List<Tally<T>>();
			/* foreach */
			foreach (T t  in  new ILOG.J2CsMapping.Collections.Generics.ListSet<T>(this.map.Keys)) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,new Tally<T>(t, (((System.Int32?)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.map,t))).Value));
			}
	
			ILOG.J2CsMapping.Collections.Generics.Collections.Sort(list);
			if (order == Order.Descending) {
				Ca.Infoway.Messagebuilder.CollUtils.Reverse(list);
			}
			return list;
		}
	
		public int Get(T t) {
			return (this.map.ContainsKey(t)) ? (int) (((System.Int32?)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.map,t))) : (int) (0);
		}
	
		
		public int Total {
		  get {
				int total = 0;
				/* foreach */
				foreach (T t  in  Ca.Infoway.Messagebuilder.Util.Iterator.EmptyIterable<T>.NullSafeKeySetIterable(this.map)) {
					total += (((System.Int32?)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.map,t))).Value;
				}
				return total;
			}
		}
		
	}
}
