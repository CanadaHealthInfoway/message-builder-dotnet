/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-03-01 17:48:17 -0500 (Fri, 01 Mar 2013) $
 * Revision:      $LastChangedRevision: 6663 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A class that provides a final tally of counted items.  Used with
	/// the <tt>Counter</tt> class to keep a running count of items.
	/// </summary>
	///
	/// <param name="T"> - the type of thing being counted</param>
	public class Tally<T> : IComparable<Tally<T>>  where T : IComparable<T> {
	
		private readonly T key;
		private readonly int count;
	
		internal Tally(T key_0, int count_1) {
			this.key = key_0;
			this.count = count_1;
		}
	
		/// <summary>
		/// Get the final count.
		/// </summary>
		///
		/// <returns>- the count of items</returns>
		public int Count {
		/// <summary>
		/// Get the final count.
		/// </summary>
		///
		/// <returns>- the count of items</returns>
		  get {
				return this.count;
			}
		}
		
	
		/// <summary>
		/// The value being counted.
		/// </summary>
		///
		/// <returns>- the value</returns>
		public T Key {
		/// <summary>
		/// The value being counted.
		/// </summary>
		///
		/// <returns>- the value</returns>
		  get {
				return this.key;
			}
		}
		
	
		/// <summary>
		/// Comparison method.
		/// </summary>
		///
		/// <param name="o">- the item being compared</param>
		/// <returns>- the comparison value, per the Comparator standards</returns>
		public virtual int CompareTo(Tally<T> o) {
			if (o.count == this.count) {
				return this.key.CompareTo(o.key);
			} else {
				return this.count - o.count;
			}
		}
	
		/// <summary>
		/// Standard debug string.
		/// </summary>
		///
		/// <returns>- the string</returns>
		public override  System.String ToString() {
			return "" + this.key + " -> " + this.count;
		}
	
	}
}
