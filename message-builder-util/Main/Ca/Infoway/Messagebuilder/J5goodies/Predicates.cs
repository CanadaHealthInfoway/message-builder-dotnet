/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2014-05-01 12:01:41 -0400 (Thu, 01 May 2014) $
 * Revision:      $LastChangedRevision: 8549 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.J5goodies {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	public class Predicates {
	
		private sealed class Anonymous_C3 : AbstractClassPredicate {
			private readonly String f_packageName;
	
			public override bool IsSelected(String packageName, String className) {
				return String.Equals(f_packageName, packageName);
			}
	
			public Anonymous_C3(String expectedPackageName) {
				this.f_packageName = expectedPackageName;
			}
		}
	
		private sealed class Anonymous_C2 : AbstractClassPredicate {
			private readonly Type f_annotation;
	
			public override bool IsSelected(Type c) {
                return null != c && null != Attribute.GetCustomAttribute(c, f_annotation);
//~				return c != null && c.IsAnnotationPresent(f_annotation);
			}
	
			public Anonymous_C2(Type annotation) {
				this.f_annotation = annotation;
			}
		}
	
		private sealed class Anonymous_C1 : AbstractClassPredicate {
			private readonly Type f_type;
	
			public override bool IsSelected(Type c) {
				return c != null && f_type != null && f_type.IsAssignableFrom(c);
			}
	
			public Anonymous_C1(Type type) {
				this.f_type = type;
			}
		}
	
		private sealed class Anonymous_C0 : AbstractClassPredicate {
			private readonly Type f_type;
			private readonly bool f_interface1;
	
			public override bool IsSelected(Type c) {
                // TM - bugfix: "isInterface = true" would only return interfaces (as expected), but "isInterface = false" would return everything 
				return c != null && f_type != null && f_type.IsAssignableFrom(c)
						&& (f_interface1 == c.IsInterface);
			}
	
			public Anonymous_C0(Type type, bool isInterface) {
				this.f_type = type;
				this.f_interface1 = isInterface;
			}
		}
	
		public static ClassPredicate PackageNamePredicate(
				String expectedPackageName) {
			return new Predicates.Anonymous_C3(expectedPackageName);
		}
	
		public static ClassPredicate HasAnnotationPredicate(
				Type annotation) {
			return new Predicates.Anonymous_C2(annotation);
		}
	
		public static ClassPredicate IsInstanceofPredicate(Type type) {
			return new Predicates.Anonymous_C1(type);
		}
	
		public static ClassPredicate IsInstanceofPredicate(Type type,
				bool isInterface) {
			return new Predicates.Anonymous_C0(type, isInterface);
		}
	
	}
}
