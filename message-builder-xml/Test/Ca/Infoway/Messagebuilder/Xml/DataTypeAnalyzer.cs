/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-05-24 15:30:17 -0400 (Fri, 24 May 2013) $
 * Revision:      $LastChangedRevision: 6893 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Xml {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.J5goodies;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// A tool to gather statistics about data type usage across message sets.
	/// </summary>
	///
	public class DataTypeAnalyzer {
	
		public DataTypeAnalyzer() {
			this.records = new SortedList<Key, Counter<String>>();
			this.version = new List<String>();
		}
	
		internal class Key : IComparable<Key> {
			internal readonly String category;
			internal readonly String dataType;
	
			internal Key(String category_0, String dataType_1) {
				this.category = category_0;
				this.dataType = dataType_1;
			}
	
			public virtual int CompareTo(DataTypeAnalyzer.Key o) {
				return new CompareToBuilder().Append(this.dataType, o.dataType)
						.Append(this.category, o.category).ToComparison();
			}
	
			public override int GetHashCode() {
				return new HashCodeBuilder().Append(this.dataType).Append(
						this.category).ToHashCode();
			}
	
			public override bool Equals(Object obj) {
				if (obj == null) {
					return false;
				} else if (obj == (Object) this) {
					return true;
				} else if ((Object) obj.GetType() != (Object) GetType()) {
					return false;
				} else {
					DataTypeAnalyzer.Key that = (DataTypeAnalyzer.Key) obj;
					return new EqualsBuilder().Append(this.dataType, that.dataType)
							.Append(this.category, that.category).IsEquals();
				}
			}
		}
	
		private IDictionary<Key, Counter<String>> records;
		private IList<String> version;
	
		public static void Main(String[] args) {
	
			DataTypeAnalyzer analyzer = new DataTypeAnalyzer();
			analyzer
					.Add(new FileInfo(
							"../message-builder-messageset-v01_r04_3/src/main/resources/messageSet_v01r04_3_hotfix3.xml"));
			analyzer
					.Add(new FileInfo(
							"../message-builder-messageset-v02_r02/src/main/resources/messageSet_v02_r02.xml"));
			analyzer
					.Add(new FileInfo(
							"../message-builder-messageset-r02_04_02/src/main/resources/messageSet_r02_04_02.xml"));
			analyzer.WriteOutput();
	
		}
	
		private void WriteOutput() {
			IList<Int32?> columns = CreateColumns();
	
			WriteSeparator(columns);
			WriteHeader(columns);
			WriteSeparator(columns);
	
			/* foreach */
			foreach (KeyValuePair<DataTypeAnalyzer.Key,Counter<String>> entry  in  new ILOG.J2CsMapping.Collections.Generics.ListSet<KeyValuePair<Ca.Infoway.Messagebuilder.Xml.DataTypeAnalyzer.Key,Ca.Infoway.Messagebuilder.J5goodies.Counter<String>>>(this.records)) {
				WriteRow(entry.Key, entry.Value, columns);
				WriteSeparator(columns);
			}
		}
	
		private void WriteHeader(IList<Int32?> columns) {
			StringBuilder builder = new StringBuilder("| ");
			builder.Append(Ca.Infoway.Messagebuilder.StringUtils.RightPad("Data type", (columns[0]).Value))
					.Append(" | ");
			builder.Append(Ca.Infoway.Messagebuilder.StringUtils.RightPad("Cat.", (columns[1]).Value));
	
			int index = 0;
			/* foreach */
			foreach (String version_0  in  this.version) {
				builder.Append(" | ");
				Int32? width = columns[index + 2];
				builder.Append(Ca.Infoway.Messagebuilder.StringUtils.RightPad(version_0.Replace('_', '.'),
						(width).Value));
				index++;
			}
			builder.Append(" |");
			System.Console.Out.WriteLine(builder.ToString());
		}
	
		private void WriteRow(DataTypeAnalyzer.Key key, Counter<String> value_ren, IList<Int32?> columns) {
			StringBuilder builder = new StringBuilder("| ");
			builder.Append(
					Ca.Infoway.Messagebuilder.StringUtils.RightPad(Escape(key.dataType), (columns[0]).Value))
					.Append(" | ");
			builder.Append(Ca.Infoway.Messagebuilder.StringUtils.RightPad(key.category, (columns[1]).Value));
	
			int index = 0;
			/* foreach */
			foreach (String version_0  in  this.version) {
				builder.Append(" | ");
				int count = value_ren.Get(version_0);
				Int32? width = columns[index + 2];
				if (count > 0) {
					builder.Append(Ca.Infoway.Messagebuilder.StringUtils.LeftPad("" + count, (width).Value));
				} else {
					builder.Append(Ca.Infoway.Messagebuilder.StringUtils.Repeat(" ", (width).Value));
				}
				index++;
			}
			builder.Append(" |");
			System.Console.Out.WriteLine(builder.ToString());
		}
	
		private void WriteSeparator(IList<Int32?> columns) {
			StringBuilder builder = new StringBuilder("*");
			String alignmentIndicator = "+";
			/* foreach */
			foreach (Int32? integer  in  columns) {
				builder.Append(Ca.Infoway.Messagebuilder.StringUtils.Repeat("-", (integer).Value + 2));
				builder.Append(alignmentIndicator);
				alignmentIndicator = "*";
			}
			System.Console.Out.WriteLine(builder.ToString());
		}
	
		private IList<Int32?> CreateColumns() {
			IList<Int32?> result = new List<Int32?>();
	
			int? firstColumn = 0;
			int? secondColumn = 0;
	
			/* foreach */
			foreach (DataTypeAnalyzer.Key key  in  new ILOG.J2CsMapping.Collections.Generics.ListSet<Ca.Infoway.Messagebuilder.Xml.DataTypeAnalyzer.Key>(this.records.Keys)) {
				firstColumn = Math.Max((int) firstColumn,Escape(key.dataType).Length);
                secondColumn = Math.Max((int) secondColumn, key.category.Length);
			}
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,firstColumn);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,secondColumn);
			/* foreach */
			foreach (String version_0  in  this.version) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(result, (int?) version_0.Length);
			}
			return result;
		}
	
		private String Escape(String dataType_0) {
			return Ca.Infoway.Messagebuilder.StringUtils.Replace(Ca.Infoway.Messagebuilder.StringUtils.Replace(dataType_0, "<", "\\<"),
					">", "\\>");
		}
	
		private void Add(FileInfo file) {
			MessageSet messageSet = new MessageSetMarshaller().Unmarshall(file);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(this.version,messageSet.Version);
			/* foreach */
			foreach (MessagePart messagePart  in  messageSet.AllMessageParts) {
				/* foreach */
				foreach (Relationship relationship  in  messagePart.Relationships) {
					if (relationship.Attribute
							&& Ca.Infoway.Messagebuilder.StringUtils.IsNotBlank(relationship.Type)) {
						Count(messageSet.Version, GetCategory(messagePart),
								relationship.Type);
					}
				}
			}
		}
	
		private void Count(String version_0, String category_1, String type) {
			DataTypeAnalyzer.Key key = new DataTypeAnalyzer.Key(category_1, type);
			if (!this.records.ContainsKey(key)) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Put(this.records,(Ca.Infoway.Messagebuilder.Xml.DataTypeAnalyzer.Key)(key),(Ca.Infoway.Messagebuilder.J5goodies.Counter<String>)(new Counter<String>()));
			}
			((Ca.Infoway.Messagebuilder.J5goodies.Counter<String>)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.records,key)).Increment(version_0);
		}
	
		private String GetCategory(MessagePart messagePart) {
			String prefix = Ca.Infoway.Messagebuilder.StringUtils.Left(messagePart.Name, 4);
			if ("PRPA".Equals(prefix)) {
				return "cr";
			} else if ("PRLO".Equals(prefix)) {
				return "lr";
			} else if ("PRPM".Equals(prefix)) {
				return "pr";
			} else if ("FICR".Equals(prefix)) {
				return "claims";
			} else if ("QUCR".Equals(prefix)) {
				return "claims";
			} else if ("COCT".Equals(prefix)) {
				return "common";
			} else if ("MCAI".Equals(prefix)) {
				return "common";
			} else if ("MCCI".Equals(prefix)) {
				return "common";
			} else if ("MFMI".Equals(prefix)) {
				return "common";
			} else if ("QUQI".Equals(prefix)) {
				return "common";
			} else if ("RCMR".Equals(prefix)) {
				return "consent";
			} else if ("COMT".Equals(prefix)) {
				return "iehr";
			} else if ("REPC".Equals(prefix)) {
				return "iehr";
			} else if ("POIZ".Equals(prefix)) {
				return "iehr";
			} else if ("POLB".Equals(prefix)) {
				return "lab";
			} else if ("POME".Equals(prefix)) {
				return "pharm";
			} else if ("PORR".Equals(prefix)) {
				return "pharm";
			} else if ("PORX".Equals(prefix)) {
				return "pharm";
			} else {
				System.Console.Out.WriteLine(prefix);
				return "";
			}
		}
	}
}
