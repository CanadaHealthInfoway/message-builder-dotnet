/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: jmis $
 * Last modified: $LastChangedDate: 2015-05-27 08:43:37 -0400 (Wed, 27 May 2015) $
 * Revision:      $LastChangedRevision: 9535 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Xml.Service {
	
	using Ca.Infoway.Messagebuilder.Xml;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A message definition service that combines the results of other message defintion 
	/// services.
	/// </summary>
	///
	public class CompositeMessageDefinitionService : 
			MessageDefinitionService {
	
		internal IList<MessageDefinitionService> services;
	
		/// <summary>
		/// Standard constructor.
		/// </summary>
		///
		/// <param name="services_0">- the constituent services whose results are being consolidated.</param>
		public CompositeMessageDefinitionService(
				IList<MessageDefinitionService> services_0) {
			this.services = services_0;
		}

        /// <summary>
        /// Initialize the service. Pre-initializing the service during system 
        /// start-up can improve the performance of the first user call to do real work.
        /// </summary>
        public virtual void Initialize()
        {
            if (services != null)
            {
                foreach (MessageDefinitionService service in services)
                {
                    service.Initialize();
                }
            }
        }
	
		/// <summary>
		/// Get an interaction by name and version.
		/// </summary>
		///
		/// <param name="version">- the version</param>
		/// <param name="type">- the type name</param>
		/// <returns>the interaction</returns>
		public virtual Interaction GetInteraction(VersionNumber version, String type) {
			Interaction result = null;
			/* foreach */
			foreach (MessageDefinitionService service  in  this.services) {
				Interaction temp = service.GetInteraction(version, type);
				if (temp != null) {
					result = temp;
					break;
				}
			}
			return result;
		}
	
		/// <summary>
		/// Get a message part by name and version.
		/// </summary>
		///
		/// <param name="version">- the version</param>
		/// <param name="type">- the type name</param>
		/// <returns>the message part</returns>
		public virtual MessagePart GetMessagePart(VersionNumber version, String type) {
			MessagePart result = null;
			/* foreach */
			foreach (MessageDefinitionService service  in  this.services) {
				MessagePart temp = service.GetMessagePart(version, type);
				if (temp != null) {
					result = temp;
					break;
				}
			}
			return result;
		}
	
		/// <summary>
		/// Get all interactions across all versions.
		/// </summary>
		///
		/// <param name="includeDuplicateInteractionsWithChangedBusinessNames">- a flag indicating whether or not to include duplicates</param>
		/// <returns>the interactions</returns>
		public virtual IList<Interaction> GetAllInteractions(
				bool includeDuplicateInteractionsWithChangedBusinessNames) {
			IDictionary<String, Interaction> interactionsMap = new SortedList<String, Interaction>(); // sort by key 
			/* foreach */
			foreach (MessageDefinitionService service  in  this.services) {
				IList<Interaction> allInteractions = service
						.GetAllInteractions(includeDuplicateInteractionsWithChangedBusinessNames);
				/* foreach */
				foreach (Interaction interaction  in  allInteractions) {
					String key = interaction.Name;
					if (includeDuplicateInteractionsWithChangedBusinessNames) {
						key += interaction.BusinessName;
					}
					ILOG.J2CsMapping.Collections.Generics.Collections.Put(interactionsMap,(System.String)(key),(Ca.Infoway.Messagebuilder.Xml.Interaction)(interaction));
				}
			}
			return new List<Interaction>(interactionsMap.Values);
		}
	
		/// <summary>
		/// Get all interactions for a particular version of the specification.
		/// </summary>
		///
		/// <param name="version">- the version</param>
		/// <returns>the interactions</returns>
		public virtual IList<Interaction> GetAllInteractions(VersionNumber version) {
			IDictionary<String, Interaction> interactionsMap = new SortedList<String, Interaction>(); // sort by key 
			/* foreach */
			foreach (MessageDefinitionService service  in  this.services) {
				IList<Interaction> allInteractions = service
						.GetAllInteractions(version);
				/* foreach */
				foreach (Interaction interaction  in  allInteractions) {
					ILOG.J2CsMapping.Collections.Generics.Collections.Put(interactionsMap,(System.String)(interaction.Name),(Ca.Infoway.Messagebuilder.Xml.Interaction)(interaction));
				}
			}
			return new List<Interaction>(interactionsMap.Values);
		}
	
		/// <summary>
		/// Get all the versions known by this service.
		/// </summary>
		///
		/// <returns>the versions</returns>
		public virtual ICollection<String> SupportedVersions {
		/// <summary>
		/// Get all the versions known by this service.
		/// </summary>
		///
		/// <returns>the versions</returns>
		  get {
              ILOG.J2CsMapping.Collections.Generics.ISet<String> versions = new ILOG.J2CsMapping.Collections.Generics.SortedSet<System.String>();
				/* foreach */
				foreach (MessageDefinitionService service  in  this.services) {
					ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(service.SupportedVersions,versions);
				}
				return versions;
			}
		}
		
	
		/// <summary>
		/// Get all the versions for a particular interaction.
		/// </summary>
		///
		/// <param name="type">- the type name of the interaction</param>
		/// <returns>the versions</returns>
		public virtual ICollection<String> GetSupportedVersionsForInteraction(String type) {
            ILOG.J2CsMapping.Collections.Generics.ISet<String> versions = new ILOG.J2CsMapping.Collections.Generics.SortedSet<System.String>();
			/* foreach */
			foreach (MessageDefinitionService service  in  this.services) {
				ICollection<String> supportedVersions = service
						.GetSupportedVersionsForInteraction(type);
				ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(supportedVersions,versions);
			}
			return versions;
		}
	
		/// <summary>
		/// Get all the message parts for a particular interaction and version.
		/// </summary>
		///
		/// <param name="interaction">- the interaction</param>
		/// <param name="version">- the version</param>
		/// <returns>- the message parts</returns>
		public virtual IDictionary<String, MessagePart> GetAllMessageParts(Interaction interaction,
				VersionNumber version) {
			if (interaction != null) {
				/* foreach */
				foreach (MessageDefinitionService service  in  this.services) {
					Interaction foundInteraction = service.GetInteraction(version,
							interaction.Name);
					if (foundInteraction != null) {
						return service.GetAllMessageParts(interaction, version);
					}
				}
			}
			return new Dictionary<String, MessagePart>();
		}

		/// <summary>
		/// Get all the message parts for a particular version.
		/// </summary>
		///
		/// <param name="version">- the version</param>
		/// <returns>- the message parts</returns>
		public virtual ICollection<MessagePart> GetAllMessageParts(VersionNumber version)
		{
			foreach (MessageDefinitionService service in this.services)
			{
				ICollection<MessagePart> allMessageParts = service.GetAllMessageParts(version);
				if (allMessageParts != null && !allMessageParts.IsEmpty())
				{
					return allMessageParts;
				}
			}
            return CollUtils.EmptyList<MessagePart>();
		}

        public virtual bool IsR2(VersionNumber version)
        {
            foreach (MessageDefinitionService service in services) {
                if (service.IsR2(version))
                {
                    return true;
                }
            }
            return false;
        }

        public virtual bool IsCda(VersionNumber version)
        {
            foreach (MessageDefinitionService service in services)
            {
                if (service.IsCda(version))
                {
                    return true;
                }
            }
            return false;
        }

        public virtual ConstrainedDatatype GetConstraints(VersionNumber version, string constrainedType)
        {
            foreach (MessageDefinitionService service in services)
            {
                ConstrainedDatatype constraints = service.GetConstraints(version, constrainedType);
                if (constraints != null)
                {
                    return constraints;
                }
            }
            return null;
        }

        public virtual IList<SchematronContext> GetAllSchematronContexts(VersionNumber version)
        {
            foreach (MessageDefinitionService service in services)
            {
                IList<SchematronContext> contexts = service.GetAllSchematronContexts(version);
                if (contexts != null)
                {
                    return contexts;
                }
            }
            return null;
        }

        public virtual IList<PackageLocation> GetAllPackageLocations(VersionNumber version)
        {
            foreach (MessageDefinitionService service in services)
            {
                IList<PackageLocation> locations = service.GetAllPackageLocations(version);
                if (locations != null)
                {
                    return locations;
                }
            }
            return null;
        }

	}
}
