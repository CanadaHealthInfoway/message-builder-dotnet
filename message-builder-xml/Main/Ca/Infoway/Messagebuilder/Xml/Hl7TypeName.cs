/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Xml {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// A class to hold an HL7 type name and its generic HL7 type parameters. Includes some utility methods.
	/// </summary>
	///
	public class Hl7TypeName {
	
		private readonly String name;
		private readonly IList<Hl7TypeName> parameters;
	
		/// <summary>
		/// Constructs an HL7TypeName for the given type with no generic parameters. 
		/// </summary>
		///
		/// <param name="name_0">the hl7 type</param>
		internal /* @SuppressWarnings("unchecked")*/
		Hl7TypeName(String name_0) {
			this.name = name_0;
            this.parameters = new List<Hl7TypeName>();
		}
	
		/// <summary>
		/// Constructs an HL7TypeName for the given type with the supplied generic parameters. 
		/// </summary>
		///
		/// <param name="name_0">the hl7 type</param>
		/// <param name="parameters_1">the hl7 type generic parameters</param>
		internal Hl7TypeName(String name_0, IList<Hl7TypeName> parameters_1) {
			this.name = name_0;
			this.parameters = parameters_1;
		}
	
		/// <summary>
		/// Builds a string representation of this object.
		/// </summary>
		///
		/// <returns>the string representation of this object.</returns>
		public override  System.String ToString() {
			StringBuilder builder = new StringBuilder();
			builder.Append(this.name);
			if (!Ca.Infoway.Messagebuilder.CollUtils.IsEmpty(this.parameters)) {
				builder.Append("<");
				bool first = true;
				/* foreach */
				foreach (Hl7TypeName parameter  in  this.parameters) {
					if (!first) {
						builder.Append(",");
					}
					builder.Append(((String) parameter.ToString()));
					first = false;
				}
				builder.Append(">");
			}
			return builder.ToString();
		}
	
		/// <summary>
		/// Returns the unspecialized name for this hl7 type name.
		/// </summary>
		///
		/// <returns>the unspecialized name</returns>
		public String UnspecializedName {
		/// <summary>
		/// Returns the unspecialized name for this hl7 type name.
		/// </summary>
		///
		/// <returns>the unspecialized name</returns>
		  get {
				StringBuilder builder = new StringBuilder();
				builder.Append(RootName);
				if (!Ca.Infoway.Messagebuilder.CollUtils.IsEmpty(this.parameters)) {
					builder.Append("<");
					bool first = true;
					/* foreach */
					foreach (Hl7TypeName parameter  in  this.parameters) {
						if (!first) {
							builder.Append(",");
						}
						builder.Append(parameter.UnspecializedName);
						first = false;
					}
					builder.Append(">");
				}
				return builder.ToString();
			}
		}
		
	
		/// <summary>
		/// Returns the name of this hl7 type.
		/// </summary>
		///
		/// <returns>the name of this hl7 type.</returns>
		public String UnparameterizedName {
		/// <summary>
		/// Returns the name of this hl7 type.
		/// </summary>
		///
		/// <returns>the name of this hl7 type.</returns>
		  get {
				return this.name;
			}
		}
		
	
		/// <summary>
		/// Returns the generic parameters of this hl7 type.
		/// </summary>
		///
		/// <returns>the generic parameters of this hl7 type.</returns>
		public IList<Hl7TypeName> Parameters {
		/// <summary>
		/// Returns the generic parameters of this hl7 type.
		/// </summary>
		///
		/// <returns>the generic parameters of this hl7 type.</returns>
		  get {
				return this.parameters;
			}
		}
		
	
		/// <summary>
		/// Constructs an Hl7TypeName object from the given string. 
		/// </summary>
		///
		/// <param name="typeName">the type name</param>
		/// <returns>the constructed Hl7TypeName</returns>
		public static Hl7TypeName Parse(String typeName) {
			return new Hl7TypeParser().Parse(typeName);
		}
	
		/// <summary>
		/// Returns the root name of this hl7 type name.
		/// </summary>
		///
		/// <returns>the root name of this hl7 type name</returns>
		public String RootName {
		/// <summary>
		/// Returns the root name of this hl7 type name.
		/// </summary>
		///
		/// <returns>the root name of this hl7 type name</returns>
		  get {
				if (this.name.Contains(".")) {
					return Ca.Infoway.Messagebuilder.StringUtils.SubstringBefore(this.name, ".");
				} else {
					return this.name;
				}
			}
		}
		
	
		/// <summary>
		/// Returns whether the supplied object is equal to this object.
		/// </summary>
		///
		/// <param name="obj">the object to compare</param>
		/// <returns>whether the supplied object is equal to this object.</returns>
		public override bool Equals(Object obj) {
			if (obj == null) {
				return false;
			} else if (obj == (Object) this) {
				return true;
			} else if ((Object) obj.GetType() != (Object) GetType()) {
				return false;
			} else {
				return String.Equals(((String) this.ToString()), ((String) ((Hl7TypeName) obj)
									.ToString()));
			}
		}
	
		/// <summary>
		/// Returns the hashc for this object.
		/// </summary>
		///
		/// <returns>the hashc for this object</returns>
		public override int GetHashCode() {
			return ((String) ToString()).GetHashCode();
		}
	}
}
