/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-03-01 17:48:17 -0500 (Fri, 01 Mar 2013) $
 * Revision:      $LastChangedRevision: 6663 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// An identifier for a business concept that is used in a
	/// particular field of an HL7 message.
	/// </summary>
	///
	public class VocabularyDomain : Describable {
	
		private Int64? id;
		private String type;
		private String businessName;
		private String description;
	
		private VocabularyDomain parent;
		private VocabularyDomain root;
	
		/// <summary>
		/// Instantiates a new vocabulary domain.
		/// </summary>
		///
		public VocabularyDomain() {
		}
	
		/// <summary>
		/// Instantiates a new vocabulary domain.
		/// </summary>
		///
		/// <param name="type_0">the type</param>
		public VocabularyDomain(String type_0) {
			this.type = type_0;
		}
	
		/// <summary>
		/// Sets the id.
		/// </summary>
		///
		/// <param name="id_0">the new id</param>
		public Int64? Id {
		/// <summary>
		/// Gets the id.
		/// </summary>
		///
		/// <returns>the id</returns>
		  get {
				return this.id;
			}
		/// <summary>
		/// Sets the id.
		/// </summary>
		///
		/// <param name="id_0">the new id</param>
		  set {
				this.id = value;
			}
		}
		
	
		/// <summary>
		/// Sets the type.
		/// </summary>
		///
		/// <param name="type_0">the new type</param>
		public String Type {
		/// <summary>
		/// Gets the type.
		/// </summary>
		///
		/// <returns>the type</returns>
		  get {
				return type;
			}
		/// <summary>
		/// Sets the type.
		/// </summary>
		///
		/// <param name="type_0">the new type</param>
		  set {
				this.type = value;
			}
		}
		
	
		/// <summary>
		/// Gets the type as class.
		/// </summary>
		///
		/// <returns>the type as class</returns>
		public Type TypeAsClass {
		/// <summary>
		/// Gets the type as class.
		/// </summary>
		///
		/// <returns>the type as class</returns>
		  get {
				try {
					return ILOG.J2CsMapping.Reflect.Helper.GetNativeType("ca.infoway.messagebuilder.domainvalue."
										+ Type);
				} catch (TypeLoadException e) {
					return null;
				}
			}
		}
		
	
		/// <summary>
		/// Gets the unqualified type.
		/// </summary>
		///
		/// <returns>the unqualified type</returns>
		public String UnqualifiedType {
		/// <summary>
		/// Gets the unqualified type.
		/// </summary>
		///
		/// <returns>the unqualified type</returns>
		  get {
				return Ca.Infoway.Messagebuilder.ClassUtils.GetShortClassName(this.GetType());
			}
		}
		
	
		/// <summary>
		/// Compare to.
		/// </summary>
		///
		/// <param name="obj">the obj</param>
		/// <returns>the int</returns>
		public int CompareTo(Object obj) {
			VocabularyDomain that = (VocabularyDomain) obj;
			return new CompareToBuilder().Append(this.Type, that.Type)
					.Append(this.Id, that.Id).Append(
							this.BusinessName, that.BusinessName).Append(
							this.Description, that.Description)
					.ToComparison();
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public override bool Equals(Object o) {
			if (o == null) {
				return false;
			} else if ((Object) o.GetType() != (Object) GetType()) {
				return false;
			} else {
				return Equals((VocabularyDomain) o);
			}
		}
	
		private bool Equals(VocabularyDomain that) {
			return new EqualsBuilder().Append(this.id, that.id).Append(
					this.Type, that.Type).Append(this.Id,
					that.Id).Append(this.BusinessName,
					that.BusinessName).Append(this.Description,
					that.Description).IsEquals();
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public override int GetHashCode() {
			return new HashCodeBuilder().Append(this.id).Append(this.type).Append(
					this.businessName).Append(this.description).ToHashCode();
		}
	
		/// <summary>
		/// Sets the business name.
		/// </summary>
		///
		/// <param name="businessName_0">the new business name</param>
		public String BusinessName {
		/// <summary>
		/// Gets the business name.
		/// </summary>
		///
		/// <returns>the business name</returns>
		  get {
				return this.businessName;
			}
		/// <summary>
		/// Sets the business name.
		/// </summary>
		///
		/// <param name="businessName_0">the new business name</param>
		  set {
				this.businessName = value;
			}
		}
		
	
		/// <summary>
		/// Sets the description.
		/// </summary>
		///
		/// <param name="description_0">the new description</param>
		public virtual String Description {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return this.description;
			}
		/// <summary>
		/// Sets the description.
		/// </summary>
		///
		/// <param name="description_0">the new description</param>
		  set {
				this.description = value;
			}
		}
		
	
		/// <summary>
		/// Sets the parent.
		/// </summary>
		///
		/// <param name="parent_0">the new parent</param>
		public VocabularyDomain Parent {
		/// <summary>
		/// Gets the parent.
		/// </summary>
		///
		/// <returns>the parent</returns>
		  get {
				return this.parent;
			}
		/// <summary>
		/// Sets the parent.
		/// </summary>
		///
		/// <param name="parent_0">the new parent</param>
		  set {
				this.parent = value;
			}
		}
		
	
		/// <summary>
		/// Sets the root.
		/// </summary>
		///
		/// <param name="root_0">the new root</param>
		public VocabularyDomain Root {
		/// <summary>
		/// Gets the root.
		/// </summary>
		///
		/// <returns>the root</returns>
		  get {
				return this.root;
			}
		/// <summary>
		/// Sets the root.
		/// </summary>
		///
		/// <param name="root_0">the new root</param>
		  set {
				this.root = value;
			}
		}
		
	
		/// <summary>
		/// Checks if is root type.
		/// </summary>
		///
		/// <returns>true, if is root type</returns>
		public bool RootType {
		/// <summary>
		/// Checks if is root type.
		/// </summary>
		///
		/// <returns>true, if is root type</returns>
		  get {
				return this.root == null;
			}
		}
		
	}
}
