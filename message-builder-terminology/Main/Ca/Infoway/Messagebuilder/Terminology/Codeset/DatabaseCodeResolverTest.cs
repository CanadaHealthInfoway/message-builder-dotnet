/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:43:19 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4339 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
#if inctest 
namespace Ca.Infoway.Messagebuilder.Terminology.Codeset {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using Ca.Infoway.Messagebuilder.Terminology;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Dao;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain;
	using Ca.Infoway.Messagebuilder.Terminology.Proxy;
	using NUnit;
    using NUnit.Framework;
    using NUnit.Framework.Constraints;

    using NMock2;

    using System;
    using System.Collections.Generic;
	
	/* @RunWith(JMock.class)*/
	[NUnit.Framework.TestFixture]
	public class DatabaseCodeResolverTest {
	
		public DatabaseCodeResolverTest() {
			this.jmock = new DatabaseCodeResolverTest.Anonymous_C10();
		}
	
		public sealed class Anonymous_C10 : Mockery {
			public Anonymous_C10() {
				SetImposteriser(Org.Jmock.Lib.Legacy.ClassImposteriser.INSTANCE);
			}
		}
	
		public sealed class Anonymous_C9 : Expectations {
				private DatabaseCodeResolverTest outer_DatabaseCodeResolverTest;
				private readonly CodeSetDao f_setDao;
				private readonly TypedCodeFactory f_factory;
		
				public Anonymous_C9(DatabaseCodeResolverTest databaseCodeResolverTest, CodeSetDao codeSetDao, TypedCodeFactory codeFactory) {
					Will(Org.Jmock.Expectations
							.ReturnValue(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE));
					this.One(f_factory)
							.Create(
									this.With(Org.Jmock.Expectations
											.Same<System.Type>(typeof(x_NormalRestrictedTabooConfidentialityKind))),
									this.With(outer_DatabaseCodeResolverTest
											.HasSameContents(ILOG.J2CsMapping.Collections.Arrays.AsList(typeof(x_NormalRestrictedTabooConfidentialityKind)))),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_SYSTEM_OID)),
									this.With(Org.Jmock.Expectations.Any<System.Collections.Generic.IDictionary<%1,%2>>(typeof(IDictionary))),
									With(Org.Jmock.Expectations.Any<System.Int32?>(typeof(Int32?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))));
					Will(Org.Jmock.Expectations
							.ReturnValue(outer_DatabaseCodeResolverTest
									.CreateValueSetsCollection(new String[] { Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE })));
					this.Allowing(f_setDao).SelectValueSetsByCode(
							this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
					outer_DatabaseCodeResolverTest = databaseCodeResolverTest;
					this.f_setDao = codeSetDao;
					this.f_factory = codeFactory;
				}
			}
	
		public sealed class Anonymous_C8 : 
				TypeSafeMatcher<ICollection<Type>> {
			private readonly IList<Object> f_types;
	
			public bool MatchesSafely(ICollection<Type> o) {
				ICollection<Type> list = (ICollection<Type>) o;
				if (list.Count != f_types.Count) {
					return false;
				} else {
					return ILOG.J2CsMapping.Collections.Collections.ContainsAll(f_types,list) && ILOG.J2CsMapping.Collections.Generics.Collections.ContainsAll(list,f_types);
				}
			}
	
			public override void DescribeTo(Description description) {
				description.AppendText("hasSameContents as " + f_types);
			}
	
			public Anonymous_C8(IList<Object> types) {
				this.f_types = types;
			}
		}
	
		public sealed class Anonymous_C7 : Expectations {
				private DatabaseCodeResolverTest outer_DatabaseCodeResolverTest;
				private readonly CodeSetDao f_setDao;
		
				public Anonymous_C7(DatabaseCodeResolverTest databaseCodeResolverTest, CodeSetDao codeSetDao) {
					Will(Org.Jmock.Expectations
							.ReturnValue(outer_DatabaseCodeResolverTest
									.CreateEmptyCollection<System.Object>()));
					this.Allowing(f_setDao).SelectValueSetsByCode(
							this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
					outer_DatabaseCodeResolverTest = databaseCodeResolverTest;
					this.f_setDao = codeSetDao;
				}
			}
	
		public sealed class Anonymous_C6 : Expectations {
				private DatabaseCodeResolverTest outer_DatabaseCodeResolverTest;
				private readonly CodeSetDao f_setDao;
				private readonly TypedCodeFactory f_factory;
		
				public Anonymous_C6(DatabaseCodeResolverTest databaseCodeResolverTest, CodeSetDao codeSetDao, TypedCodeFactory codeFactory) {
					Will(Org.Jmock.Expectations
							.ReturnValue(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE));
					this.One(f_factory)
							.Create(
									this.With(Org.Jmock.Expectations
											.Same<System.Type>(typeof(x_NormalRestrictedTabooConfidentialityKind))),
									this.With(outer_DatabaseCodeResolverTest
											.HasSameContents(ILOG.J2CsMapping.Collections.Arrays.AsList(typeof(x_NormalRestrictedTabooConfidentialityKind)))),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_SYSTEM_OID)),
									this.With(Org.Jmock.Expectations.Any<System.Collections.Generic.IDictionary<%1,%2>>(typeof(IDictionary))),
									With(Org.Jmock.Expectations.Any<System.Int32?>(typeof(Int32?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))));
					Will(Org.Jmock.Expectations
							.ReturnValue(outer_DatabaseCodeResolverTest
									.CreateValueSetsCollection(new String[] {
											Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE,
											"another_code" })));
					this.Allowing(f_setDao).SelectValueSetsByCode(
							this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
					outer_DatabaseCodeResolverTest = databaseCodeResolverTest;
					this.f_setDao = codeSetDao;
					this.f_factory = codeFactory;
				}
			}
	
		public sealed class Anonymous_C5 : Expectations {
				private DatabaseCodeResolverTest outer_DatabaseCodeResolverTest;
				private readonly CodeSetDao f_setDao;
				private readonly TypedCodeFactory f_factory;
		
				public Anonymous_C5(DatabaseCodeResolverTest databaseCodeResolverTest, CodeSetDao codeSetDao, TypedCodeFactory codeFactory) {
					Will(Org.Jmock.Expectations
							.ReturnValue(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE));
					this.One(f_factory)
							.Create(
									this.With(Org.Jmock.Expectations
											.Same<System.Type>(typeof(x_NormalRestrictedTabooConfidentialityKind))),
									this.With(outer_DatabaseCodeResolverTest
											.HasSameContents(ILOG.J2CsMapping.Collections.Arrays.AsList(typeof(x_NormalRestrictedTabooConfidentialityKind)))),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_SYSTEM_OID)),
									this.With(Org.Jmock.Expectations.Any<System.Collections.Generic.IDictionary<%1,%2>>(typeof(IDictionary))),
									With(Org.Jmock.Expectations.Any<System.Int32?>(typeof(Int32?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))));
					Will(Org.Jmock.Expectations
							.ReturnValue(outer_DatabaseCodeResolverTest
									.CreateValueSet(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)));
					this.Allowing(f_setDao).FindValueByCodeSystem(
							this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
					outer_DatabaseCodeResolverTest = databaseCodeResolverTest;
					this.f_setDao = codeSetDao;
					this.f_factory = codeFactory;
				}
			}
	
		public sealed class Anonymous_C4 : Expectations {
				private DatabaseCodeResolverTest outer_DatabaseCodeResolverTest;
				private readonly CodeSetDao f_setDao;
				private readonly IList<Type> f_list;
				private readonly TypedCodeFactory f_factory;
		
				public Anonymous_C4(DatabaseCodeResolverTest databaseCodeResolverTest, CodeSetDao codeSetDao, IList<Type> list,
						TypedCodeFactory codeFactory) {
					Will(Org.Jmock.Expectations
									.ReturnValue(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE));
							this.One(f_factory)
									.Create(
											this.With(Org.Jmock.Expectations
													.Same<System.Type>(typeof(Confidentiality))),
											this.With(outer_DatabaseCodeResolverTest
													.HasSameContents(f_list)),
											this.With(Org.Jmock.Expectations
													.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)),
											this.With(Org.Jmock.Expectations
													.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_SYSTEM_OID)),
											this.With(Org.Jmock.Expectations
													.Any<System.Collections.Generic.IDictionary<%1,%2>>(typeof(IDictionary))),
											With(Org.Jmock.Expectations
													.Any<System.Int32?>(typeof(Int32?))),
											With(Org.Jmock.Expectations
													.Any<System.Boolean?>(typeof(Boolean?))),
											With(Org.Jmock.Expectations
													.Any<System.Boolean?>(typeof(Boolean?))));
							Will(Org.Jmock.Expectations
									.ReturnValue(outer_DatabaseCodeResolverTest
											.CreateValueSet(
													Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE,
													f_list)));
							this.Allowing(f_setDao).FindValueByCodeSystem(
									this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
									this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))),
									this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
					outer_DatabaseCodeResolverTest = databaseCodeResolverTest;
					this.f_setDao = codeSetDao;
					this.f_list = list;
					this.f_factory = codeFactory;
				}
			}
	
		public sealed class Anonymous_C3 : Expectations {
			private readonly CodeSetDao f_setDao;
	
			public Anonymous_C3(CodeSetDao codeSetDao) {
				Will(Org.Jmock.Expectations.ReturnValue(null));
				this.Allowing(f_setDao).FindValueByCodeSystem(
						this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
						this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))),
						this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
				this.f_setDao = codeSetDao;
			}
		}
	
		public sealed class Anonymous_C2 : Expectations {
				private DatabaseCodeResolverTest outer_DatabaseCodeResolverTest;
				private readonly CodeSetDao f_setDao;
				private readonly TypedCodeFactory f_factory;
		
				public Anonymous_C2(DatabaseCodeResolverTest databaseCodeResolverTest, CodeSetDao codeSetDao, TypedCodeFactory codeFactory) {
					Will(Org.Jmock.Expectations
							.ReturnValue(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE));
					this.One(f_factory)
							.Create(
									this.With(Org.Jmock.Expectations
											.Same<System.Type>(typeof(x_NormalRestrictedTabooConfidentialityKind))),
									this.With(outer_DatabaseCodeResolverTest
											.HasSameContents(ILOG.J2CsMapping.Collections.Arrays.AsList(typeof(x_NormalRestrictedTabooConfidentialityKind)))),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)),
									this.With(Org.Jmock.Expectations
											.Equal<System.String>(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_SYSTEM_OID)),
									this.With(outer_DatabaseCodeResolverTest
											.IsValidDisplayTextMap()),
									With(Org.Jmock.Expectations.Any<System.Int32?>(typeof(Int32?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))),
									With(Org.Jmock.Expectations.Any<System.Boolean?>(typeof(Boolean?))));
					Will(Org.Jmock.Expectations
							.ReturnValue(outer_DatabaseCodeResolverTest
									.CreateValueSetWithDisplayText(Ca.Infoway.Messagebuilder.Terminology.Codeset.DatabaseCodeResolverTest.CODE_VALUE)));
					this.Allowing(f_setDao).FindValueByCodeSystem(
							this.With(Org.Jmock.Expectations.Any<System.Type>(typeof(Type))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))),
							this.With(Org.Jmock.Expectations.Any<System.String>(typeof(String))));
					outer_DatabaseCodeResolverTest = databaseCodeResolverTest;
					this.f_setDao = codeSetDao;
					this.f_factory = codeFactory;
				}
			}
	
		public sealed class Anonymous_C1 : TypeSafeMatcher<IDictionary<Object, Object>> {
			public bool MatchesSafely(IDictionary<Object, Object> o) {
				if (!typeof(IDictionary).IsAssignableFrom(o.GetType())) {
					return false;
				}
				IDictionary<String, String> map = (IDictionary<String, String>) o;
				if (!(map.Count == 2)) {
					return false;
				}
				if (!map.ContainsKey("en")) {
					return false;
				}
				if (!"english".Equals(((System.String)ILOG.J2CsMapping.Collections.Generics.Collections.Get(map,"en")))) {
					return false;
				}
				if (!map.ContainsKey("fr")) {
					return false;
				}
				if (!"french".Equals(((System.String)ILOG.J2CsMapping.Collections.Generics.Collections.Get(map,"fr")))) {
					return false;
				}
				return true;
			}
	
			public override void DescribeTo(Description description) {
				description.AppendText("map with expected values");
			}
	
			public Anonymous_C1() {
			}
		}
	
		private sealed class Anonymous_C0 : 
				x_NormalRestrictedTabooConfidentialityKind {
			
			public String CodeValue {
			  get {
						return null;
					}
			}
			
	
			
			public String CodeSystem {
			  get {
						return null;
					}
			}
			
	
			public Anonymous_C0() {
			}
		}
	
		internal Mockery jmock;
	
		static internal readonly String CODE_VALUE = "TEST";
		static internal readonly String CODE_SYSTEM_OID = "TEST OID";
		static internal readonly Code CODE = CreateDummyCode();
	
		private CodeSetDao codeSetDao;
		private TypedCodeFactory codeFactory;
		private CodeResolver resolver;
	
		[NUnit.Framework.SetUp]
		public void SetUp() {
			codeSetDao = this.jmock.Mock<CodeSetDao>(typeof(CodeSetDao));
			codeFactory = this.jmock.Mock<TypedCodeFactory>(typeof(TypedCodeFactory));
			resolver = new DatabaseCodeResolver(this.codeSetDao, this.codeFactory);
		}
	
		/* @SuppressWarnings("deprecation")*/
		[NUnit.Framework.Test]
		public void TestShouldHandleLookupByCode() {
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C9(this, codeSetDao, codeFactory));
	
			Code result = resolver.Lookup<x_NormalRestrictedTabooConfidentialityKind>(
					typeof(x_NormalRestrictedTabooConfidentialityKind), CODE_VALUE);
			NUnit.Framework.Assert.AreSame(CODE,result);
		}
	
		/* @SuppressWarnings("unchecked")*/ internal Matcher HasSameContents(IList<Type> types) {
			return new DatabaseCodeResolverTest.Anonymous_C8(types);
		}
	
		[NUnit.Framework.Test]
		public void TestShouldNotDieWhenLookupByCodeFindsNoMatch() {
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C7(this, codeSetDao));
	
			Code result = resolver.Lookup<x_NormalRestrictedTabooConfidentialityKind>(
					typeof(x_NormalRestrictedTabooConfidentialityKind), CODE_VALUE);
			NUnit.Framework.Assert.IsNull(result);
		}
	
		[NUnit.Framework.Test]
		public void TestShouldNotDieWhenLookupByCodeFindsMultipleMatches() {
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C6(this, codeSetDao, codeFactory));
	
			Code result = resolver.Lookup<x_NormalRestrictedTabooConfidentialityKind>(
					typeof(x_NormalRestrictedTabooConfidentialityKind), CODE_VALUE);
			NUnit.Framework.Assert.AreSame(CODE,result);
		}
	
		[NUnit.Framework.Test]
		public void TestShouldHandleLookupByCodeSystem() {
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C5(this, codeSetDao, codeFactory));
	
			Code result = resolver.Lookup<x_NormalRestrictedTabooConfidentialityKind>(
					typeof(x_NormalRestrictedTabooConfidentialityKind), CODE_VALUE,
					CODE_SYSTEM_OID);
			NUnit.Framework.Assert.AreSame(CODE,result);
		}
	
		[NUnit.Framework.Test]
		public void TestShouldFindAllTypesForCode() {
			IList<Type> list = new List<Type>();
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,typeof(x_NormalRestrictedTabooConfidentialityKind));
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(list,typeof(x_VeryBasicConfidentialityKind));
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C4(this, codeSetDao, list, codeFactory));
	
			Code result = resolver.Lookup<Confidentiality>(typeof(Confidentiality), CODE_VALUE,
					CODE_SYSTEM_OID);
			NUnit.Framework.Assert.AreSame(CODE,result);
		}
	
		internal Object CreateValueSet(String code, IList<Type> list) {
			ValueSetEntry valueSetEntry = new ValueSetEntry();
			ValueSet valueSet = new ValueSet();
			valueSetEntry.ValueSet = valueSet;
			/* foreach */
			foreach (Type type  in  list) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(valueSet.VocabularyDomains,new VocabularyDomain(type.Name));
			}
			valueSetEntry.CodedValue = CreateCodedValue(code);
			return valueSetEntry;
		}
	
		internal ValueSetEntry CreateValueSet(String code) {
			ValueSet valueSet = new ValueSet();
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(valueSet.VocabularyDomains,new VocabularyDomain(
									"x_NormalRestrictedTabooConfidentialityKind"));
			ValueSetEntry valueSetEntry = new ValueSetEntry();
			valueSetEntry.ValueSet = valueSet;
			valueSetEntry.CodedValue = CreateCodedValue(code);
			return valueSetEntry;
		}
	
		internal ValueSetEntry CreateValueSetWithDisplayText(String code) {
			ValueSet valueSet = new ValueSet();
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(valueSet.VocabularyDomains,new VocabularyDomain(
									"x_NormalRestrictedTabooConfidentialityKind"));
			ValueSetEntry valueSetEntry = new ValueSetEntry();
			valueSetEntry.ValueSet = valueSet;
			valueSetEntry.CodedValue = CreateCodedValueWithDisplayText(code);
			return valueSetEntry;
		}
	
		[NUnit.Framework.Test]
		public void TestShouldNotDieWhenLookupByCodeSystemFindsNoMatch() {
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C3(codeSetDao));
	
			Code result = resolver.Lookup<x_NormalRestrictedTabooConfidentialityKind>(
					typeof(x_NormalRestrictedTabooConfidentialityKind), CODE_VALUE,
					CODE_SYSTEM_OID);
			NUnit.Framework.Assert.IsNull(result);
		}
	
		[NUnit.Framework.Test]
		public void TestShouldGenerateDisplayTextMapCorrectly() {
			this.jmock.Checking(new DatabaseCodeResolverTest.Anonymous_C2(this, codeSetDao, codeFactory));
	
			Code result = resolver.Lookup<x_NormalRestrictedTabooConfidentialityKind>(
					typeof(x_NormalRestrictedTabooConfidentialityKind), CODE_VALUE,
					CODE_SYSTEM_OID);
			NUnit.Framework.Assert.AreSame(CODE,result);
		}
	
		internal Matcher IsValidDisplayTextMap() {
			return new DatabaseCodeResolverTest.Anonymous_C1();
		}
	
		internal  IList<T> CreateEmptyCollection<T>() {
			return ILOG.J2CsMapping.Collections.Generics.Collections.EmptyList<T>();
		}
	
		internal IList<ValueSetEntry> CreateValueSetsCollection(String[] codes) {
			IList<ValueSetEntry> result = new List<ValueSetEntry>();
			/* foreach */
			foreach (String code  in  codes) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,CreateValueSet(code));
			}
			return result;
		}
	
		private CodedValue CreateCodedValue(String code) {
			CodedValue result = new CodedValue();
			result.Code = code;
			result.CodeSystem = CreateCodeSystem();
			return result;
		}
	
		private CodedValue CreateCodedValueWithDisplayText(String code) {
			CodedValue result = CreateCodedValue(code);
	
			IDictionary<String, String> map = new Dictionary<String, String>();
			ILOG.J2CsMapping.Collections.Generics.Collections.Put(map,(System.String)("en"),(System.String)("english"));
			ILOG.J2CsMapping.Collections.Generics.Collections.Put(map,(System.String)("fr"),(System.String)("french"));
			result.Descriptions = map;
	
			return result;
		}
	
		private CodeSystem CreateCodeSystem() {
			CodeSystem result = new CodeSystem();
			result.Oid = CODE_SYSTEM_OID;
			return result;
		}
	
		private static Code CreateDummyCode() {
			return new DatabaseCodeResolverTest.Anonymous_C0();
		}
	}
}
#endif