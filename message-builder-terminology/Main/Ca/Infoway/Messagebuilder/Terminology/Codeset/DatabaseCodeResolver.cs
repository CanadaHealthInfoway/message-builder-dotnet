/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:43:19 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4339 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Codeset {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using Ca.Infoway.Messagebuilder.Terminology;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Dao;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain;
	using Ca.Infoway.Messagebuilder.Terminology.Proxy;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
//	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Knows how to provide database-backed Codes.
	/// </summary>
	///
	public class DatabaseCodeResolver : CodeResolver {
	
		private readonly CodeSetDao dao;
		private readonly TypedCodeFactory codeFactory;
	
		/// <summary>
		/// Instantiates a new database c resolver.
		/// </summary>
		///
		/// <param name="dao_0">the dao</param>
		/// <param name="codeFactory_1">the c factory</param>
		public DatabaseCodeResolver(CodeSetDao dao_0, TypedCodeFactory codeFactory_1) {
			this.dao = dao_0;
			this.codeFactory = codeFactory_1;
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual T Lookup<T>(Type type, String code)  where T : Code {
			IList<ValueSetEntry> codedValues = dao.SelectValueSetsByCode(type, code);
			return ((codedValues.Count==0)) ?  default(T)/* was: null */ : this.CreateCode<T>(type, codedValues[0]);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual T Lookup<T>(Type type, String code,
				String codeSystemOid)  where T : Code {
			ValueSetEntry valueSet = this.dao.FindValueByCodeSystem(type, code,
					codeSystemOid);
			return (valueSet == null) ?  default(T)/* was: null */ : this.CreateCode<T>(type, valueSet);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual ICollection<T> Lookup<T>(Type type)  where T : Code {
			IList<ValueSetEntry> values = dao
					.SelectValueSetsByVocabularyDomain(type);
			return this.ConvertValuesToCodes<T>(type, values);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual ICollection<Code> Lookup(Type type) {
			IList<ValueSetEntry> values = dao
					.SelectValueSetsByVocabularyDomain(type);
			return this.ConvertValuesToCodes<Code>(type, values);
		}
	
		private ICollection<T> ConvertValuesToCodes<T>(Type type,
				IList<ValueSetEntry> values)  where T : Code {
			IList<T> result = new List<T>();
			/* foreach */
			foreach (ValueSetEntry valueSet  in  values) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,this.CreateCode<T>(type, valueSet));
			}
			return result;
		}
	
		internal  T CreateCode<T>(Type type, ValueSetEntry value_ren)  where T : Code {
			return this.CreateCode<T>(type, value_ren.CodedValue,
					GetImplementedTypes(value_ren));
		}

        private ILOG.J2CsMapping.Collections.Generics.ISet<Type> GetImplementedTypes(ValueSetEntry value_ren)
        {
            ILOG.J2CsMapping.Collections.Generics.ISet<Type> typeList = new HashedSet<Type>();
			ICollection<VocabularyDomain> vocabularyDomains = value_ren.ValueSet.VocabularyDomains;
			/* foreach */
			foreach (VocabularyDomain vocabularyDomain  in  vocabularyDomains) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(typeList,vocabularyDomain.TypeAsClass);
			}
			return typeList;
		}
	
		private T CreateCode<T>(Type type, CodedValue value_ren,
                ILOG.J2CsMapping.Collections.Generics.ISet<Type> implementedTypes) where T : Code
        {
			return default(T);
//			return type.Cast<T>(this.codeFactory.Create(type, implementedTypes, value_ren.Code, value_ren.CodeSystem.Oid,
//					new Dictionary<String, String>(value_ren.Descriptions),
//					((int?)(1)), ILOG.J2CsMapping.Util.BooleanUtil.TRUE, ILOG.J2CsMapping.Util.BooleanUtil.TRUE));
		}
	
		/// <summary>
		/// Lookup.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="type">the type</param>
		/// <param name="nullFlavor">the null flavor</param>
		/// <returns>the t</returns>
		public T Lookup<T>(Type type, NullFlavor nullFlavor)  where T : Code {
			//TODO: accept nullflavours
			return  default(T)/* was: null */;
		}
	
		/// <summary>
		/// Lookup.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="arg0">the arg0</param>
		/// <param name="code">the c</param>
		/// <param name="codeSystemOid">the c system oid</param>
		/// <param name="arg3">the arg3</param>
		/// <returns>the t</returns>
		public T Lookup<T>(Type arg0, String code,
				String codeSystemOid, NullFlavor arg3)  where T : Code {
			//TODO: accept nullflavours
			return this.Lookup<T>(arg0, code, codeSystemOid);
		}
	}
}
