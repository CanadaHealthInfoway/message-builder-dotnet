/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:43:30 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4341 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Codeset.Dao {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain;
	using ILOG.J2CsMapping.Collections.Generics;
	using NHibernate; //! Org.Hibernate;
    
    using Spring.Data;
    using Spring.Data.NHibernate;
	using Spring.Data.NHibernate.Support; //!  Org.Springframework.Orm.Hibernate3.Support;
    using System;
	using System.Collections;
	using System.Collections.Generic;
	//using System.ComponentModel;
	//using System.Data.SqlClient;
	using System.Runtime.CompilerServices;
	//!using org.springframework.orm.hibernate3;
	
	/// <summary>
	/// The Class HibernateCodeSetDao.
	/// Implementation using Hibernate of the CodeSetDao interface
	/// </summary>
	///
	public class HibernateCodeSetDao : HibernateDaoSupport, 
			MutableCodeSetDao {
	
		public sealed class Anonymous_C12 : IHibernateCallback {
			private readonly String f_code;
			private readonly Type f_domainType;
	
			public Object DoInHibernate(ISession session) {
			
				ICriteria criteriaValueSet = session
						.CreateCriteria(typeof(ValueSetEntry));
			
				ICriteria criteriaCodedValue = criteriaValueSet
						.CreateCriteria("codedValue");
				criteriaCodedValue.Add(NHibernate.Criterion.Restrictions.Eq("code", f_code));
			
				ICriteria criteriaVocabularyDomain = criteriaValueSet
						.CreateCriteria("valueSet").CreateCriteria(
								"vocabularyDomains");
				criteriaVocabularyDomain
						.Add(NHibernate.Criterion.Restrictions
								.Eq(
										"type",
										f_domainType.Name));
			
				return criteriaValueSet.List();
			}
	
			public Anonymous_C12(String code, Type vocabularyDomainType) {
				this.f_code = code;
				this.f_domainType = vocabularyDomainType;
			}
		}
	
		public sealed class Anonymous_C11 : IHibernateCallback {
			private readonly String f_code;
			private readonly String f_systemOid;
			private readonly Type f_domainType;
	
			public Object DoInHibernate(ISession session) {
			
				ICriteria criteriaValueSetEntry = session
						.CreateCriteria(typeof(ValueSetEntry));
			
				ICriteria criteriaCodedValue = criteriaValueSetEntry
						.CreateCriteria("codedValue");
				criteriaCodedValue.Add(NHibernate.Criterion.Restrictions.Eq("code", f_code));
			
				ICriteria criteriaCodeSystem = criteriaCodedValue
						.CreateCriteria("codeSystem");
			
				criteriaCodeSystem.Add(NHibernate.Criterion.Restrictions.Eq("oid",
						f_systemOid));
			
				ICriteria criteriaVocabularyDomain = criteriaValueSetEntry
						.CreateCriteria("valueSet").CreateCriteria(
								"vocabularyDomains");
				criteriaVocabularyDomain
						.Add(NHibernate.Criterion.Restrictions
								.Eq(
										"type",
										f_domainType.Name));
			
				IList list = criteriaValueSetEntry.List();
				return ((list.Count==0)) ? null : list[0];
			}
	
			public Anonymous_C11(String code, String codeSystemOid,
					Type vocabularyDomainType) {
				this.f_code = code;
				this.f_systemOid = codeSystemOid;
				this.f_domainType = vocabularyDomainType;
			}
		}
	
		public sealed class Anonymous_C10 : IHibernateCallback {
			public Object DoInHibernate(ISession session) {
				ICriteria criteria = session
						.CreateCriteria(typeof(VocabularyDomain));
				criteria.AddOrder(NHibernate.Criterion.Order.Asc("type"));
				return criteria.List();
			}
	
			public Anonymous_C10() {
			}
		}
	
		public sealed class Anonymous_C9 : IHibernateCallback {
			private readonly String f_type;
	
			public Object DoInHibernate(ISession session) {
				ICriteria criteria = session
						.CreateCriteria(typeof(VocabularyDomain));
				criteria.Add(NHibernate.Criterion.Restrictions.Eq("type", f_type));
				return criteria.UniqueResult();
			}
	
			public Anonymous_C9(String type) {
				this.f_type = type;
			}
		}
	
		public sealed class Anonymous_C8 : IHibernateCallback {
			private readonly String f_name;
	
			public Object DoInHibernate(ISession session) {
			
				ICriteria criteriaValueSetEntry = session
						.CreateCriteria(typeof(ValueSetEntry));
			
				ICriteria criteriaValue = criteriaValueSetEntry
						.CreateCriteria("valueSet");
				ICriteria criteriaVocabularyDomain = criteriaValue
						.CreateCriteria("vocabularyDomains");
				criteriaVocabularyDomain.Add(NHibernate.Criterion.Restrictions
						.Eq("type", f_name));
			
				return criteriaValueSetEntry.List();
			}
	
			public Anonymous_C8(String domainName) {
				this.f_name = domainName;
			}
		}
	
		public sealed class Anonymous_C7 : IHibernateCallback {
				private HibernateCodeSetDao outer_HibernateCodeSetDao;
				private readonly CodeSearchCriteria f_criteria;
		
				public Object DoInHibernate(ISession session) {
					ICriteria criteria = session
							.CreateCriteria(typeof(VocabularyDomain));
					outer_HibernateCodeSetDao.ContrainOnTypeIfRequired(criteria, f_criteria);
					outer_HibernateCodeSetDao.ContrainOnBusinessNameIfRequired(criteria,
							f_criteria);
					outer_HibernateCodeSetDao.ContrainOnDescriptionIfRequired(criteria,
							f_criteria);
					criteria.AddOrder(NHibernate.Criterion.Order.Asc("type"));
					return criteria.List();
				}
		
				public Anonymous_C7(HibernateCodeSetDao hibernateCodeSetDao, CodeSearchCriteria searchCriteria) {
					outer_HibernateCodeSetDao = hibernateCodeSetDao;
					this.f_criteria = searchCriteria;
				}
			}
	
		public sealed class Anonymous_C6 : IHibernateCallback {
			public Object DoInHibernate(ISession session) {
				return session.CreateCriteria(typeof(CodeSystem)).List();
			}
	
			public Anonymous_C6() {
			}
		}
	
		public sealed class Anonymous_C5 : IHibernateCallback {
				private HibernateCodeSetDao outer_HibernateCodeSetDao;
				private readonly CodeSystemSearchCriteria f_criteria;
				private readonly int f_row;
				private readonly int f_row2;
		
				public Object DoInHibernate(ISession session) {
					ICriteria criteria = outer_HibernateCodeSetDao.CreateStandardCodeSystemCriteria(
							f_criteria, session);
					criteria.AddOrder(NHibernate.Criterion.Order.Asc("name")/*.IgnoreCase()*/);
					criteria.AddOrder(NHibernate.Criterion.Order.Asc("oid")/*.IgnoreCase()*/);
					criteria.AddOrder(NHibernate.Criterion.Order.Asc("id"));
					if (f_row >= 0 && f_row2 >= 0) {
						criteria.SetFirstResult(f_row);
						criteria.SetMaxResults(f_row2 - f_row); // 0-based; endRow = exclusive
					}
					return criteria.List();
				}
		
				public Anonymous_C5(HibernateCodeSetDao hibernateCodeSetDao, CodeSystemSearchCriteria searchCriteria,
						int startRow, int endRow) {
					outer_HibernateCodeSetDao = hibernateCodeSetDao;
					this.f_criteria = searchCriteria;
					this.f_row = startRow;
					this.f_row2 = endRow;
				}
			}
	
		public sealed class Anonymous_C4 : IHibernateCallback {
				private HibernateCodeSetDao outer_HibernateCodeSetDao;
				private readonly CodeSystemSearchCriteria f_criteria;
		
				public Object DoInHibernate(ISession session) {
					ICriteria criteria = outer_HibernateCodeSetDao.CreateStandardCodeSystemCriteria(
							f_criteria, session);
					criteria.SetProjection(NHibernate.Criterion.Projections.RowCount());
					return criteria.List()[0];
				}
		
				public Anonymous_C4(HibernateCodeSetDao hibernateCodeSetDao, CodeSystemSearchCriteria searchCriteria) {
					outer_HibernateCodeSetDao = hibernateCodeSetDao;
					this.f_criteria = searchCriteria;
				}
			}
	
		public sealed class Anonymous_C3 : IHibernateCallback {
			private readonly Code f_code;
	
			public Object DoInHibernate(ISession session) {
				ICriteria criteria = session
						.CreateCriteria(typeof(CodedValue));
				criteria.Add(NHibernate.Criterion.Restrictions.Eq("code", f_code
						.CodeValue));
				ICriteria codeSystemCriteria = criteria
						.CreateCriteria("codeSystem");
				codeSystemCriteria.Add(NHibernate.Criterion.Restrictions.Eq("oid", f_code
						.CodeSystem));
				return criteria.UniqueResult();
			}
	
			public Anonymous_C3(Code code) {
				this.f_code = code;
			}
		}
	
		public sealed class Anonymous_C2 : IHibernateCallback {
			private readonly String f_setName;
			private readonly Code f_code;
	
			public Object DoInHibernate(ISession session) {
			
				ICriteria criteria = session
						.CreateCriteria(typeof(ValueSetEntry));
				criteria.CreateCriteria("valueSet").Add(
						NHibernate.Criterion.Restrictions.Eq("name", f_setName));
			
				ICriteria codedValueCriteria = criteria
						.CreateCriteria("codedValue");
				codedValueCriteria.Add(NHibernate.Criterion.Restrictions.Eq("code", f_code
						.CodeValue));
				codedValueCriteria.CreateCriteria("codeSystem").Add(
						NHibernate.Criterion.Restrictions.Eq("oid", f_code.CodeSystem));
			
				return criteria.UniqueResult();
			}
	
			public Anonymous_C2(String valueSetName, Code code) {
				this.f_setName = valueSetName;
				this.f_code = code;
			}
		}
	
		public sealed class Anonymous_C1 : IHibernateCallback {
			private readonly String f_name;
	
			public Object DoInHibernate(ISession session) {
				ICriteria criteria = session
						.CreateCriteria(typeof(ValueSet));
				criteria.Add(NHibernate.Criterion.Restrictions.Eq("name", f_name));
				return criteria.UniqueResult();
			}
	
			public Anonymous_C1(String name) {
				this.f_name = name;
			}
		}
	
		public sealed class Anonymous_C0 : IHibernateCallback {
			private readonly String f_oid;
	
			public Object DoInHibernate(ISession session) {
				ICriteria criteria = session
						.CreateCriteria(typeof(CodeSystem));
				criteria.Add(NHibernate.Criterion.Restrictions.Eq("oid", f_oid));
				return criteria.UniqueResult();
			}
	
			public Anonymous_C0(String oid) {
				this.f_oid = oid;
			}
		}
	
		/// <summary>
		/// Instantiates a new hibernate c set dao.
		/// </summary>
		///
		/// <param name="sessionFactory">the session factory</param>
		public HibernateCodeSetDao(ISessionFactory sessionFactory) {
            SessionFactory = sessionFactory;
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual IList<CodedValue> SelectCodedValuesByVocabularyDomain(
				Type vocabularyDomainType) {
			return ConvertValueSetsToCodedValues(SelectValueSetsByVocabularyDomain(vocabularyDomainType));
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual IList<ValueSetEntry> SelectValueSetsByCode(
				Type vocabularyDomainType, String code) {
			IList<ValueSetEntry> valueSets = (IList<ValueSetEntry>) HibernateTemplate.ExecuteFind(
					new HibernateCodeSetDao.Anonymous_C12(code, vocabularyDomainType));
			return valueSets;
	
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual ValueSetEntry FindValueByCodeSystem(
				Type vocabularyDomainType, String code,
				String codeSystemOid) {
			return (ValueSetEntry) HibernateTemplate.Execute(
					new HibernateCodeSetDao.Anonymous_C11(code, codeSystemOid, vocabularyDomainType));
		}
	
		private IList<CodedValue> ConvertValueSetsToCodedValues(
				IList<ValueSetEntry> valueSets) {
			IList<CodedValue> result = new List<CodedValue>();
	
			for (IIterator<ValueSetEntry> iter = new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain.ValueSetEntry>(valueSets.GetEnumerator()); iter
					.HasNext();) {
				ValueSetEntry valueSet = iter.Next();
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,valueSet.CodedValue);
			}
	
			return result;
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual IList<VocabularyDomain> SelectAllVocabularyDomains() {
            return (IList<VocabularyDomain>) HibernateTemplate.ExecuteFind(new HibernateCodeSetDao.Anonymous_C10());
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual VocabularyDomain SelectVocabularyDomain(String type) {
			return (VocabularyDomain) HibernateTemplate.Execute(
					new HibernateCodeSetDao.Anonymous_C9(type));
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual IList<ValueSetEntry> SelectValueSetsByVocabularyDomain(
				Type vocabularyDomainType) {
			return SelectValueSetsByVocabularyDomain(vocabularyDomainType.Name);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual IList<ValueSetEntry> SelectValueSetsByVocabularyDomain(
				String domainName) {
			return (IList<ValueSetEntry>) HibernateTemplate.ExecuteFind(new HibernateCodeSetDao.Anonymous_C8(domainName));
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual IList<VocabularyDomain> SelectVocabularyDomains(
				CodeSearchCriteria searchCriteria) {
			return (IList<VocabularyDomain>) HibernateTemplate.Execute(
					new HibernateCodeSetDao.Anonymous_C7(this, searchCriteria));
	
		}
	
		internal void ContrainOnTypeIfRequired(ICriteria criteria,
				CodeSearchCriteria searchCriteria) {
			if (!Ca.Infoway.Messagebuilder.StringUtils.IsEmpty(searchCriteria.Type)) {
				criteria.Add(NHibernate.Criterion.Restrictions.Like("type", searchCriteria.Type
                        .Trim(), NHibernate.Criterion.MatchMode.Anywhere));
                
			}
		}
	
		internal void ContrainOnBusinessNameIfRequired(ICriteria criteria,
				CodeSearchCriteria searchCriteria) {
			if (!Ca.Infoway.Messagebuilder.StringUtils.IsEmpty(searchCriteria.BusinessName)) {
                criteria.Add(NHibernate.Criterion.Restrictions.Like("businessName", searchCriteria.BusinessName.Trim(), NHibernate.Criterion.MatchMode.Anywhere));
			}
		}
	
		internal void ContrainOnDescriptionIfRequired(ICriteria criteria,
				CodeSearchCriteria searchCriteria) {
			if (!Ca.Infoway.Messagebuilder.StringUtils.IsEmpty(searchCriteria.Description)) {
                criteria.Add(NHibernate.Criterion.Restrictions.Like("description", searchCriteria.Description.Trim(),
                    NHibernate.Criterion.MatchMode.Anywhere));
			}
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual IList<CodeSystem> AllCodeSystems {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return (IList<CodeSystem>) HibernateTemplate.ExecuteFind(new HibernateCodeSetDao.Anonymous_C6());
			}
		}
		
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual IList<CodeSystem> FindCodeSystems(
				CodeSystemSearchCriteria searchCriteria) {
			return FindCodeSystems(searchCriteria, -1, -1);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual IList<CodeSystem> FindCodeSystems(
				CodeSystemSearchCriteria searchCriteria, int startRow,
				int endRow) {
			return (IList<CodeSystem>) HibernateTemplate.ExecuteFind(new HibernateCodeSetDao.Anonymous_C5(this, searchCriteria, startRow, endRow));
		}
	
		internal ICriteria CreateStandardCodeSystemCriteria(
				CodeSystemSearchCriteria searchCriteria, ISession session) {
			ICriteria criteria = session.CreateCriteria(typeof(CodeSystem));
			AddOidRestrictionIfRequired(criteria, searchCriteria.Oid);
			AddNameRestrictionIfRequired(criteria, searchCriteria.Name);
			AddDescriptionRestrictionIfRequired(criteria, searchCriteria.Description);
			AddExclusionsIfRequired(criteria, searchCriteria);
			return criteria;
		}
	
		private void AddExclusionsIfRequired(ICriteria criteria,
				CodeSystemSearchCriteria searchCriteria) {
			String nameExclusion = searchCriteria.NameStartsWithExclusion;
			if (Ca.Infoway.Messagebuilder.StringUtils.IsNotBlank(nameExclusion)) {
                criteria.Add(NHibernate.Criterion.Restrictions.Not(NHibernate.Criterion.Restrictions.Like("name",
                        nameExclusion, NHibernate.Criterion.MatchMode.Start)));
			}
	
			String oidExclusion = searchCriteria.OidStartsWithExclusion;
			if (Ca.Infoway.Messagebuilder.StringUtils.IsNotBlank(oidExclusion)) {
                criteria.Add(NHibernate.Criterion.Restrictions.Not(NHibernate.Criterion.Restrictions.Like("oid",
                        oidExclusion, NHibernate.Criterion.MatchMode.Start)));
			}
	
			ICollection<String> oidExlusions = searchCriteria.OidExlusions;
			if (Ca.Infoway.Messagebuilder.CollUtils.IsNotEmpty(oidExlusions)) {
//				criteria
//                        .Add(NHibernate.Criterion.Restrictions.Not(NHibernate.Criterion.Restrictions.In("oid", oidExlusions.Array())));
			}
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual int CountCodeSystems(CodeSystemSearchCriteria searchCriteria) {
			return ((Int32?)HibernateTemplate.Execute(new HibernateCodeSetDao.Anonymous_C4(this,searchCriteria))).Value;
		}
	
		private void AddDescriptionRestrictionIfRequired(ICriteria criteria,
				String description) {
			if (!Ca.Infoway.Messagebuilder.StringUtils.IsEmpty(description)) {
				criteria.Add(NHibernate.Criterion.Restrictions.Like("description", description,
						NHibernate.Criterion.MatchMode.Anywhere));
			}
		}
	
		private void AddNameRestrictionIfRequired(ICriteria criteria, String name) {
			if (!Ca.Infoway.Messagebuilder.StringUtils.IsEmpty(name)) {
				criteria.Add(NHibernate.Criterion.Restrictions.Like("name", name, NHibernate.Criterion.MatchMode.Anywhere));
			}
		}
	
		private void AddOidRestrictionIfRequired(ICriteria criteria, String oid) {
			if (!Ca.Infoway.Messagebuilder.StringUtils.IsEmpty(oid)) {
				criteria.Add(NHibernate.Criterion.Restrictions.Like("oid", oid, NHibernate.Criterion.MatchMode.Start));
			}
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual IList<ValueSetEntry> SelectValueSetsByVocabularyDomain(
				String jurisdiction, VocabularyDomain vocabularyDomain) {
			return SelectValueSetsByVocabularyDomain(vocabularyDomain.Type);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual CodedValue FindCodedValue(Code code) {
			CodedValue result = null;
	
			if (code != null) {
				result = (CodedValue) HibernateTemplate.Execute(
						new HibernateCodeSetDao.Anonymous_C3(code));
			}
	
			return result;
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual void SaveAll(ICollection<VocabularyDomain> vocabularyDomain) {
			HibernateTemplate.SaveOrUpdateAll((ICollection) vocabularyDomain);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual void SaveAllCodedValues(ICollection<CodedValue> values) {
			HibernateTemplate.SaveOrUpdateAll((ICollection) values);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual ValueSetEntry FindValueSetEntry(String valueSetName,
				Code code) {
			return (ValueSetEntry) HibernateTemplate.Execute(
					new HibernateCodeSetDao.Anonymous_C2(valueSetName, code));
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual void Save(ValueSetEntry valueSet) {
			HibernateTemplate.SaveOrUpdate(valueSet);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual ValueSet FindValueSet(String name) {
			return (ValueSet) HibernateTemplate.Execute(
					new HibernateCodeSetDao.Anonymous_C1(name));
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual void SaveValueSet(ValueSet valueSet) {
			HibernateTemplate.SaveOrUpdate(valueSet);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public virtual CodeSystem FindCodeSystem(String oid) {
			return (CodeSystem) HibernateTemplate.Execute(
					new HibernateCodeSetDao.Anonymous_C0(oid));
		}
	}
}
