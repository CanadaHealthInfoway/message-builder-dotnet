/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: jmis $
 * Last modified: $LastChangedDate: 2015-05-27 08:43:37 -0400 (Wed, 27 May 2015) $
 * Revision:      $LastChangedRevision: 9535 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Codeset.Dao {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	//using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Defines the interface for performing database searches against the Code Set model.
	/// </summary>
	///
	public interface CodeSetDao {
	
		/// <summary>
		/// Find value by c system.
		/// </summary>
		///
		/// <param name="vocabularyDomainType">the vocabulary domain type</param>
		/// <param name="code">the code</param>
		/// <param name="codeSystemOid">the c system oid</param>
        /// <param name="version">the version</param>
        /// <returns>the value set entry</returns>
		ValueSetEntry FindValueByCodeSystem(Type vocabularyDomainType,
                String code, String codeSystemOid, String version, bool ignoreCase);
	
		/// <summary>
		/// Select value sets by c.
		/// </summary>
		///
		/// <param name="vocabularyDomainType">the vocabulary domain type</param>
		/// <param name="code">the code</param>
        /// <param name="version">the version</param>
        /// <returns>the list</returns>
		IList<ValueSetEntry> SelectValueSetsByCode(
                Type vocabularyDomainType, String code, String version, bool ignoreCase);
	
		/// <summary>
		/// Select value sets by vocabulary domain.
		/// </summary>
		///
		/// <param name="vocabularyDomainType">the vocabulary domain type</param>
        /// <param name="version">the version</param>
        /// <returns>the list</returns>
        [Obsolete]
		IList<ValueSetEntry> SelectValueSetsByVocabularyDomain(
				Type vocabularyDomainType, String version);
	
		/// <summary>
		/// Select value sets by vocabulary domain.
		/// </summary>
		///
		/// <param name="vocabularyDomainType">the vocabulary domain type</param>
        /// <param name="version">the version</param>
        /// <returns>the list</returns>
		IList<ValueSetEntry> SelectValueSetsByVocabularyDomain(
				String vocabularyDomainType, String version);

        /// <summary>
        /// Select value sets by version.
        /// </summary>
        ///
        /// <param name="version">the version</param>
        /// <returns>the list of value sets for the specified version</returns>
        IList<ValueSet> SelectValueSetsByVersion(String version);

        /// <summary>
		/// Select value sets by vocabulary domain.
		/// </summary>
		///
		/// <param name="jurisdictionCode">the jurisdiction c</param>
		/// <param name="vocabularyDomainType">the vocabulary domain type</param>
        /// <param name="version">the version</param>
        /// <returns>the list</returns>
		IList<ValueSetEntry> SelectValueSetsByVocabularyDomain(
				String jurisdictionCode, VocabularyDomain vocabularyDomainType, String version);
	
		/// <summary>
		/// Select cd values by vocabulary domain.
		/// </summary>
		///
		/// <param name="vocabularyDomainType">the vocabulary domain type</param>
        /// <param name="version">the version</param>
        /// <returns>the list</returns>
        [Obsolete]
		IList<CodedValue> SelectCodedValuesByVocabularyDomain(
				Type vocabularyDomainType, String version);
	
		/// <summary>
		/// Select all vocabulary domains.
		/// </summary>
		///
		/// <returns>the list</returns>
		IList<VocabularyDomain> SelectAllVocabularyDomains();
	
		/// <summary>
		/// Select vocabulary domain.
		/// </summary>
		///
		/// <param name="type">the type</param>
		/// <returns>the vocabulary domain</returns>
		VocabularyDomain SelectVocabularyDomain(String type);
	
		/// <summary>
		/// Select vocabulary domains.
		/// </summary>
		///
		/// <param name="searchCriteria">the search criteria</param>
		/// <returns>the list</returns>
		IList<VocabularyDomain> SelectVocabularyDomains(
				CodeSearchCriteria searchCriteria);
	
		/// <summary>
		/// Find cd value.
		/// </summary>
		///
		/// <param name="code">the c</param>
		/// <returns>the cd value</returns>
		CodedValue FindCodedValue(Code code);
	}
}
