/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-03-01 17:48:17 -0500 (Fri, 01 Mar 2013) $
 * Revision:      $LastChangedRevision: 6663 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Proxy {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Terminology.Domainvalue;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	//using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	
	/// <summary>
	/// A CodeImpl that also contains a VocabularyDomain type. For example, the type might be
	/// AdministrableDrugForm.
	/// </summary>
	///
	[Serializable]
	public class TypedCode : Code, Displayable, Sortable, Active, Common {
	
		private const long serialVersionUID = 1L;
	
		private readonly Type type;
		private readonly ICollection<Type> interfaceTypes;
		private readonly String code;
		private readonly String codeSystem;
		private readonly Int32? ordinal;
		private readonly IDictionary<String, String> displayTextMap;
		private readonly Boolean? active;
		private readonly Boolean? common;
	
		/// <summary>
		/// Instantiates a new typed c.
		/// </summary>
		///
		/* @SuppressWarnings("unchecked")*/
		public TypedCode() : this(null, null, null, null, null, null, null, null) {
		}
	
		internal TypedCode(Type type_0, ICollection<Type> interfaceTypes_1, String code_2,
				String codeSystem_3, IDictionary<String, String> displayTextMap_4,
				Int32? sortValue, Boolean? active_5, Boolean? common_6) {
			this.type = type_0;
			this.interfaceTypes = null != interfaceTypes_1 ? interfaceTypes_1 :
                new ILOG.J2CsMapping.Collections.Generics.SortedSet<Type>();

			this.code = code_2;
			this.codeSystem = codeSystem_3;
			this.displayTextMap = displayTextMap_4;
			this.ordinal = sortValue;
			this.active = active_5;
			this.common = common_6;
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual String CodeValue {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return code;
			}
		}
		
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual String CodeSystem {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return codeSystem;
			}
		}
		
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual String GetDisplayText(String language) {
			if (displayTextMap.ContainsKey(language)) {
				return (String) ((System.String)ILOG.J2CsMapping.Collections.Generics.Collections.Get(displayTextMap,language));
			} else {
				return CodeValue;
			}
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public override  System.String ToString() {
			return CodeValue;
		}
	
		//CP: TODO: Move these methods up to the CodeImpl class. 
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public override bool Equals(Object that) {
			if (!type.IsInstanceOfType(that)) {
				return false;
			}
	
			EqualsBuilder equalsBuilder = new EqualsBuilder();
			equalsBuilder.Append(this.CodeValue, ((Code) that).CodeValue);
			equalsBuilder.Append(this.CodeSystem, ((Code) that)
					.CodeSystem);
	
			return equalsBuilder.IsEquals();
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public override int GetHashCode() {
			return new HashCodeBuilder().Append(this.CodeValue).Append(
					this.CodeSystem).Append(this.type).ToHashCode();
		}
	
		/// <summary>
		/// Invoked during Deserialization. This needs to be (at least) package scope in order for it to
		/// be invoked when TypedCode is specified as the superclass inside a Cglib Enhanced Proxy.
		/// </summary>
		///
		/// <returns>A Code that : the appropriate type.</returns>
		/// <seealso cref="TypedCode"/>
		/// <seealso cref="TypedCodeFactory"/>
		internal Object ReadResolve() {
			return new TypedCodeFactory().Create(type, interfaceTypes,
					CodeValue, CodeSystem, displayTextMap, ordinal,
					active, common);
		}
	
		/// <summary>
		/// Invoked during Serialization. This needs to be (at least) package scope in order for it to be
		/// invoked when TypedCode is specified as the superclass inside a Cglib Enhanced Proxy.
		/// </summary>
		///
		/// <returns>A Code that : the appropriate type.</returns>
		/// <seealso cref="TypedCode"/>
		/// <seealso cref="TypedCodeFactory"/>
		internal Object WriteReplace() {
			return new TypedCode(type, interfaceTypes, CodeValue,
					CodeSystem, displayTextMap, ordinal, active, common);
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual Int32? SortValue {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return ordinal;
			}
		}
		
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual bool Active {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return active.Value;
			}
		}
		
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual bool Common {
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		  get {
				return common.Value;
			}
		}
		
	}
}
