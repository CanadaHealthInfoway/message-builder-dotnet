/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-03-01 17:48:17 -0500 (Fri, 01 Mar 2013) $
 * Revision:      $LastChangedRevision: 6663 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Proxy {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using ILOG.J2CsMapping.Collections.Generics;
	using NUnit;
    using System;
    using System.Collections.Generic;
	
	[NUnit.Framework.TestFixture]
	public class TypedCodeFactoryTest {
	
		[NUnit.Framework.Test]
		[NUnit.Framework.Ignore]
		public void ShouldProduceResultThatImplementsAllInterfaces() {
	
			Code code = new TypedCodeFactory().Create(
					typeof(AcknowledgementDetailType), new HashedSet<Type>(ILOG.J2CsMapping.Collections.Generics.Arrays.AsList(typeof(AcknowledgementDetailType),typeof(ActIssuePriority))), "E",
					Ca.Infoway.Messagebuilder.Codesystem.CodeSystem.VOCABULARY_ACKNOWLEDGEMENT_DETAIL_TYPE.Root,
					new Dictionary<String, String>(), 0, true, true);
	
			NUnit.Framework.Assert.IsTrue(code  is  AcknowledgementDetailType,"AcknowledgementDetailType");
			NUnit.Framework.Assert.IsTrue(code  is  ActIssuePriority,"ActIssuePriority");
		}
	}
}
