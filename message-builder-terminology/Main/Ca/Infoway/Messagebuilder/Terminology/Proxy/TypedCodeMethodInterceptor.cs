/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2013-03-01 17:48:17 -0500 (Fri, 01 Mar 2013) $
 * Revision:      $LastChangedRevision: 6663 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Proxy {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	//using System.ComponentModel;
	using System.Reflection;
	using System.Runtime.CompilerServices;
    using AopAlliance.Intercept;
   	
	/// <summary>
	/// The Class TypedCodeMethodInterceptor.
	/// </summary>
	///
	public class TypedCodeMethodInterceptor : IMethodInterceptor {
	
		private readonly TypedCode typedCode;
	
		/// <summary>
		/// Instantiates a new typed c method interceptor.
		/// </summary>
		///
		/// <param name="typedCode_0">the typed c</param>
		public TypedCodeMethodInterceptor(TypedCode typedCode_0) {
			this.typedCode = typedCode_0;
		}
	
		/// <summary>
		/// {@inheritDoc}
		/// </summary>
		///
		public virtual  System.Object Intercept(Object obj, MethodInfo method, Object[] args/*,
				MethodProxy proxy*/) {
			try {
				return ILOG.J2CsMapping.Reflect.Helper.Invoke(method,typedCode,args);
			} catch (Exception e) {
				// unwrap InvocationtargetException to accurately emulate behaviour of proxied class
				throw ExceptionUtils.GetRootCause(e);
			}
		}

        public object Invoke(IMethodInvocation invocation)
        {
            throw new NotImplementedException("not implemented");
        }	
	}
}
