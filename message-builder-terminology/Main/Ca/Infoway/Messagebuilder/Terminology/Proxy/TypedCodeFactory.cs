/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:43:23 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4340 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology.Proxy {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Terminology.Domainvalue;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	//using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Creates an instance of Code that is assignable to a specific type.
	/// </summary>
	///
	public class TypedCodeFactory {

        private static readonly ILOG.J2CsMapping.Collections.Generics.ISet<Type> STANDARD_INTERFACES;
	
		/// <summary>
		/// Creates the Code.
		/// </summary>
		///
		/// <param name="type">the type</param>
		/// <param name="types">the types</param>
		/// <param name="code">the c</param>
		/// <param name="codeSystemOid">the c system oid</param>
		/// <param name="displayTextMap">the display text map</param>
		/// <param name="sortValue">the sort value</param>
		/// <param name="active">the active</param>
		/// <param name="common">the common</param>
		/// <returns>the c</returns>
		public Code Create(Type type, ICollection<Type> types, String code,
				String codeSystemOid, IDictionary<String, String> displayTextMap,
				Int32? sortValue, Boolean? active, Boolean? common) {
			//!
            /*
            Enhancer enhancer = new Enhancer();
			enhancer.SetSuperclass(typeof(TypedCode));
			IList<Type> allTypes = new List<Type>(types);
			ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(STANDARD_INTERFACES,allTypes);
			enhancer.SetInterfaces((Type[]) ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(allTypes,new Type[allTypes.Count]));
			enhancer.SetCallback(new TypedCodeMethodInterceptor(new TypedCode(type,
					allTypes, code, codeSystemOid, displayTextMap, sortValue,
					active, common)));
			return (Code) enhancer.Create();
             * */

                    return null;
		}
	
		static TypedCodeFactory() {
                ILOG.J2CsMapping.Collections.Generics.ISet<Type> set = new HashedSet<Type>();
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,typeof(Displayable));
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,typeof(Sortable));
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,typeof(Active));
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,typeof(Common));
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,typeof(Identifiable));
				STANDARD_INTERFACES = Ca.Infoway.Messagebuilder.CollUtils.CreateUnmodifiableSet(set);
			}
	}
}
