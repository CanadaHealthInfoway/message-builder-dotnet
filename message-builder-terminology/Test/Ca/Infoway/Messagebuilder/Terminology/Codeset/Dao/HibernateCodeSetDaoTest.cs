/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:43:30 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4341 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
#if inctest 
namespace Ca.Infoway.Messagebuilder.Terminology.Codeset.Dao {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using Ca.Infoway.Messagebuilder.Terminology;
	using Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain;
	using System.Collections.Generic;
	using NUnit;
    using System;
    using NHibernate;
    
	
	[NUnit.Framework.TestFixture]
	public class HibernateCodeSetDaoTest {
	
		public HibernateCodeSetDaoTest() {
			this.support = new DaoTestSupport(
					"ca/infoway/messagebuilder/terminology/codeset/dao/mock-hibernate-spring.xml");
			this.domains = Ca.Infoway.Messagebuilder.CollUtils
					.SynchronizedMap(new Dictionary<Type, VocabularyDomain>());
		}
	
		private static readonly String CODE = "CODE";
		private static readonly String OTHER_CODE = "OTHER CODE";
	
		private static readonly Type VOCABULARY_DOMAIN = typeof(AcknowledgementCondition);
		private static readonly Type OTHER_VOCABULARY_DOMAIN = typeof(ProcessingID);
		private static readonly Type PARENT_VOCABULARY_DOMAIN = typeof(UnitsOfMeasureCaseSensitive);
		private static readonly Type SUB_VOCABULARY_DOMAIN = typeof(x_DrugUnitsOfMeasure);
	
		private static int oidDistinguisher = 0;
		private static readonly String OID_BASE = "1.2.3.4.5";
		private static String OID;
		private static readonly String OTHER_OID_BASE = "9.7.6.5.4";
		private static String OTHER_OID;
	
		private MutableCodeSetDao dao;
	
		private readonly DaoTestSupport support;
		private CodeTestFactory factory;
		private CodeSystem codeSystem;
	
		private readonly IDictionary<Type, VocabularyDomain> domains;
	
		[NUnit.Framework.SetUp]
		public void SetUp() {
	
			Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry.Register(new TrivialCodeResolver());
	
			this.support.SetUp();
			this.support.SessionFactory.GetCurrentSession().BeginTransaction();
	
			this.dao = new HibernateCodeSetDao(this.support.SessionFactory);
			this.factory = new CodeTestFactory(this.support);
			OID = OID_BASE + "." + (++oidDistinguisher);
			OTHER_OID = OTHER_OID_BASE + "." + oidDistinguisher;
		}
	
		[NUnit.Framework.TearDown]
		public void TearDown() {
			TearDownTestData();
			this.support.TearDown();
		}
	
		private void TearDownTestData() {
			ISession session = this.support.SessionFactory.GetCurrentSession();
			SqlCommand statement = session.Connection.CreateCommand();
			statement.Execute("delete from value_set_to_vocabulary_domain");
			statement.Execute("delete from value_set_entry");
			statement.Execute("delete from value_set");
			statement.Execute("delete from coded_value_to_coded_value");
			statement.Execute("delete from coded_value");
			statement.Execute("delete from code_system");
			statement.Execute("delete from vocabulary_domain");
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByVocabularyDomain_ShouldFindTwoMatchingCodes() {
			CreateCodedValue(CODE, VOCABULARY_DOMAIN);
			CreateCodedValue(OTHER_CODE, VOCABULARY_DOMAIN);
	
			IList<CodedValue> codedValues = this.dao
					.SelectCodedValuesByVocabularyDomain(VOCABULARY_DOMAIN);
	
			NUnit.Framework.Assert.AreEqual(2, codedValues.Count);
			NUnit.Framework.Assert.IsTrue(CodedValueFound(codedValues, CODE));
			NUnit.Framework.Assert.IsTrue(CodedValueFound(codedValues, OTHER_CODE));
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByVocabularyDomain_ShouldReturnEmptyListWhenThereIsNoData() {
			ICollection<CodedValue> codedValues = this.dao
					.SelectCodedValuesByVocabularyDomain(VOCABULARY_DOMAIN);
	
			NUnit.Framework.Assert.IsTrue((codedValues.Count==0));
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByVocabularyDomain_ShouldNotSelectCodesInOtherVocabularyDomains() {
			CreateCodedValue(CODE, VOCABULARY_DOMAIN);
			CreateCodedValue(CODE, OTHER_VOCABULARY_DOMAIN);
	
			IList<CodedValue> codedValues = this.dao
					.SelectCodedValuesByVocabularyDomain(VOCABULARY_DOMAIN);
	
			NUnit.Framework.Assert.AreEqual(1, codedValues.Count);
			NUnit.Framework.Assert.IsTrue(CodedValueFound(codedValues, CODE));
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodeSystem() {
			this.factory.CreateCodeSystem(OID);
			this.factory.CreateCodeSystem(OID + ".1");
			this.factory.CreateCodeSystem(OID + "01");
	
			CodeSystem codeSystem_0 = this.dao.FindCodeSystem(OID);
	
			NUnit.Framework.Assert.IsNotNull(codeSystem_0,"code system");
			NUnit.Framework.Assert.AreEqual(OID,codeSystem_0.Oid,"oid");
		}
	
		[NUnit.Framework.Test]
		public void TestFindCodedValueByCodeSystem_ShouldFindMatchingCodedValue() {
			VocabularyDomain vocabularyDomain = this.factory
					.CreateVocabularyDomain(typeof(Confidentiality));
	
			CreateCodedValue(vocabularyDomain, OID, "N");
	
			ValueSetEntry value_ren = this.dao.FindValueByCodeSystem(
					typeof(Confidentiality), "N", OID);
	
			NUnit.Framework.Assert.IsNotNull(value_ren,"coded value");
			NUnit.Framework.Assert.AreEqual("N",value_ren.CodedValue.Code);
			NUnit.Framework.Assert.AreEqual(OID,value_ren.CodedValue.CodeSystem.Oid);
		}
	
		[NUnit.Framework.Test]
		public void TestFindCodedValueByCodeSystem_ShouldNotFindValuesInOtherCodeSystems() {
			VocabularyDomain vocabularyDomain = this.factory
					.CreateVocabularyDomain(VOCABULARY_DOMAIN);
	
			CreateCodedValue(vocabularyDomain, OTHER_OID, CODE);
	
			ValueSetEntry value_ren = this.dao.FindValueByCodeSystem(VOCABULARY_DOMAIN,
					CODE, OID);
			NUnit.Framework.Assert.IsNull(value_ren);
		}
	
		[NUnit.Framework.Test]
		public void TestFindCodedValueByCodeSystem_ShouldNotFindValueWhenThereIsNoData() {
			ValueSetEntry value_ren = this.dao.FindValueByCodeSystem(VOCABULARY_DOMAIN,
					CODE, OID);
			NUnit.Framework.Assert.IsNull(value_ren);
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByCode_ShouldFindMatchingCodedValue() {
			CreateCodedValue(CODE, VOCABULARY_DOMAIN);
	
			ICollection<ValueSetEntry> codedValues = this.dao.SelectValueSetsByCode(
					VOCABULARY_DOMAIN, CODE);
	
			NUnit.Framework.Assert.AreEqual(1, codedValues.Count);
	
			ValueSetEntry value_ren = new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain.ValueSetEntry>(codedValues.GetEnumerator()).Next();
			NUnit.Framework.Assert.AreEqual(CODE,value_ren.CodedValue.Code);
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByCode_ShouldFindMatchingCodedValueInSubVocabularyDomains() {
			CreateCodedValue(CODE, SUB_VOCABULARY_DOMAIN, PARENT_VOCABULARY_DOMAIN);
	
			ICollection<ValueSetEntry> codedValues = this.dao.SelectValueSetsByCode(
					PARENT_VOCABULARY_DOMAIN, CODE);
	
			NUnit.Framework.Assert.AreEqual(1, codedValues.Count);
	
			ValueSetEntry value_ren = new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain.ValueSetEntry>(codedValues.GetEnumerator()).Next();
			NUnit.Framework.Assert.AreEqual(CODE,value_ren.CodedValue.Code);
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByCode_ShouldNotFindValuesInOtherVocabularyDomains() {
			CreateCodedValue(CODE, OTHER_VOCABULARY_DOMAIN);
	
			ICollection<ValueSetEntry> values = this.dao.SelectValueSetsByCode(
					VOCABULARY_DOMAIN, CODE);
	
			NUnit.Framework.Assert.IsTrue((values.Count==0));
		}
	
		[NUnit.Framework.Test]
		public void TestSelectCodedValuesByCode_ShouldNotSelectValuesWhenThereIsNoData() {
			ICollection<ValueSetEntry> values = this.dao.SelectValueSetsByCode(
					VOCABULARY_DOMAIN, CODE);
	
			NUnit.Framework.Assert.IsTrue((values.Count==0));
		}
	
		[NUnit.Framework.Test]
		public void TestFindVocabularyDomainsByPartialTypeName() {
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementCondition));
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementType));
			this.factory.CreateVocabularyDomain(typeof(ActCode));
			this.factory.CreateVocabularyDomain(typeof(AdministrativeGender));
	
			CodeSearchCriteria searchCriteria = new CodeSearchCriteria();
			searchCriteria.Type = "Ac";
			IList<VocabularyDomain> vocabularyDomains = this.dao
					.SelectVocabularyDomains(searchCriteria);
	
			NUnit.Framework.Assert.IsNotNull(vocabularyDomains);
			NUnit.Framework.Assert.AreEqual(3, vocabularyDomains.Count);
		}
	
		[NUnit.Framework.Test]
		public void TestFindVocabularyDomainsByPartialBusinessName() {
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementCondition),
					"Bbaaa", null);
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementType), "Bbaaa",
					null);
			this.factory.CreateVocabularyDomain(typeof(ActCode), "Bbaaa", null);
			this.factory.CreateVocabularyDomain(typeof(AdministrativeGender),
					"Other", "Other");
	
			CodeSearchCriteria searchCriteria = new CodeSearchCriteria();
			searchCriteria.BusinessName = "Bb";
			IList<VocabularyDomain> vocabularyDomains = this.dao
					.SelectVocabularyDomains(searchCriteria);
	
			NUnit.Framework.Assert.IsNotNull(vocabularyDomains);
			NUnit.Framework.Assert.AreEqual(3, vocabularyDomains.Count);
		}
	
		[NUnit.Framework.Test]
		public void TestFindVocabularyDomainsByPartialDescription() {
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementCondition),
					"Bbaaa", "Ddeee");
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementType), "Bbaaa",
					"Ddeee");
			this.factory.CreateVocabularyDomain(typeof(ActCode), "Bbaaa", "Ddeee");
			this.factory.CreateVocabularyDomain(typeof(AdministrativeGender),
					"Other", "Other");
	
			CodeSearchCriteria searchCriteria = new CodeSearchCriteria();
			searchCriteria.Description = "Dd";
			IList<VocabularyDomain> vocabularyDomains = this.dao
					.SelectVocabularyDomains(searchCriteria);
	
			NUnit.Framework.Assert.IsNotNull(vocabularyDomains);
			NUnit.Framework.Assert.AreEqual(3, vocabularyDomains.Count);
		}
	
		[NUnit.Framework.Test]
		public void TestFindVocabularyDomainsByCaseInsensitive() {
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementCondition),
					"Bbaaa", "Ddeee");
			this.factory.CreateVocabularyDomain(typeof(AcknowledgementType), "Bbaaa",
					"Ddeee");
			this.factory.CreateVocabularyDomain(typeof(ActCode), "Bbaaa", "Eeeee");
			this.factory.CreateVocabularyDomain(typeof(AdministrativeGender),
					"Other", "Other");
	
			CodeSearchCriteria searchCriteria = new CodeSearchCriteria();
			searchCriteria.Type = "ac";
			searchCriteria.BusinessName = "bb";
			searchCriteria.Description = "dd";
			IList<VocabularyDomain> vocabularyDomains = this.dao
					.SelectVocabularyDomains(searchCriteria);
	
			NUnit.Framework.Assert.IsNotNull(vocabularyDomains);
			NUnit.Framework.Assert.AreEqual(2, vocabularyDomains.Count);
		}
	
		private void CreateCodedValue(VocabularyDomain vocabularyDomain,
				String oid, String code, String parentCode, IList<String> childCodes) {
			CodeSystem codeSystem_0 = this.factory.CreateCodeSystem(oid);
			CodedValue codeCodedValue = CreateCodedValue(vocabularyDomain,
					codeSystem_0, code);
			CodedValue parentCodeCodedValue = null;
			if (parentCode != null) {
				parentCodeCodedValue = CreateCodedValue(vocabularyDomain,
						codeSystem_0, parentCode);
			}
			IList<CodedValue> childCodesCodedValues = new List<CodedValue>();
			if (childCodes != null) {
				/* foreach */
				foreach (String childCode  in  childCodes) {
					CodedValue childCodedValue = CreateCodedValue(vocabularyDomain,
							codeSystem_0, childCode);
					ILOG.J2CsMapping.Collections.Generics.Collections.Add(childCodesCodedValues,childCodedValue);
				}
			}
			this.factory.CreateCodedValue(codeCodedValue, parentCodeCodedValue,
					childCodesCodedValues);
		}
	
		private CodedValue CreateCodedValue(VocabularyDomain vocabularyDomain,
				CodeSystem codeSystem_0, String code) {
			CodedValue codedValue = this.factory.CreateCodedValue(codeSystem_0, code);
			this.factory.CreateValueSet(codedValue, vocabularyDomain);
			return codedValue;
		}
	
		private CodedValue CreateCodedValue(VocabularyDomain vocabularyDomain,
				String oid, String code) {
			CodeSystem codeSystem_0 = this.factory.CreateCodeSystem(oid);
			CodedValue codedValue = this.factory.CreateCodedValue(codeSystem_0, code);
			this.factory.CreateValueSet(codedValue, vocabularyDomain);
			return codedValue;
		}
	
		private void CreateCodedValue(String code, params Type[] vocabularyDomainType) {
			if (this.codeSystem == null) {
				this.codeSystem = this.factory.CreateCodeSystem(OID);
			}
			CodedValue codedValue = this.factory.CreateCodedValue(this.codeSystem,
					code);
	
			IList<VocabularyDomain> domains_0 = new List<VocabularyDomain>();
			/* foreach */
			foreach (Type domain  in  vocabularyDomainType) {
				VocabularyDomain vocabularyDomain = ((Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain.VocabularyDomain)ILOG.J2CsMapping.Collections.Generics.Collections.Get(this.domains,domain));
				if (vocabularyDomain == null) {
					vocabularyDomain = this.factory.CreateVocabularyDomain(domain);
					ILOG.J2CsMapping.Collections.Generics.Collections.Put(this.domains,(System.Type)(domain),(Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain.VocabularyDomain)(vocabularyDomain));
				}
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(domains_0,vocabularyDomain);
			}
			this.factory.CreateValueSet(codedValue, ILOG.J2CsMapping.Collections.Generics.Collections.ToArray(domains_0,new VocabularyDomain[domains_0.Count]));
		}
	
		private bool CodedValueFound(IList<CodedValue> codedValues, String code) {
			for (IIterator<CodedValue> i = new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<Ca.Infoway.Messagebuilder.Terminology.Codeset.Domain.CodedValue>(codedValues.GetEnumerator()); i.HasNext();) {
				CodedValue value_ren = i.Next();
				if (value_ren.Code.Equals(code)) {
					return true;
				}
			}
			return false;
		}
	
		[NUnit.Framework.Test]
		public void TestFindCodedValueWithNoChildrenNoParent() {
			CreateCodedValue(CODE, SUB_VOCABULARY_DOMAIN, PARENT_VOCABULARY_DOMAIN);
	
			x_DrugUnitsOfMeasure code = (x_DrugUnitsOfMeasure) Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry
					.Lookup(SUB_VOCABULARY_DOMAIN, CODE, OID);
	
			CodedValue codedValue = this.dao.FindCodedValue(code);
	
			NUnit.Framework.Assert.IsNotNull(codedValue);
			NUnit.Framework.Assert.IsTrue((codedValue.Children.Count==0));
			NUnit.Framework.Assert.IsTrue((codedValue.Parents.Count==0));
	
		}
	
		[NUnit.Framework.Test]
		public void TestFindCodedValueWithChildrenAndParent() {
			VocabularyDomain vocabularyDomain = this.factory
					.CreateVocabularyDomain(typeof(Confidentiality));
	
			CreateCodedValue(vocabularyDomain, OID, CODE, "parent", ILOG.J2CsMapping.Collections.Generics.Arrays.AsList("child1","child2","child3"));
	
			Confidentiality code = (Confidentiality) Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry.Lookup<Confidentiality>(
					typeof(Confidentiality), CODE, OID);
	
			CodedValue codedValue = this.dao.FindCodedValue(code);
	
			NUnit.Framework.Assert.IsNotNull(codedValue);
			NUnit.Framework.Assert.IsFalse((codedValue.Children.Count==0));
			NUnit.Framework.Assert.AreEqual(3, codedValue.Children.Count);
			NUnit.Framework.Assert.IsFalse((codedValue.Parents.Count==0));
	
		}
	}
}
#endif