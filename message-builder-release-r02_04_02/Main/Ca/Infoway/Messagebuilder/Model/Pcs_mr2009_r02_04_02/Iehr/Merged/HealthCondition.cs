/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:06:13 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 3939 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt130001ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>HealthCondition</summary>
     * 
     * <remarks>REPC_MT000014CA.ConditionEvent: Health Condition 
     * <p>A record of a patient's health condition, as tracked over 
     * time. Examples include diseases, disabilities, pregnancy, 
     * lactation and other clinical conditions of 
     * interest.</p><p>Also known as &quot;Problem&quot; (from a 
     * 'problem list').</p> <p>A record of a patient's health 
     * condition, as tracked over time. Examples include diseases, 
     * disabilities, pregnancy, lactation and other clinical 
     * conditions of interest.</p><p>Also known as 
     * &quot;Problem&quot; (from a 'problem list').</p> 
     * <p>Necessary component of a person's overall profile. Helps 
     * with contraindication checking.</p> 
     * REPC_MT000010CA.ConditionEvent: Health Condition <p>A record 
     * of a patient's health condition, as tracked over time. 
     * Examples include diseases, disabilities, pregnancy, 
     * lactation and other clinical conditions of 
     * interest.</p><p>Also known as &quot;Problem&quot; (from a 
     * 'problem list').</p> <p>A record of a patient's health 
     * condition, as tracked over time. Examples include diseases, 
     * disabilities, pregnancy, lactation and other clinical 
     * conditions of interest.</p><p>Also known as 
     * &quot;Problem&quot; (from a 'problem list').</p> 
     * <p>Necessary component of a person's overall profile. Helps 
     * with contraindication checking.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"REPC_MT000010CA.ConditionEvent","REPC_MT000014CA.ConditionEvent"})]
    public class HealthCondition : MessagePartBean {

        private SET<II, Identifier> conditionIdentifier;
        private CV conditionType;
        private CS conditionStatus;
        private IVL<TS, Interval<PlatformDate>> conditionTimePeriod;
        private SET<CV, Code> conditionMaskingIndicators;
        private CD condition;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.IActingPerson informantActingPerson;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.CareCompositions> componentOfPatientCareProvisionEvent;
        private BL refutedIndicator;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson responsiblePartyActingPerson;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.ChangedBy author;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.ServiceLocation custodian1ServiceDeliveryLocation;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.EHRRepository custodian2AssignedDevice;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.OldCondition> predecessorOldCondition;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.HealthCondition replacementOfConditionEvent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.NewCondition successorNewCondition;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.AllergyIntoleranceStatusChanges subjectOf1ControlActEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.Includes> subjectOf2;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt130001ca.VersionInformation subjectOf3ControlActEvent;
        private BL subjectOf4AnnotationIndicator;

        public HealthCondition() {
            this.conditionIdentifier = new SETImpl<II, Identifier>(typeof(IIImpl));
            this.conditionType = new CVImpl();
            this.conditionStatus = new CSImpl();
            this.conditionTimePeriod = new IVLImpl<TS, Interval<PlatformDate>>();
            this.conditionMaskingIndicators = new SETImpl<CV, Code>(typeof(CVImpl));
            this.condition = new CDImpl();
            this.componentOfPatientCareProvisionEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.CareCompositions>();
            this.refutedIndicator = new BLImpl();
            this.predecessorOldCondition = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.OldCondition>();
            this.subjectOf2 = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.Includes>();
            this.subjectOf4AnnotationIndicator = new BLImpl(false);
        }
        /**
         * <summary>ConditionIdentifier</summary>
         * 
         * <remarks>A:Condition Identifier </p><p>The identifier 
         * applies to this &quot;instance&quot; of the condition. For 
         * example, multiple pregnancies would each be treated as 
         * distinct conditions, each with a unique id.</p> </p><p>The 
         * identifier applies to this &quot;instance&quot; of the 
         * condition. For example, multiple pregnancies would each be 
         * treated as distinct conditions, each with a unique id.</p> 
         * </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public ICollection<Identifier> ConditionIdentifier {
            get { return this.conditionIdentifier.RawSet(); }
        }

        /**
         * <summary>ConditionType</summary>
         * 
         * <remarks>B: Condition Type <p>Code is fixed DX if not using 
         * SNOMED;</p> <p>Designates the concept in DiagnosisValue as a 
         * Diagnosis</p> </p><p>Since all diagnosis concepts can be 
         * represented in a single field, this domain is a fixed 
         * value</p> </p><p>Since all diagnosis concepts can be 
         * represented in a single field, this domain is a fixed 
         * value</p> </p><p>Since all diagnosis concepts can be 
         * represented in a single field, this domain is a fixed 
         * value</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public Code ConditionType {
            get { return (Code) this.conditionType.Value; }
            set { this.conditionType.Value = value; }
        }

        /**
         * <summary>ConditionStatus</summary>
         * 
         * <remarks>C:Condition Status </p><p>Indicates whether the 
         * condition is still being monitored as relevant to the 
         * patient's health ('active') or whether the condition is no 
         * longer considered a relevant 'problem' ('completed'). It may 
         * also be 'obsolete' in circumstances where the record has 
         * been replaced.</p><p>Note that a problem may be considered 
         * 'active' even if the underlying condition is no longer 
         * affecting the patient. For example, for a patient who was 
         * recently pregnant, the pregnancy has ended, but the 
         * pregnancy would still be an 'active' condition record 
         * because of it's ongoing impact on the patient's healthcare 
         * situation.</p><p>To convey the actual clinical status of the 
         * condition, use SNOMED post-coordination in the Condition 
         * attribute.</p> </p><p>Indicates whether the condition is 
         * still being monitored as relevant to the patient's health 
         * ('active') or whether the condition is no longer considered 
         * a relevant 'problem' ('completed'). It may also be 
         * 'obsolete' in circumstances where the record has been 
         * replaced.</p><p>Note that a problem may be considered 
         * 'active' even if the underlying condition is no longer 
         * affecting the patient. For example, for a patient who was 
         * recently pregnant, the pregnancy has ended, but the 
         * pregnancy would still be an 'active' condition record 
         * because of it's ongoing impact on the patient's healthcare 
         * situation.</p><p>To convey the actual clinical status of the 
         * condition, use SNOMED post-coordination in the Condition 
         * attribute.</p> </p><p>Indicates whether the condition is 
         * still being monitored as relevant to the patient's health 
         * ('active') or whether the condition is no longer considered 
         * a relevant 'problem' ('completed'). It may also be 
         * 'obsolete' in circumstances where the record has been 
         * replaced.</p><p>Note that a problem may be considered 
         * 'active' even if the underlying condition is no longer 
         * affecting the patient. For example, for a patient who was 
         * recently pregnant, the pregnancy has ended, but the 
         * pregnancy would still be an 'active' condition record 
         * because of it's ongoing impact on the patient's healthcare 
         * situation.</p><p>To convey the actual clinical status of the 
         * condition, use SNOMED post-coordination in the Condition 
         * attribute.</p> </p><p>Indicates whether the condition is 
         * still being monitored as relevant to the patient's health 
         * ('active') or whether the condition is no longer considered 
         * a relevant 'problem' ('completed'). It may also be 
         * 'obsolete' in circumstances where the record has been 
         * replaced.</p><p>Note that a problem may be considered 
         * 'active' even if the underlying condition is no longer 
         * affecting the patient. For example, for a patient who was 
         * recently pregnant, the pregnancy has ended, but the 
         * pregnancy would still be an 'active' condition record 
         * because of it's ongoing impact on the patient's healthcare 
         * situation.</p><p>To convey the actual clinical status of the 
         * condition, use SNOMED post-coordination in the Condition 
         * attribute.</p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"statusCode"})]
        public ActStatus ConditionStatus {
            get { return (ActStatus) this.conditionStatus.Value; }
            set { this.conditionStatus.Value = value; }
        }

        /**
         * <summary>ConditionTimePeriod</summary>
         * 
         * <remarks>G: Condition Time Period <p>The date on which the 
         * condition first began and when it ended.</p><p>For ongoing 
         * conditions such as chronic diseases, the upper boundary may 
         * be unknown.</p><p>For transient conditions such as 
         * pregnancy, lactation, etc; the upper boundary of the period 
         * would usually be specified to signify the end of the 
         * condition.</p> <p>The date on which the condition first 
         * began and when it ended.</p><p>For ongoing conditions such 
         * as chronic diseases, the upper boundary may be 
         * unknown.</p><p>For transient conditions such as pregnancy, 
         * lactation, etc; the upper boundary of the period would 
         * usually be specified to signify the end of the 
         * condition.</p> <p>The date on which the condition first 
         * began and when it ended.</p><p>For ongoing conditions such 
         * as chronic diseases, the upper boundary may be 
         * unknown.</p><p>For transient conditions such as pregnancy, 
         * lactation, etc; the upper boundary of the period would 
         * usually be specified to signify the end of the 
         * condition.</p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> ConditionTimePeriod {
            get { return this.conditionTimePeriod.Value; }
            set { this.conditionTimePeriod.Value = value; }
        }

        /**
         * <summary>ConditionMaskingIndicators</summary>
         * 
         * <remarks>F: Condition Masking Indicators </p> </p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"confidentialityCode"})]
        public ICollection<x_BasicConfidentialityKind> ConditionMaskingIndicators {
            get { return this.conditionMaskingIndicators.RawSet<x_BasicConfidentialityKind>(); }
        }

        /**
         * <summary>Condition</summary>
         * 
         * <remarks>K:Condition <p>A code indicating the specific 
         * condition. E.g. Hypertension, Pregnancy.</p> </p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"value"})]
        public DiagnosisValue Condition {
            get { return (DiagnosisValue) this.condition.Value; }
            set { this.condition.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"informant/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.IActingPerson InformantActingPerson {
            get { return this.informantActingPerson; }
            set { this.informantActingPerson = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"componentOf/patientCareProvisionEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.CareCompositions> ComponentOfPatientCareProvisionEvent {
            get { return this.componentOfPatientCareProvisionEvent; }
        }

        /**
         * <summary>RefutedIndicator</summary>
         * 
         * <remarks>E: Refuted Indicator </p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"negationInd"})]
        public bool? RefutedIndicator {
            get { return this.refutedIndicator.Value; }
            set { this.refutedIndicator.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"responsibleParty/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson ResponsiblePartyActingPerson {
            get { return this.responsiblePartyActingPerson; }
            set { this.responsiblePartyActingPerson = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.ChangedBy Author {
            get { return this.author; }
            set { this.author = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"custodian1/serviceDeliveryLocation"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.ServiceLocation Custodian1ServiceDeliveryLocation {
            get { return this.custodian1ServiceDeliveryLocation; }
            set { this.custodian1ServiceDeliveryLocation = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"custodian2/assignedDevice"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.EHRRepository Custodian2AssignedDevice {
            get { return this.custodian2AssignedDevice; }
            set { this.custodian2AssignedDevice = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"predecessor/oldCondition"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.OldCondition> PredecessorOldCondition {
            get { return this.predecessorOldCondition; }
        }

        [Hl7XmlMappingAttribute(new string[] {"replacementOf/conditionEvent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.HealthCondition ReplacementOfConditionEvent {
            get { return this.replacementOfConditionEvent; }
            set { this.replacementOfConditionEvent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"successor/newCondition"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.NewCondition SuccessorNewCondition {
            get { return this.successorNewCondition; }
            set { this.successorNewCondition = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf1/controlActEvent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.AllergyIntoleranceStatusChanges SubjectOf1ControlActEvent {
            get { return this.subjectOf1ControlActEvent; }
            set { this.subjectOf1ControlActEvent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf2"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.Includes> SubjectOf2 {
            get { return this.subjectOf2; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf3/controlActEvent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt130001ca.VersionInformation SubjectOf3ControlActEvent {
            get { return this.subjectOf3ControlActEvent; }
            set { this.subjectOf3ControlActEvent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf4/annotationIndicator"})]
        public bool? SubjectOf4AnnotationIndicator {
            get { return this.subjectOf4AnnotationIndicator.Value; }
            set { this.subjectOf4AnnotationIndicator.Value = value; }
        }

    }

}