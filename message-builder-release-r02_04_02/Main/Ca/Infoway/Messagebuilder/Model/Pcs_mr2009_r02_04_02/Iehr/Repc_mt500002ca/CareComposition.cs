/**
 * Copyright 2015 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 15:47:15 -0400 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Repc_mt500002ca {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt011001ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050202ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050207ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt910108ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911107ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>Business Name: Care Composition</summary>
     * 
     * <p>Care compositions allow grouping together numerous 
     * related records which aids searching and navigation. Also, 
     * the mere knowledge that a type of care has occurred or is 
     * occurring (e.g. an in-patient hospital encounter) can be 
     * useful information when delivering subsequent care.</p> <p>A 
     * care composition is a record with two purposes. It indicates 
     * that care of a given type has occurred or is occurring. It 
     * also acts as a collector for the events that happened during 
     * care, including who is responsible for the care 
     * provided.</p><p>Care composition messages may be sent during 
     * the course of care to describe the progress of care or may 
     * be sent at the termination of care to describe all the 
     * activities that occurred during the provision of care. Note 
     * that this record merely captures the existence of care and 
     * the locations and people involved. The actual discrete 
     * events and any care summary documentation that results are 
     * captured using other messages.</p><p>Examples include: 
     * encounters, condition-related care (episodes) and 
     * longer-term care collections such as &quot;gynecological 
     * care&quot;.</p>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"REPC_MT500002CA.PatientCareProvisionEvent"})]
    public class CareComposition : MessagePartBean {

        private SET<II, Identifier> id;
        private CS statusCode;
        private IVL<TS, Interval<PlatformDate>> effectiveTime;
        private SET<CV, Code> confidentialityCode;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.Specimen subject1Specimen;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050202ca.Patient> subject2Patient;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson> performerActingPerson;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911107ca.IActingPerson informantActingPerson;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson dischargerActingPerson;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.OccurredAt> location;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.DischargeDiagnosis> outcomeDiagnosisEvent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.Request_1 inFulfillmentOfActRequest;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.BecauseOf> reason;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.ActEvent> component1ActEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.ParticipantGroupings> component2PatientCareProvisionEventPortion;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt011001ca.CareCompositions> componentOfPatientCareProvisionEvent;

        public CareComposition() {
            this.id = new SETImpl<II, Identifier>(typeof(IIImpl));
            this.statusCode = new CSImpl();
            this.effectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.confidentialityCode = new SETImpl<CV, Code>(typeof(CVImpl));
            this.subject2Patient = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050202ca.Patient>();
            this.performerActingPerson = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson>();
            this.location = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.OccurredAt>();
            this.outcomeDiagnosisEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.DischargeDiagnosis>();
            this.reason = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.BecauseOf>();
            this.component1ActEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.ActEvent>();
            this.component2PatientCareProvisionEventPortion = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.ParticipantGroupings>();
            this.componentOfPatientCareProvisionEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt011001ca.CareCompositions>();
        }
        /**
         * <summary>Business Name: A: Care Composition Ids</summary>
         * 
         * <remarks>Relationship: 
         * REPC_MT500002CA.PatientCareProvisionEvent.id 
         * Conformance/Cardinality: MANDATORY (2) <p> <i>Allows for 
         * unique identification of the Care Composition and is 
         * therefore mandatory. Supports drill-down queries, linking of 
         * this record to other records, matching of EHR records to 
         * locally-stored PoS records and is necessary when identifying 
         * records for amending (revising)/directional linking 
         * (superseding).</i> </p> <p> <i>A globally unique identifier 
         * assigned by the EHR to the Care Composition record.</i> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public ICollection<Identifier> Id {
            get { return this.id.RawSet(); }
        }

        /**
         * <summary>Business Name: C: Care Composition Status</summary>
         * 
         * <remarks>Relationship: 
         * REPC_MT500002CA.PatientCareProvisionEvent.statusCode 
         * Conformance/Cardinality: REQUIRED (1) <p> <i>Status is 
         * frequently used to filter query responses as well as to sort 
         * records for presentation. It also affects how the Care 
         * Composition record is interpreted.</i> </p><p> <i>Because 
         * the status won't always be known, the attribute is marked as 
         * 'populated' to allow the use of null flavors.</i> </p> <p> 
         * <i>This identifies the current state of the Care Composition 
         * record.</i> </p><p> <i>Care Composition Status must be set 
         * to the desired 'target' status of the Care Composition. If 
         * not changing, the status of the existing record should be 
         * sent. Allowed status values are 'active' (the encounter, 
         * episode or general delivery of care ongoing) and 'completed' 
         * (the encounter, episode or general care has ended).</i> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"statusCode"})]
        public ActStatus StatusCode {
            get { return (ActStatus) this.statusCode.Value; }
            set { this.statusCode.Value = value; }
        }

        /**
         * <summary>Business Name: F: Care Composition Period</summary>
         * 
         * <remarks>Relationship: 
         * REPC_MT500002CA.PatientCareProvisionEvent.effectiveTime 
         * Conformance/Cardinality: REQUIRED (1) <p> <i>Identifies the 
         * time-period of relevance to the record that is useful in 
         * filtering and organizing &quot;time-view&quot; presentations 
         * of data. Because the timing information won't always be 
         * known, this attribute is marked as 'populated'.</i> </p> 
         * <p>Represents the start and end of the date/time interval 
         * during which the care described by the composition was/is 
         * being provided.</p><p>E.g. The admission and discharge 
         * date/time; the date on which the episode began and ended; 
         * etc.</p><p>Please note that it is possible for many episodes 
         * and care events to not have an end date; in these 
         * situations, only the start date will be specified. Even 
         * encounters will not have an end date until the encounter is 
         * completed/patient is discharged.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> EffectiveTime {
            get { return this.effectiveTime.Value; }
            set { this.effectiveTime.Value = value; }
        }

        /**
         * <summary>Business Name: E: Care Composition Masking 
         * Indicators</summary>
         * 
         * <remarks>Relationship: 
         * REPC_MT500002CA.PatientCareProvisionEvent.confidentialityCode 
         * Conformance/Cardinality: REQUIRED (0-2) <p></p> <p> <i>The 
         * value specified for a particular record may be overridden by 
         * a higher level masking applied to an indication, a care 
         * composition, a type of record or even all patient 
         * records.</i> </p> <p> <i>Communicates the desire of the 
         * patient to restrict access to this Care Composition record. 
         * Provides support for additional confidentiality constraint, 
         * giving patients a level of control over their information. 
         * Methods for accessing masked event records will be governed 
         * by each jurisdiction (e.g. court orders, shared 
         * secret/consent, etc.).</i> </p><p> <i>Can also be used to 
         * communicate that the information is deemed to be sensitive 
         * and should not be communicated or exposed to the patient (at 
         * least without the guidance of the authoring or other 
         * responsible healthcare provider).</i> </p><p> <i>Valid 
         * values are: 'normal' (denotes 'Not Masked'); 'restricted' 
         * (denotes 'Masked') and 'taboo' (denotes 'patient 
         * restricted'). The default is 'normal' signifying 'Not 
         * Masked'. Either or both of the other codes can be asserted 
         * to indicate masking by the patient from providers or masking 
         * by a provider from the patient, respectively. 'normal' 
         * should never be asserted with one of the other codes.</i> 
         * </p><p>Masking a care composition record masks it for all 
         * associated patients (i.e. all patients involved in the care 
         * composition as a group).</p><p>Also, masking a care 
         * composition implicitly masks all records associated with 
         * that care composition.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"confidentialityCode"})]
        public ICollection<x_BasicConfidentialityKind> ConfidentialityCode {
            get { return this.confidentialityCode.RawSet<x_BasicConfidentialityKind>(); }
        }

        /**
         * <summary>Relationship: REPC_MT500002CA.Subject6.specimen</summary>
         * 
         * <remarks>Conformance/Cardinality: POPULATED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"subject1/specimen"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.Specimen Subject1Specimen {
            get { return this.subject1Specimen; }
            set { this.subject1Specimen = value; }
        }

        /**
         * <summary>Relationship: REPC_MT500002CA.Subject7.patient</summary>
         * 
         * <remarks>Conformance/Cardinality: MANDATORY (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"subject2/patient"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050202ca.Patient> Subject2Patient {
            get { return this.subject2Patient; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.Performer3.actingPerson</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"performer/actingPerson"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson> PerformerActingPerson {
            get { return this.performerActingPerson; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.Informant.actingPerson</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"informant/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911107ca.IActingPerson InformantActingPerson {
            get { return this.informantActingPerson; }
            set { this.informantActingPerson = value; }
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker InformantActingPersonAsAssignedEntity1 {
            get { return this.informantActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker) this.informantActingPerson : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker) null; }
        }
        public bool HasInformantActingPersonAsAssignedEntity1() {
            return (this.informantActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization InformantActingPersonAsAssignedEntity2 {
            get { return this.informantActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization) this.informantActingPerson : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization) null; }
        }
        public bool HasInformantActingPersonAsAssignedEntity2() {
            return (this.informantActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050207ca.Patient InformantActingPersonAsPatient {
            get { return this.informantActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050207ca.Patient ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050207ca.Patient) this.informantActingPerson : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050207ca.Patient) null; }
        }
        public bool HasInformantActingPersonAsPatient() {
            return (this.informantActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt050207ca.Patient);
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.Discharger.actingPerson</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"discharger/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt911108ca.IActingPerson DischargerActingPerson {
            get { return this.dischargerActingPerson; }
            set { this.dischargerActingPerson = value; }
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker DischargerActingPersonAsAssignedEntity1 {
            get { return this.dischargerActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker) this.dischargerActingPerson : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker) null; }
        }
        public bool HasDischargerActingPersonAsAssignedEntity1() {
            return (this.dischargerActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090108ca.HealthcareWorker);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization DischargerActingPersonAsAssignedEntity2 {
            get { return this.dischargerActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization) this.dischargerActingPerson : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization) null; }
        }
        public bool HasDischargerActingPersonAsAssignedEntity2() {
            return (this.dischargerActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt090508ca.HealthcareOrganization);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt910108ca.RelatedPerson DischargerActingPersonAsPersonalRelationship {
            get { return this.dischargerActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt910108ca.RelatedPerson ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt910108ca.RelatedPerson) this.dischargerActingPerson : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt910108ca.RelatedPerson) null; }
        }
        public bool HasDischargerActingPersonAsPersonalRelationship() {
            return (this.dischargerActingPerson is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt910108ca.RelatedPerson);
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.PatientCareProvisionEvent.location</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (0-100)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"location"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.OccurredAt> Location {
            get { return this.location; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.Outcome.diagnosisEvent</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"outcome/diagnosisEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.DischargeDiagnosis> OutcomeDiagnosisEvent {
            get { return this.outcomeDiagnosisEvent; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.InFulfillmentOf.actRequest</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"inFulfillmentOf/actRequest"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.Request_1 InFulfillmentOfActRequest {
            get { return this.inFulfillmentOfActRequest; }
            set { this.inFulfillmentOfActRequest = value; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.PatientCareProvisionEvent.reason</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (0-10)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"reason"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.BecauseOf> Reason {
            get { return this.reason; }
        }

        /**
         * <summary>Relationship: REPC_MT500002CA.Component3.actEvent</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"component1/actEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.ActEvent> Component1ActEvent {
            get { return this.component1ActEvent; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.Component2.patientCareProvisionEventPortion</summary>
         * 
         * <remarks>Conformance/Cardinality: POPULATED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"component2/patientCareProvisionEventPortion"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Merged.ParticipantGroupings> Component2PatientCareProvisionEventPortion {
            get { return this.component2PatientCareProvisionEventPortion; }
        }

        /**
         * <summary>Relationship: 
         * REPC_MT500002CA.Component.patientCareProvisionEvent</summary>
         * 
         * <remarks>Conformance/Cardinality: REQUIRED (1)</remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"componentOf/patientCareProvisionEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt011001ca.CareCompositions> ComponentOfPatientCareProvisionEvent {
            get { return this.componentOfPatientCareProvisionEvent; }
        }

    }

}