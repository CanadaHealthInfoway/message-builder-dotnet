/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:06:41 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 3947 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Iehr.Repc_mt000015ca {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>Query Definition</summary>
     * 
     * <remarks><p>Identifies the various parameters that act as 
     * filters on the records to be retrieved.</p> <p>Allows the 
     * user and/or the point-of-service application to constrain 
     * what EHR information they wish to retrieve.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"REPC_MT000015CA.ParameterList"})]
    public class QueryDefinition : MessagePartBean {

        private TS updatedSinceDateTime;
        private IList<II> careCompositionIds;
        private IList<CV> careCompositionTypes;
        private II eHRRepositoryId;
        private IVL<TS, Interval<PlatformDate>> effectiveTimeRange;
        private II eventLocationId;
        private CV eventLocationType;
        private IList<CD> healthConditions;
        private BL mostRecentByTypeIndicator;
        private IList<II> protocolIds;
        private IList<CS> recordStatuses;
        private IList<CD> recordTypes;
        private II responsibleProviderId;
        private CV responsibleProviderType;

        public QueryDefinition() {
            this.updatedSinceDateTime = new TSImpl();
            this.careCompositionIds = new List<II>();
            this.careCompositionTypes = new List<CV>();
            this.eHRRepositoryId = new IIImpl();
            this.effectiveTimeRange = new IVLImpl<TS, Interval<PlatformDate>>();
            this.eventLocationId = new IIImpl();
            this.eventLocationType = new CVImpl();
            this.healthConditions = new List<CD>();
            this.mostRecentByTypeIndicator = new BLImpl();
            this.protocolIds = new List<II>();
            this.recordStatuses = new List<CS>();
            this.recordTypes = new List<CD>();
            this.responsibleProviderId = new IIImpl();
            this.responsibleProviderType = new CVImpl();
        }
        /**
         * <summary>K: Updated Since DateTime</summary>
         * 
         * <remarks><p>Filters the records retrieved to only include 
         * those which have been created or revised since the specified 
         * date and time. If unspecified, no filter is applied.</p> 
         * <p>Useful to retrieve information &quot;since you last 
         * checked&quot;.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"amendedSinceDateTime/value"})]
        public PlatformDate UpdatedSinceDateTime {
            get { return this.updatedSinceDateTime.Value; }
            set { this.updatedSinceDateTime.Value = value; }
        }

        /**
         * <summary>R: Care Composition Ids</summary>
         * 
         * <remarks><p>Filters the records retrieved to only include 
         * those associated with the specified encounter, episode or 
         * care event. If unspecified, no filter is 
         * applied.</p><p>Note: When matching on care composition id, 
         * systems should also retrieve records with a fulfillment id 
         * to requisitions associated with the care composition. E.g. 
         * When retrieving records associated with an encounter which 
         * includes a referral, the retrieved records should also 
         * include the care summary created in fulfillment of the 
         * referral.</p> <p>Filters the records retrieved to only 
         * include those associated with the specified encounter, 
         * episode or care event. If unspecified, no filter is 
         * applied.</p><p>Note: When matching on care composition id, 
         * systems should also retrieve records with a fulfillment id 
         * to requisitions associated with the care composition. E.g. 
         * When retrieving records associated with an encounter which 
         * includes a referral, the retrieved records should also 
         * include the care summary created in fulfillment of the 
         * referral.</p> <p>Allows retrieving all records associated 
         * with an encounter, episode or care event.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"careCompositionId/value"})]
        public IList<Identifier> CareCompositionIds {
            get { return new RawListWrapper<II, Identifier>(careCompositionIds, typeof(IIImpl)); }
        }

        /**
         * <summary>S: Care Composition Types</summary>
         * 
         * <remarks></p> </p> <p>Allows retrieving all records 
         * associated with a particular type of encounter, episode or 
         * care event. E.g. Orthopedic Clinic Encounter, ER encounter, 
         * Walk-in encounter, etc.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"careCompositionType/value"})]
        public IList<ActCareEventType> CareCompositionTypes {
            get { return new RawListWrapper<CV, ActCareEventType>(careCompositionTypes, typeof(CVImpl)); }
        }

        /**
         * <summary>Q: EHR Repository Id</summary>
         * 
         * <remarks><p>Filters the records retrieved to only include 
         * those records from a specific EHR repository. If 
         * unspecified, all &quot;connected&quot; EHR repositories will 
         * be searched.</p> <p>Primarily intended to allow filtering an 
         * initial search to a local EHR repository for performance 
         * reasons.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"eHRRepositoryId/value"})]
        public Identifier EHRRepositoryId {
            get { return this.eHRRepositoryId.Value; }
            set { this.eHRRepositoryId.Value = value; }
        }

        /**
         * <summary>J: Effective Time Range</summary>
         * 
         * <remarks><p>Filters the set of records to be retrieved to 
         * those which occurred or were effective for the patient 
         * within the date boundaries specified. Either the lower bound 
         * or upper bound or both would be specified. If no value is 
         * specified, no filter will be applied. If there is any 
         * overlap between the specified time-range and the effective 
         * time of the record, the record will be returned.</p> 
         * <p>Allows constraining the retrieved records to those 
         * applicable at a particular date. Useful in retrieving those 
         * records &quot;currently in effect&quot; as well as 
         * retrieving views of what information was in effect at some 
         * point in the past.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTimeRange/value"})]
        public Interval<PlatformDate> EffectiveTimeRange {
            get { return this.effectiveTimeRange.Value; }
            set { this.effectiveTimeRange.Value = value; }
        }

        /**
         * <summary>O: Event Location Id</summary>
         * 
         * <remarks><p>Filters the records retrieved to only include 
         * those records which are officially associated with and/or 
         * were performed by a particular facility. I.e. It will return 
         * records where either the &quot;Service Location&quot; or the 
         * &quot;Record Location&quot; has the specified location id. 
         * Records associated with &quot;sub-locations&quot; (e.g. 
         * departments, wards) will be returned when searching by the 
         * larger location (e.g. hospital).</p> <p>Allows retrieving 
         * those records associated with a particular facility.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"eventLocationId/value"})]
        public Identifier EventLocationId {
            get { return this.eventLocationId.Value; }
            set { this.eventLocationId.Value = value; }
        }

        /**
         * <summary>P: Event Location Type</summary>
         * 
         * <remarks></p> </p> <p>Allows retrieving those records 
         * associated with a particular kind of facility. E.g. 
         * Hospital, clinic, pharmacy, patient residence, etc.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"eventLocationType/value"})]
        public ServiceDeliveryLocationRoleType EventLocationType {
            get { return (ServiceDeliveryLocationRoleType) this.eventLocationType.Value; }
            set { this.eventLocationType.Value = value; }
        }

        /**
         * <summary>T: Health Conditions</summary>
         * 
         * <remarks></p> </p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"healthCondition/value"})]
        public IList<ActHealthConditionType> HealthConditions {
            get { return new RawListWrapper<CD, ActHealthConditionType>(healthConditions, typeof(CDImpl)); }
        }

        /**
         * <summary>V: Most Recent By Type Indicator</summary>
         * 
         * <remarks><p>If true, indicates that only the most recent 
         * records of a given type or category should be retrieved. 
         * I.e. If there are 10 records of the same kind, only the most 
         * recent one would be returned. If false, all occurrences will 
         * be returned.</p> <p>Provides a mechanism of getting a quick 
         * overview of the types of events that have occurred without 
         * needing to look at all occurrences. The attribute is 
         * mandatory because it must be known whether to return the 
         * most recent or all records.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"mostRecentByTypeIndicator/value"})]
        public bool? MostRecentByTypeIndicator {
            get { return this.mostRecentByTypeIndicator.Value; }
            set { this.mostRecentByTypeIndicator.Value = value; }
        }

        /**
         * <summary>ZI: Protocol Ids</summary>
         * 
         * <remarks><p>Filters the records retrieved to only include 
         * those associated with the specified protocols. If 
         * unspecified, no filter is applied.</p> <p>Allows retrieving 
         * records associated with a particular protocol. Useful in 
         * clinical studies and other research.</p><p>The element is 
         * optional because support for protocols is not deemed a 
         * necessity for many healthcare providers.</p> <p>Allows 
         * retrieving records associated with a particular protocol. 
         * Useful in clinical studies and other research.</p><p>The 
         * element is optional because support for protocols is not 
         * deemed a necessity for many healthcare providers.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"protocolId/value"})]
        public IList<Identifier> ProtocolIds {
            get { return new RawListWrapper<II, Identifier>(protocolIds, typeof(IIImpl)); }
        }

        /**
         * <summary>I: Record Statuses</summary>
         * 
         * <remarks><p>Filters the set of records to be retrieved to 
         * only include those with the identified status(s). If no 
         * values are specified, no filter will be applied.</p> 
         * <p>Allows constraining the status of records to be 
         * retrieved. Multiple repetitions are present to allow 
         * selection of multiple statuses with a single query.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"recordStatus/value"})]
        public IList<ActStatus> RecordStatuses {
            get { return new RawListWrapper<CS, ActStatus>(recordStatuses, typeof(CSImpl)); }
        }

        /**
         * <summary>H:Record Types</summary>
         * 
         * <remarks><p>ActDiagnosisCode is fixed to DX if not using 
         * SNOMED</p> </p> </p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"recordType/value"})]
        public IList<Code> RecordTypes {
            get { return new RawListWrapper<CD, Code>(recordTypes, typeof(CDImpl)); }
        }

        /**
         * <summary>L: Responsible Provider Id</summary>
         * 
         * <remarks><p>Filters the records retrieved to only include 
         * those where the identified provider was the author, 
         * supervisor or performer. If unspecified, no filter is 
         * applied.</p> <p>Allows retrieving those records in which a 
         * particular provider has a vested interest.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"responsibleProviderId/value"})]
        public Identifier ResponsibleProviderId {
            get { return this.responsibleProviderId.Value; }
            set { this.responsibleProviderId.Value = value; }
        }

        /**
         * <summary>M: Responsible Provider Type</summary>
         * 
         * <remarks></p> </p> <p>Allows retrieving those records in 
         * which a particular kind of provider has a vested 
         * interest.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"responsibleProviderType/value"})]
        public HealthcareProviderRoleType ResponsibleProviderType {
            get { return (HealthcareProviderRoleType) this.responsibleProviderType.Value; }
            set { this.responsibleProviderType.Value = value; }
        }

    }

}