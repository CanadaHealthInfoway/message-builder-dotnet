/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:00:08 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 3886 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Claims.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca;
    using System.Collections.Generic;


    /**
     * <summary>AdjudicatedInvoiceElementGroup</summary>
     * 
     * <remarks>FICR_MT630000CA.AdjudicatedInvoiceElementGroup: 
     * Adjudicated Invoice Element Group <p>Group of Invoice 
     * Elements being referenced; ie. group of billable items.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"COCT_MT680000CA.AdjudicatedInvoiceElementGroup","FICR_MT630000CA.AdjudicatedInvoiceElementGroup"})]
    public class AdjudicatedInvoiceElementGroup : MessagePartBean, Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.IAdjudicatedInvoiceElementChoice {

        private II adjudicationResultId;
        private CV code;
        private CS statusCode;
        private MO netAmt;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Claims.Merged.PaymentIntent reasonPaymentIntent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.AdjudicatedInvoiceElementGroup referenceAdjudicatedInvoiceElementGroup;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Claims.Merged.AdjudicatedResultsGroup referencedByAdjudResultsGroup;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.AdjudicatedResultOutcome outcomeOf;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.AdjudicatedInvoiceAuthor author;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.AdjudicatedInvoiceCoverage> coverage;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.IAdjudicatedInvoiceElementChoice> componentAdjudicatedInvoiceElementChoice;

        public AdjudicatedInvoiceElementGroup() {
            this.adjudicationResultId = new IIImpl();
            this.code = new CVImpl();
            this.statusCode = new CSImpl();
            this.netAmt = new MOImpl();
            this.coverage = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.AdjudicatedInvoiceCoverage>();
            this.componentAdjudicatedInvoiceElementChoice = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.IAdjudicatedInvoiceElementChoice>();
        }
        /**
         * <summary>AdjudicationResultId</summary>
         * 
         * <remarks>Adjudication Result Id <p>Adjudication Result Id - 
         * Technique to identify that the EOB was not electronic 
         * (manual) is through the participation mode code for the 
         * adjudicator.</p> <p>May include data centre and sequence 
         * numbers</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier AdjudicationResultId {
            get { return this.adjudicationResultId.Value; }
            set { this.adjudicationResultId.Value = value; }
        }

        /**
         * <summary>Invoice Type</summary>
         * 
         * <remarks><p>Invoice Type e.g. Healthcare Services, Rx 
         * Dispense, Rx Compound</p> <p>For Invoice (COB) : Invoice 
         * type (for root) cannot be different from submitted invoice. 
         * This would be a cause for rejecting the invoice.</p><p>For 
         * Adjudication Results: code must match to the corresponding 
         * invoice element that was submitted.</p><p>For Invoice 
         * Nullify Results: this is the identifier of the EOB that was 
         * previously messaged to the Provider.</p><p>Modifiers for the 
         * codes are taken from the same domain (i.e 
         * ActInvoiceGroupCode).</p> <p>For Invoice (COB) : Invoice 
         * type (for root) cannot be different from submitted invoice. 
         * This would be a cause for rejecting the invoice.</p><p>For 
         * Adjudication Results: code must match to the corresponding 
         * invoice element that was submitted.</p><p>For Invoice 
         * Nullify Results: this is the identifier of the EOB that was 
         * previously messaged to the Provider.</p><p>Modifiers for the 
         * codes are taken from the same domain (i.e 
         * ActInvoiceGroupCode).</p> <p>For Invoice (COB) : Invoice 
         * type (for root) cannot be different from submitted invoice. 
         * This would be a cause for rejecting the invoice.</p><p>For 
         * Adjudication Results: code must match to the corresponding 
         * invoice element that was submitted.</p><p>For Invoice 
         * Nullify Results: this is the identifier of the EOB that was 
         * previously messaged to the Provider.</p><p>Modifiers for the 
         * codes are taken from the same domain (i.e 
         * ActInvoiceGroupCode).</p> <p>For Invoice (COB) : Invoice 
         * type (for root) cannot be different from submitted invoice. 
         * This would be a cause for rejecting the invoice.</p><p>For 
         * Adjudication Results: code must match to the corresponding 
         * invoice element that was submitted.</p><p>For Invoice 
         * Nullify Results: this is the identifier of the EOB that was 
         * previously messaged to the Provider.</p><p>Modifiers for the 
         * codes are taken from the same domain (i.e 
         * ActInvoiceGroupCode).</p> Invoice element group Code 
         * <p>(Invoice Type e.g. Healthcare Services, Rx Dispense, Rx 
         * Compound, Healthcare Goods, Preferred Accomodation</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public Code Code {
            get { return (Code) this.code.Value; }
            set { this.code.Value = value; }
        }

        /**
         * <summary>Invoice Status Code</summary>
         * 
         * <remarks><p>(Completed when done, Suspended if waiting for 
         * external )(information, Active if delayed by Adjudicator or 
         * the EOB is an estimate</p> Invoice Status <p>Codes 
         * representing the defined states of an Act as defined by the 
         * Act class state machine.</p> <p>Active EOBs are used to 
         * convey interim or preliminary adjudication results. They can 
         * also be used, with information codes, to indicate that the 
         * invoice grouping is held for manual review by the 
         * adjudicator, waiting for other third party information (e.g. 
         * from another provider, employer, etc.).</p><p>Suspended EOBs 
         * are used to convey adjudication results that are awaiting 
         * additional information from the submitting 
         * Provider.</p><p>Complete EOBs are used to convey final 
         * adjudication results, with an associated intent to 
         * pay.</p><p>For Invoice (COB): Status code must be complete 
         * in order for EOB to be sent to downstream Adjudicators. If a 
         * Provider receives a non-complete EOB, this cannot be 
         * forwarded to a downstream Adjudicator.</p><p>Field cannot be 
         * made mandatory, as it is not included in Payment Advice 
         * Detail messages (only completed EOBs can be included in a 
         * Payment Advice).</p> <p>Active EOBs are used to convey 
         * interim or preliminary adjudication results. They can also 
         * be used, with information codes, to indicate that the 
         * invoice grouping is held for manual review by the 
         * adjudicator, waiting for other third party information (e.g. 
         * from another provider, employer, etc.).</p><p>Suspended EOBs 
         * are used to convey adjudication results that are awaiting 
         * additional information from the submitting 
         * Provider.</p><p>Complete EOBs are used to convey final 
         * adjudication results, with an associated intent to 
         * pay.</p><p>For Invoice (COB): Status code must be complete 
         * in order for EOB to be sent to downstream Adjudicators. If a 
         * Provider receives a non-complete EOB, this cannot be 
         * forwarded to a downstream Adjudicator.</p><p>Field cannot be 
         * made mandatory, as it is not included in Payment Advice 
         * Detail messages (only completed EOBs can be included in a 
         * Payment Advice).</p> <p>Active EOBs are used to convey 
         * interim or preliminary adjudication results. They can also 
         * be used, with information codes, to indicate that the 
         * invoice grouping is held for manual review by the 
         * adjudicator, waiting for other third party information (e.g. 
         * from another provider, employer, etc.).</p><p>Suspended EOBs 
         * are used to convey adjudication results that are awaiting 
         * additional information from the submitting 
         * Provider.</p><p>Complete EOBs are used to convey final 
         * adjudication results, with an associated intent to 
         * pay.</p><p>For Invoice (COB): Status code must be complete 
         * in order for EOB to be sent to downstream Adjudicators. If a 
         * Provider receives a non-complete EOB, this cannot be 
         * forwarded to a downstream Adjudicator.</p><p>Field cannot be 
         * made mandatory, as it is not included in Payment Advice 
         * Detail messages (only completed EOBs can be included in a 
         * Payment Advice).</p> <p>Active EOBs are used to convey 
         * interim or preliminary adjudication results. They can also 
         * be used, with information codes, to indicate that the 
         * invoice grouping is held for manual review by the 
         * adjudicator, waiting for other third party information (e.g. 
         * from another provider, employer, etc.).</p><p>Suspended EOBs 
         * are used to convey adjudication results that are awaiting 
         * additional information from the submitting 
         * Provider.</p><p>Complete EOBs are used to convey final 
         * adjudication results, with an associated intent to 
         * pay.</p><p>For Invoice (COB): Status code must be complete 
         * in order for EOB to be sent to downstream Adjudicators. If a 
         * Provider receives a non-complete EOB, this cannot be 
         * forwarded to a downstream Adjudicator.</p><p>Field cannot be 
         * made mandatory, as it is not included in Payment Advice 
         * Detail messages (only completed EOBs can be included in a 
         * Payment Advice).</p> <p>Active EOBs are used to convey 
         * interim or preliminary adjudication results. They can also 
         * be used, with information codes, to indicate that the 
         * invoice grouping is held for manual review by the 
         * adjudicator, waiting for other third party information (e.g. 
         * from another provider, employer, etc.).</p><p>Suspended EOBs 
         * are used to convey adjudication results that are awaiting 
         * additional information from the submitting 
         * Provider.</p><p>Complete EOBs are used to convey final 
         * adjudication results, with an associated intent to 
         * pay.</p><p>For Invoice (COB): Status code must be complete 
         * in order for EOB to be sent to downstream Adjudicators. If a 
         * Provider receives a non-complete EOB, this cannot be 
         * forwarded to a downstream Adjudicator.</p><p>Field cannot be 
         * made mandatory, as it is not included in Payment Advice 
         * Detail messages (only completed EOBs can be included in a 
         * Payment Advice).</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"statusCode"})]
        public ActStatus StatusCode {
            get { return (ActStatus) this.statusCode.Value; }
            set { this.statusCode.Value = value; }
        }

        /**
         * <summary>Invoice Element amount billed</summary>
         * 
         * <remarks><p>Identifies the total monetary amount billed for 
         * the invoice element. = unit_qty * unit_price_amt * 
         * factor_nbr * points_nbr. E.g. $150 CAD</p> Paid Amount 
         * <p>Paid Amount</p> <p>For Coverage Extension Results, this 
         * is typically not specified, as dollar limits are noted as 
         * information codes</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"netAmt"})]
        public Money NetAmt {
            get { return this.netAmt.Value; }
            set { this.netAmt.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"reason/paymentIntent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Claims.Merged.PaymentIntent ReasonPaymentIntent {
            get { return this.reasonPaymentIntent; }
            set { this.reasonPaymentIntent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"reference/adjudicatedInvoiceElementGroup"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.AdjudicatedInvoiceElementGroup ReferenceAdjudicatedInvoiceElementGroup {
            get { return this.referenceAdjudicatedInvoiceElementGroup; }
            set { this.referenceAdjudicatedInvoiceElementGroup = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"referencedBy/adjudResultsGroup"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Claims.Merged.AdjudicatedResultsGroup ReferencedByAdjudResultsGroup {
            get { return this.referencedByAdjudResultsGroup; }
            set { this.referencedByAdjudResultsGroup = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"outcomeOf"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.AdjudicatedResultOutcome OutcomeOf {
            get { return this.outcomeOf; }
            set { this.outcomeOf = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.AdjudicatedInvoiceAuthor Author {
            get { return this.author; }
            set { this.author = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"coverage"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.AdjudicatedInvoiceCoverage> Coverage {
            get { return this.coverage; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component/adjudicatedInvoiceElementChoice"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt680000ca.IAdjudicatedInvoiceElementChoice> ComponentAdjudicatedInvoiceElementChoice {
            get { return this.componentAdjudicatedInvoiceElementChoice; }
        }

    }

}