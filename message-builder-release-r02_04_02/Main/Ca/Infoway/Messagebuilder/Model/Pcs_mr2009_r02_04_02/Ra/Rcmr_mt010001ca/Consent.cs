/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:13:09 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 4024 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Ra.Rcmr_mt010001ca {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged;
    using System;


    /**
     * <summary>Consent</summary>
     * 
     * <remarks><p>If code is INFA, then InformDefinition must be 
     * present, otherwise it must be absent</p><p>One and only one 
     * of author1 (Consenter) and author2 (Provider) must be 
     * specified</p><p>If author2 (provider) is specified, 
     * reasonCode must be specified</p> <p>If code is INFA, then 
     * InformDefinition must be present, otherwise it must be 
     * absent</p><p>One and only one of author1 (Consenter) and 
     * author2 (Provider) must be specified</p><p>If author2 
     * (provider) is specified, reasonCode must be specified</p> 
     * <p>If code is INFA, then InformDefinition must be present, 
     * otherwise it must be absent</p><p>One and only one of 
     * author1 (Consenter) and author2 (Provider) must be 
     * specified</p><p>If author2 (provider) is specified, 
     * reasonCode must be specified</p> <p>Information pertaining 
     * to a patient's agreement/acceptance to have his/her clinical 
     * information electronically stored and shared.</p> 
     * <p>Provides authorization to record and/or view patient 
     * information.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"RCMR_MT010001CA.ConsentEvent"})]
    public class Consent : MessagePartBean {

        private II consentFormNumber;
        private CV consentType;
        private BL consentRefusedIndicator;
        private IVL<TS, Interval<PlatformDate>> consentEffectiveAndEndTime;
        private CV consentOverrideReason;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Ra.Rcmr_mt010001ca.ConsentedToBy author1;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.PrescribedBy author2;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Ra.Rcmr_mt010001ca.InformationAccess componentPermissionToInform;

        public Consent() {
            this.consentFormNumber = new IIImpl();
            this.consentType = new CVImpl();
            this.consentRefusedIndicator = new BLImpl();
            this.consentEffectiveAndEndTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.consentOverrideReason = new CVImpl();
        }
        /**
         * <summary>D:Consent Form Number</summary>
         * 
         * <remarks><p>A unique identifier for a specific consent for a 
         * patient.</p> <p>Provides a traceable audit link between a 
         * physical consent form and its electronic record</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier ConsentFormNumber {
            get { return this.consentFormNumber.Value; }
            set { this.consentFormNumber.Value = value; }
        }

        /**
         * <summary>A:Consent Type</summary>
         * 
         * <remarks><p>Indicates the type of consent being given: 
         * Information access or Information maintenance.</p> 
         * <p>Distinguishes what type of consent is being dealt with 
         * and is therefore mandatory.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public ActConsentType ConsentType {
            get { return (ActConsentType) this.consentType.Value; }
            set { this.consentType.Value = value; }
        }

        /**
         * <summary>B:Consent Refused Indicator</summary>
         * 
         * <remarks><p>Must be either not present or non-null.</p> 
         * <p>If true, indicates that consent has explicitly *not* been 
         * given.</p> <p>Primarily applies for global 
         * &quot;participation&quot; consent, when there is a need to 
         * track whether the patient has consented, not consented, or 
         * has not recorded a decision.</p><p>Because not all 
         * jurisdictions will track &quot;participation&quot; consent, 
         * this attribute is optional. In jurisdictions where it is 
         * supported, the element must always be valued as either true 
         * or false.</p> <p>Primarily applies for global 
         * &quot;participation&quot; consent, when there is a need to 
         * track whether the patient has consented, not consented, or 
         * has not recorded a decision.</p><p>Because not all 
         * jurisdictions will track &quot;participation&quot; consent, 
         * this attribute is optional. In jurisdictions where it is 
         * supported, the element must always be valued as either true 
         * or false.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"negationInd"})]
        public bool? ConsentRefusedIndicator {
            get { return this.consentRefusedIndicator.Value; }
            set { this.consentRefusedIndicator.Value = value; }
        }

        /**
         * <summary>C:Consent Effective and End Time</summary>
         * 
         * <remarks><p>Indicates the time that the consent will expire. 
         * 'Low' is effective time and 'High' is end time.</p> <p>Most 
         * consents are not open-ended, to ensure the patient retains a 
         * level of control</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> ConsentEffectiveAndEndTime {
            get { return this.consentEffectiveAndEndTime.Value; }
            set { this.consentEffectiveAndEndTime.Value = value; }
        }

        /**
         * <summary>E:Consent Override Reason</summary>
         * 
         * <remarks><p>Indicates a reason for overriding a patient's 
         * consent rules or accessing information without consent.</p> 
         * <p>Important for audit purposes</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"reasonCode"})]
        public Code ConsentOverrideReason {
            get { return (Code) this.consentOverrideReason.Value; }
            set { this.consentOverrideReason.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author1"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Ra.Rcmr_mt010001ca.ConsentedToBy Author1 {
            get { return this.author1; }
            set { this.author1 = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author2"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.PrescribedBy Author2 {
            get { return this.author2; }
            set { this.author2 = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component/permissionToInform"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Ra.Rcmr_mt010001ca.InformationAccess ComponentPermissionToInform {
            get { return this.componentPermissionToInform; }
            set { this.componentPermissionToInform = value; }
        }

    }

}