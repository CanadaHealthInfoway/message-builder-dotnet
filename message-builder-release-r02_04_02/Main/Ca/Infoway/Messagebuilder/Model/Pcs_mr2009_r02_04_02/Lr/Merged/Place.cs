/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:09:41 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 3987 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lr.Merged {
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using System;
    using System.Collections.Generic;


    [Hl7PartTypeMappingAttribute(new string[] {"PRPA_MT202301CA.Place","PRPA_MT202302CA.Place","PRPA_MT202303CA.Place"})]
    public class Place : MessagePartBean {

        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lr.Merged.Has> asIdentifiedLocation;
        private CV locationPlaceType;
        private BL locationMobileIndicator;

        public Place() {
            this.asIdentifiedLocation = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lr.Merged.Has>();
            this.locationPlaceType = new CVImpl();
            this.locationMobileIndicator = new BLImpl();
        }
        [Hl7XmlMappingAttribute(new string[] {"asIdentifiedLocation"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lr.Merged.Has> AsIdentifiedLocation {
            get { return this.asIdentifiedLocation; }
        }

        /**
         * <summary>LocationPlaceType</summary>
         * 
         * <remarks>E:Location Place Type <p>Distinguishes different 
         * levels of location granularity. E.g. Campus, building, 
         * floor, ward, room, bed.</p> <p>Used for searching, as well 
         * as for understanding what is meant by a particular location 
         * and is therefore mandatory.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public ServiceDeliveryLocationPlaceType LocationPlaceType {
            get { return (ServiceDeliveryLocationPlaceType) this.locationPlaceType.Value; }
            set { this.locationPlaceType.Value = value; }
        }

        /**
         * <summary>LocationMobileIndicator</summary>
         * 
         * <remarks>F:Location Mobile Indicator <p>An indication of 
         * whether a place has the capability to move from one location 
         * to another. Example: air and ground ambulances, mobile 
         * clinics.</p> <p>Allows flagging that the location does not 
         * have a fixed physical location.</p><p>This element must 
         * always be known and is therefore mandatory.</p> <p>Allows 
         * flagging that the location does not have a fixed physical 
         * location.</p><p>This element must always be known and is 
         * therefore mandatory.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"mobileInd"})]
        public bool? LocationMobileIndicator {
            get { return this.locationMobileIndicator.Value; }
            set { this.locationMobileIndicator.Value = value; }
        }

    }

}