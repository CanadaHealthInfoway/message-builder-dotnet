/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:09:12 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 3982 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt130001ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>Battery Event</summary>
     * 
     * <remarks><p>Used to group Observation Events by the 
     * batteries that were ordered by the lab.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"POLB_MT004000CA.BatteryEvent"})]
    public class BatteryEvent : MessagePartBean, Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca.IResultChoice {

        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ReportSectionSpecimen> specimen;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.Patient_1 recordTargetPatient;
        private SET<II, Identifier> batteryEventIdentifier;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ElectronicResultReceiver> receiver;
        private CD typeOfBatteryEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.IRoleChoice> performerRoleChoice;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca.PrimaryInformationRecipient primaryInformationRecipient;
        private CS batteryEventStatus;
        private IVL<TS, Interval<PlatformDate>> batteryEventEffectiveTime;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.IFulfillmentChoice> inFulfillmentOfFulfillmentChoice;
        private SET<CV, Code> batteryEventConfidentiality;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.Outbreak pertinentInformation1OutbreakEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.SupportingClinicalInformation> pertinentInformation2SupportingClinicalObservationEvent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ResultSortKey component1ResultSortKey;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ReportableHealthIndicator> component2ReportableTestIndicator;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca.IResultChoice> component3ResultChoice;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt130001ca.VersionInformation subjectOf1ControlActEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.Includes> subjectOf2;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ResultStatusProcessStep subjectOf3ResultStatusProcessStep;

        public BatteryEvent() {
            this.specimen = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ReportSectionSpecimen>();
            this.batteryEventIdentifier = new SETImpl<II, Identifier>(typeof(IIImpl));
            this.receiver = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ElectronicResultReceiver>();
            this.typeOfBatteryEvent = new CDImpl();
            this.performerRoleChoice = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.IRoleChoice>();
            this.batteryEventStatus = new CSImpl();
            this.batteryEventEffectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.inFulfillmentOfFulfillmentChoice = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.IFulfillmentChoice>();
            this.batteryEventConfidentiality = new SETImpl<CV, Code>(typeof(CVImpl));
            this.pertinentInformation2SupportingClinicalObservationEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.SupportingClinicalInformation>();
            this.component2ReportableTestIndicator = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ReportableHealthIndicator>();
            this.component3ResultChoice = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca.IResultChoice>();
            this.subjectOf2 = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.Includes>();
        }
        [Hl7XmlMappingAttribute(new string[] {"specimen"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ReportSectionSpecimen> Specimen {
            get { return this.specimen; }
        }

        [Hl7XmlMappingAttribute(new string[] {"recordTarget/patient"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Merged.Patient_1 RecordTargetPatient {
            get { return this.recordTargetPatient; }
            set { this.recordTargetPatient = value; }
        }

        /**
         * <summary>Battery Event Identifier</summary>
         * 
         * <remarks><p>This is a unique identifier for the Battery 
         * Event.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public ICollection<Identifier> BatteryEventIdentifier {
            get { return this.batteryEventIdentifier.RawSet(); }
        }

        [Hl7XmlMappingAttribute(new string[] {"receiver"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ElectronicResultReceiver> Receiver {
            get { return this.receiver; }
        }

        /**
         * <summary>Type of Battery Event</summary>
         * 
         * <remarks><p>Code drawn from the pCLOCD to identify the 
         * battery ordered by the lab.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public ObservationOrderableLabType TypeOfBatteryEvent {
            get { return (ObservationOrderableLabType) this.typeOfBatteryEvent.Value; }
            set { this.typeOfBatteryEvent.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"performer/roleChoice"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.IRoleChoice> PerformerRoleChoice {
            get { return this.performerRoleChoice; }
        }

        [Hl7XmlMappingAttribute(new string[] {"primaryInformationRecipient"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca.PrimaryInformationRecipient PrimaryInformationRecipient {
            get { return this.primaryInformationRecipient; }
            set { this.primaryInformationRecipient = value; }
        }

        /**
         * <summary>Battery Event Status</summary>
         * 
         * <remarks><p>Status associated with all ObservationEvents 
         * that are components of this Battery Event.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"statusCode"})]
        public ActStatus BatteryEventStatus {
            get { return (ActStatus) this.batteryEventStatus.Value; }
            set { this.batteryEventStatus.Value = value; }
        }

        /**
         * <summary>Battery Event Effective Time</summary>
         * 
         * <remarks><p>Effective time associated with the lab order 
         * battery.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> BatteryEventEffectiveTime {
            get { return this.batteryEventEffectiveTime.Value; }
            set { this.batteryEventEffectiveTime.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"inFulfillmentOf/fulfillmentChoice"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.IFulfillmentChoice> InFulfillmentOfFulfillmentChoice {
            get { return this.inFulfillmentOfFulfillmentChoice; }
        }

        /**
         * <summary>Battery Event Confidentiality</summary>
         * 
         * <remarks><p>Level of confidentiality assoicated with the 
         * reporting of the Observation Events that are components of 
         * this Battery.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"confidentialityCode"})]
        public ICollection<x_BasicConfidentialityKind> BatteryEventConfidentiality {
            get { return this.batteryEventConfidentiality.RawSet<x_BasicConfidentialityKind>(); }
        }

        [Hl7XmlMappingAttribute(new string[] {"pertinentInformation1/outbreakEvent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.Outbreak PertinentInformation1OutbreakEvent {
            get { return this.pertinentInformation1OutbreakEvent; }
            set { this.pertinentInformation1OutbreakEvent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"pertinentInformation2/supportingClinicalObservationEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.SupportingClinicalInformation> PertinentInformation2SupportingClinicalObservationEvent {
            get { return this.pertinentInformation2SupportingClinicalObservationEvent; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component1/resultSortKey"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ResultSortKey Component1ResultSortKey {
            get { return this.component1ResultSortKey; }
            set { this.component1ResultSortKey = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component2/reportableTestIndicator"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ReportableHealthIndicator> Component2ReportableTestIndicator {
            get { return this.component2ReportableTestIndicator; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component3/resultChoice"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004000ca.IResultChoice> Component3ResultChoice {
            get { return this.component3ResultChoice; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf1/controlActEvent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Common.Coct_mt130001ca.VersionInformation SubjectOf1ControlActEvent {
            get { return this.subjectOf1ControlActEvent; }
            set { this.subjectOf1ControlActEvent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf2"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Merged.Includes> SubjectOf2 {
            get { return this.subjectOf2; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf3/resultStatusProcessStep"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Merged.ResultStatusProcessStep SubjectOf3ResultStatusProcessStep {
            get { return this.subjectOf3ResultStatusProcessStep; }
            set { this.subjectOf3ResultStatusProcessStep = value; }
        }

    }

}