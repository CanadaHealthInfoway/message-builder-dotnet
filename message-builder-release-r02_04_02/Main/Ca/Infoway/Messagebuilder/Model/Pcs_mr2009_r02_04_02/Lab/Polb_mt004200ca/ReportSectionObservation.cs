/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-01-18 21:09:28 -0500 (Wed, 18 Jan 2012) $
 * Revision:      $LastChangedRevision: 3984 $
 */

/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_02.Lab.Polb_mt004200ca {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>Report Section Observation</summary>
     * 
     * <remarks><p>Any report sections reported at the header or 
     * report level (not specific to a specimen or diagnosis).</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"POLB_MT004200CA.ReportLevelObservationEvent"})]
    public class ReportSectionObservation : MessagePartBean {

        private II sectionIdentifier;
        private CD reportSectionObservationType;
        private ST noteType;
        private TS reportSectionObservationDateTime;
        private SET<CV, Code> resultMaskingIndicator;
        private ANY<object> reportSectionObservationValue;

        public ReportSectionObservation() {
            this.sectionIdentifier = new IIImpl();
            this.reportSectionObservationType = new CDImpl();
            this.noteType = new STImpl();
            this.reportSectionObservationDateTime = new TSImpl();
            this.resultMaskingIndicator = new SETImpl<CV, Code>(typeof(CVImpl));
            this.reportSectionObservationValue = new ANYImpl<object>();
        }
        /**
         * <summary>Section Identifier</summary>
         * 
         * <remarks><p>Unique identifier for a section of the report at 
         * the ObservationReport level.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier SectionIdentifier {
            get { return this.sectionIdentifier.Value; }
            set { this.sectionIdentifier.Value = value; }
        }

        /**
         * <summary>Report Section Observation Type</summary>
         * 
         * <remarks><p>Specifies the type of report section.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public Code ReportSectionObservationType {
            get { return (Code) this.reportSectionObservationType.Value; }
            set { this.reportSectionObservationType.Value = value; }
        }

        /**
         * <summary>Note Type</summary>
         * 
         * <remarks><p>Type of comment or note.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"text"})]
        public String NoteType {
            get { return this.noteType.Value; }
            set { this.noteType.Value = value; }
        }

        /**
         * <summary>Report Section Observation Date/Time</summary>
         * 
         * <remarks><p>The date/time this report section was 
         * &quot;reported&quot;.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public PlatformDate ReportSectionObservationDateTime {
            get { return this.reportSectionObservationDateTime.Value; }
            set { this.reportSectionObservationDateTime.Value = value; }
        }

        /**
         * <summary>Result Masking Indicator</summary>
         */
        [Hl7XmlMappingAttribute(new string[] {"confidentialityCode"})]
        public ICollection<x_BasicConfidentialityKind> ResultMaskingIndicator {
            get { return this.resultMaskingIndicator.RawSet<x_BasicConfidentialityKind>(); }
        }

        /**
         * <summary>Report Section Observation Value</summary>
         * 
         * <remarks><p>The report section values - usually this is 
         * text-based. If a coded value applies, values must be 
         * selected from the SectionHeadingObservationValue Concept 
         * Domain.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"value"})]
        public object ReportSectionObservationValue {
            get { return this.reportSectionObservationValue.Value; }
            set { this.reportSectionObservationValue.Value = value; }
        }

    }

}