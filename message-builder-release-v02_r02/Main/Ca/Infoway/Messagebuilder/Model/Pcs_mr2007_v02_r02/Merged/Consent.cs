/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-02-16 11:10:09 -0500 (Thu, 16 Feb 2012) $
 * Revision:      $LastChangedRevision: 5502 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged {
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Si.Rcmr_mt010001ca;
    using System;


    /**
     * <summary>Consent</summary>
     * 
     * <remarks>RCMR_MT010001CA.ConsentEvent: Consent <p>If code is 
     * INFA, then InformDefinition must be present, otherwise it 
     * must be absent</p><p>One and only one of author1 (Consenter) 
     * and author2 (Provider) must be specified</p><p>If author2 
     * (provider) is specified, reasonCode must be specified</p> 
     * <p>If code is INFA, then InformDefinition must be present, 
     * otherwise it must be absent</p><p>One and only one of 
     * author1 (Consenter) and author2 (Provider) must be 
     * specified</p><p>If author2 (provider) is specified, 
     * reasonCode must be specified</p> <p>If code is INFA, then 
     * InformDefinition must be present, otherwise it must be 
     * absent</p><p>One and only one of author1 (Consenter) and 
     * author2 (Provider) must be specified</p><p>If author2 
     * (provider) is specified, reasonCode must be specified</p> 
     * <p>Information pertaining to a patient's 
     * agreement/acceptance to have his/her clinical information 
     * electronically stored and shared.</p> <p>Provides 
     * authorization to record and/or view patient information.</p> 
     * COCT_MT470012CA.ConsentEvent: Consent <p>One and only one of 
     * author2 (Consenter) and author1 (Provider) must be 
     * specified.</p><p>If author1 (provider) is specified, reason 
     * code must be specified.</p> <p>One and only one of author2 
     * (Consenter) and author1 (Provider) must be 
     * specified.</p><p>If author1 (provider) is specified, reason 
     * code must be specified.</p> <p>Information pertaining to a 
     * patient's (or client or provider) agreement/acceptance to 
     * have his/her clinical or demographic information 
     * electronically stored and shared.</p> <p>Provides 
     * authorization to record and/or view patient, client, or 
     * provider information.</p><p>Indicates the consent or keyword 
     * used to authorize access or update, including a reason for 
     * access; May also be used to override access restriction to 
     * the information ('break the glass') on a message by message 
     * basis. May be required on a Prescription Request to indicate 
     * a keyword for DUR processing.</p> <p>Provides authorization 
     * to record and/or view patient, client, or provider 
     * information.</p><p>Indicates the consent or keyword used to 
     * authorize access or update, including a reason for access; 
     * May also be used to override access restriction to the 
     * information ('break the glass') on a message by message 
     * basis. May be required on a Prescription Request to indicate 
     * a keyword for DUR processing.</p> <p>The keywords will not 
     * be passed from prescriber to dispenser by the DIS.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"COCT_MT470012CA.ConsentEvent","RCMR_MT010001CA.ConsentEvent"})]
    public class Consent : MessagePartBean {

        private II id;
        private CV code;
        private BL negationInd;
        private IVL<TS, Interval<PlatformDate>> effectiveTime;
        private CV reasonCode;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.ConsentedToBy author1;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.PrescribedBy author2;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Si.Rcmr_mt010001ca.InformationAccess componentPermissionToInform;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.ISubjectChoice subject1SubjectChoice;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.AccessType subject2InformDefinition;

        public Consent() {
            this.id = new IIImpl();
            this.code = new CVImpl();
            this.negationInd = new BLImpl();
            this.effectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.reasonCode = new CVImpl();
        }
        /**
         * <summary>ConsentFormNumber</summary>
         * 
         * <remarks>D:Consent Form Number <p>A unique identifier for a 
         * specific consent for a patient.</p> <p>Provides a traceable 
         * audit link between a physical consent form and its 
         * electronic record</p> D:Consent Form Number <p>A unique 
         * identifier for a specific consent for a patient, client or 
         * provider.</p> <p>Authorization.formNumber</p> <p>Provides a 
         * traceable audit link between a physical consent form and its 
         * electronic record</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier Id {
            get { return this.id.Value; }
            set { this.id.Value = value; }
        }

        /**
         * <summary>ConsentType</summary>
         * 
         * <remarks>A:Consent Type <p>Indicates the type of consent 
         * being given: Information access or Information 
         * maintenance.</p> <p>Distinguishes what type of consent is 
         * being dealt with and is therefore mandatory.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public ActConsentType Code {
            get { return (ActConsentType) this.code.Value; }
            set { this.code.Value = value; }
        }

        /**
         * <summary>ConsentRefusedIndicator</summary>
         * 
         * <remarks>B:Consent Refused Indicator <p>Must be either not 
         * present or non-null.</p> <p>If true, indicates that consent 
         * has explicitly *not* been given.</p> <p>Primarily applies 
         * for global &quot;participation&quot; consent, when there is 
         * a need to track whether the patient has consented, not 
         * consented, or has not recorded a decision.</p><p>Because not 
         * all jurisdictions will track &quot;participation&quot; 
         * consent, this attribute is optional. In jurisdictions where 
         * it is supported, the element must always be valued as either 
         * true or false.</p> <p>Primarily applies for global 
         * &quot;participation&quot; consent, when there is a need to 
         * track whether the patient has consented, not consented, or 
         * has not recorded a decision.</p><p>Because not all 
         * jurisdictions will track &quot;participation&quot; consent, 
         * this attribute is optional. In jurisdictions where it is 
         * supported, the element must always be valued as either true 
         * or false.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"negationInd"})]
        public bool? NegationInd {
            get { return this.negationInd.Value; }
            set { this.negationInd.Value = value; }
        }

        /**
         * <summary>ConsentEffectiveAndEndTime</summary>
         * 
         * <remarks>C:Consent Effective and End Time <p>Indicates the 
         * time that the consent will expire. 'Low' is effective time 
         * and 'High' is end time.</p> <p>Authorization.endTime 
         * (high)</p> <p>Most consents are not open-ended, to ensure 
         * the patient, client, or provider retains a level of 
         * control.</p> C:Consent Effective and End Time <p>Indicates 
         * the time that the consent will expire. 'Low' is effective 
         * time and 'High' is end time.</p> <p>Most consents are not 
         * open-ended, to ensure the patient retains a level of 
         * control</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> EffectiveTime {
            get { return this.effectiveTime.Value; }
            set { this.effectiveTime.Value = value; }
        }

        /**
         * <summary>ConsentOverrideReason</summary>
         * 
         * <remarks>E:Consent Override Reason <p>Indicates a reason for 
         * overriding a patient's consent rules or accessing 
         * information without consent.</p> <p>Important for audit 
         * purposes</p> E:Consent Override Reason <p>Indicates a reason 
         * for overriding a patient's (or client or provider) consent 
         * rules.</p> <p>Authorization.reason 
         * (mnemonic)</p><p>Authorization.comment (original text)</p> 
         * <p>Authorization.reason 
         * (mnemonic)</p><p>Authorization.comment (original text)</p> 
         * <p>Important for audit purposes</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"reasonCode"})]
        public ActConsentInformationAccessReason ReasonCode {
            get { return (ActConsentInformationAccessReason) this.reasonCode.Value; }
            set { this.reasonCode.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author1"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.ConsentedToBy Author1 {
            get { return this.author1; }
            set { this.author1 = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author2"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.PrescribedBy Author2 {
            get { return this.author2; }
            set { this.author2 = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component/permissionToInform"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Si.Rcmr_mt010001ca.InformationAccess ComponentPermissionToInform {
            get { return this.componentPermissionToInform; }
            set { this.componentPermissionToInform = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subject1/subjectChoice"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.ISubjectChoice Subject1SubjectChoice {
            get { return this.subject1SubjectChoice; }
            set { this.subject1SubjectChoice = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subject2/informDefinition"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.AccessType Subject2InformDefinition {
            get { return this.subject2InformDefinition; }
            set { this.subject2InformDefinition = value; }
        }

    }

}