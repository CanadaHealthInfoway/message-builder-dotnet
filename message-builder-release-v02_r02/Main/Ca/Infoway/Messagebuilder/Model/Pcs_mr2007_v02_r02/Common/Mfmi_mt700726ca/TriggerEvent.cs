/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2012-02-16 11:12:03 -0500 (Thu, 16 Feb 2012) $
 * Revision:      $LastChangedRevision: 5533 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Mfmi_mt700726ca {
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>Trigger Event</summary>
     * 
     * <remarks><p>Identifies the action that resulted in this 
     * message being sent.</p> <p>Key to understanding what action 
     * a message represents.</p> <p>There may be constraints on the 
     * usage of the effectiveTime and reasonCode attributes in the 
     * definition of the interaction or the trigger events which 
     * are conveyed with this wrapper.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"MFMI_MT700726CA.ControlActEvent"})]
    public class TriggerEvent<RR> : MessagePartBean {

        private II id;
        private CV code;
        private IVL<TS, Interval<PlatformDate>> effectiveTime;
        private CV reasonCode;
        private BL subjectContextConductionInd;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.RegisteredItem<RR> subjectRegistrationEventSubject;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.EHRRepository subjectRegistrationEventCustodianAssignedDevice;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.Replaces> subjectRegistrationEventReplacementOf;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.Issues> subjectOfDetectedIssueEvent;

        public TriggerEvent() {
            this.id = new IIImpl();
            this.code = new CVImpl();
            this.effectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.reasonCode = new CVImpl();
            this.subjectContextConductionInd = new BLImpl();
            this.subjectRegistrationEventReplacementOf = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.Replaces>();
            this.subjectOfDetectedIssueEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.Issues>();
        }
        /**
         * <summary>B:Event Identifier</summary>
         * 
         * <remarks><p>A unique identifier for this particular event 
         * assigned by the system in which the event occurred.</p> 
         * <p>Allows the event to be referenced (for undos) and also 
         * indicates whether multiple interactions were caused by the 
         * same triggering event. Also used for audit purposes.</p> 
         * <p>Identifier needs to be persisted by receiving 
         * applications, except for queries (queries cannot be 
         * retracted or undone).</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier Id {
            get { return this.id.Value; }
            set { this.id.Value = value; }
        }

        /**
         * <summary>A:Event Type</summary>
         * 
         * <remarks><p>Identifies the trigger event that occurred.</p> 
         * <p>This is mandatory because it is essential to 
         * understanding the meaning of the event.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public HL7TriggerEventCode Code {
            get { return (HL7TriggerEventCode) this.code.Value; }
            set { this.code.Value = value; }
        }

        /**
         * <summary>C:Event Effective Period</summary>
         * 
         * <remarks><p>Indicates the time the event (e.g. query, 
         * change, activation) should begin and occasionally when it 
         * should end.</p> <p>The time an event becomes effective may 
         * differ from the time the event is recorded (i.e. it may be 
         * in the future or the past). For events such as 'suspend', an 
         * intended end date may also be indicated.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> EffectiveTime {
            get { return this.effectiveTime.Value; }
            set { this.effectiveTime.Value = value; }
        }

        /**
         * <summary>E:Event Reason</summary>
         * 
         * <remarks><p>Identifies why this specific message interaction 
         * (e.g. query, activation request, modification request) 
         * occurred.</p> <p>Allows identifying a reason for a specific 
         * action, such as 'reason for hold' or 'reason for accessing 
         * information'.</p> <p>The domain associated with this 
         * attribute will vary for each interaction and will be noted 
         * as part of the interaction description.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"reasonCode"})]
        public ControlActReason ReasonCode {
            get { return (ControlActReason) this.reasonCode.Value; }
            set { this.reasonCode.Value = value; }
        }

        /**
         * <summary>Cascade Responsibility Indicator</summary>
         * 
         * <remarks><p>Indicates whether or not objects of the trigger 
         * event are to be cascaded to the payload.</p><p>If true, 
         * associations in the parent act are conducted across the 
         * ActRelationship to the message payload (act). Conduction for 
         * each association is specifically indicated by each 
         * associations' contextControlCode value.</p><p>In other 
         * words, if the &quot;subject&quot; act relationship has 
         * contextConductionInd=true; THEN the subjectOf association is 
         * carried (to the regsitrationEvent act) according to the 
         * subjectOf.contextControlCode (AP = propogate to the reg 
         * event and add to any subject(s) (issues) already 
         * present).</p> <p>Indicates whether or not objects of the 
         * trigger event are to be cascaded to the payload.</p><p>If 
         * true, associations in the parent act are conducted across 
         * the ActRelationship to the message payload (act). Conduction 
         * for each association is specifically indicated by each 
         * associations' contextControlCode value.</p><p>In other 
         * words, if the &quot;subject&quot; act relationship has 
         * contextConductionInd=true; THEN the subjectOf association is 
         * carried (to the regsitrationEvent act) according to the 
         * subjectOf.contextControlCode (AP = propogate to the reg 
         * event and add to any subject(s) (issues) already 
         * present).</p> <p>Indicates whether or not objects of the 
         * trigger event are to be cascaded to the payload.</p><p>If 
         * true, associations in the parent act are conducted across 
         * the ActRelationship to the message payload (act). Conduction 
         * for each association is specifically indicated by each 
         * associations' contextControlCode value.</p><p>In other 
         * words, if the &quot;subject&quot; act relationship has 
         * contextConductionInd=true; THEN the subjectOf association is 
         * carried (to the regsitrationEvent act) according to the 
         * subjectOf.contextControlCode (AP = propogate to the reg 
         * event and add to any subject(s) (issues) already 
         * present).</p> <p>Cascading of trigger event objects allows 
         * different messages to employ consistent and common 
         * objects.</p><p>Attribute is mandatory to ensure that 
         * cascading will be specified one way or another.</p> 
         * <p>Cascading of trigger event objects allows different 
         * messages to employ consistent and common 
         * objects.</p><p>Attribute is mandatory to ensure that 
         * cascading will be specified one way or another.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"subject/contextConductionInd"})]
        public bool? SubjectContextConductionInd {
            get { return this.subjectContextConductionInd.Value; }
            set { this.subjectContextConductionInd.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subject/registrationEvent/subject"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.RegisteredItem<RR> SubjectRegistrationEventSubject {
            get { return this.subjectRegistrationEventSubject; }
            set { this.subjectRegistrationEventSubject = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subject/registrationEvent/custodian/assignedDevice"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.EHRRepository SubjectRegistrationEventCustodianAssignedDevice {
            get { return this.subjectRegistrationEventCustodianAssignedDevice; }
            set { this.subjectRegistrationEventCustodianAssignedDevice = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subject/registrationEvent/replacementOf"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Common.Merged.Replaces> SubjectRegistrationEventReplacementOf {
            get { return this.subjectRegistrationEventReplacementOf; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf/detectedIssueEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2007_v02_r02.Merged.Issues> SubjectOfDetectedIssueEvent {
            get { return this.subjectOfDetectedIssueEvent; }
        }

    }

}