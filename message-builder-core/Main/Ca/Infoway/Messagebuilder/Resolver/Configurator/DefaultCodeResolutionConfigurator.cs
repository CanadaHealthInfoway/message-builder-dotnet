/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Resolver.Configurator {
	
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using Ca.Infoway.Messagebuilder.Terminology;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// The Class DefaultCodeResolutionConfigurator.
	/// </summary>
	///
	public class DefaultCodeResolutionConfigurator {
	
		/// <summary>
		/// Configure code resolvers with enum-based and trivial defaults.
		/// </summary>
		///
		public static void ConfigureCodeResolversWithTrivialDefault() {
	
			Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
					.RegisterResolver(
							typeof(AcknowledgementCondition),
							new EnumBasedCodeResolver(
									typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.AcknowledgementCondition)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
					.RegisterResolver(
							typeof(AcknowledgementDetailCode),
							new EnumBasedCodeResolver(
									typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.AcknowledgementDetailCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
					.RegisterResolver(
							typeof(AcknowledgementDetailType),
							new EnumBasedCodeResolver(
									typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.AcknowledgementDetailType)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
					.RegisterResolver(
							typeof(AcknowledgementType),
							new EnumBasedCodeResolver(
									typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.AcknowledgementType)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActClass),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActClass)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
					.RegisterResolver(
							typeof(ActConsentInformationAccessReason),
							new EnumBasedCodeResolver(
									typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActConsentInformationAccessReason)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActDetectedIssueCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActDetectedIssueCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActIssuePriority),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActIssuePriority)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActMood),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActMood)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActPharmacySupplyType),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.ActPharmacySupplyType)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActReason),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.ActReason)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActRelationshipSubset),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.ActRelationshipSubset)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActSpecimenTransportationCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActSpecimenTransportationCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActStatus),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActStatus)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActSubstanceAdministrationImmunizationCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActSubstanceAdministrationImmunizationCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ActSubstanceAdministrationImmunizationType),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ActSubstanceAdministrationImmunizationType)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(AdministrativeGender),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.AdministrativeGender)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(Confidentiality),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.Confidentiality)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(Country),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.Iso3166Alpha2Country)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(HL7StandardVersionCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.HL7StandardVersionCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(HL7TriggerEventCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.HL7TriggerEventCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(IssueFilterCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.IssueFilterCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(MessageWaitingPriority),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.MessageWaitingPriority)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(NullFlavor),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Nullflavor.NullFlavor)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ObservationQueryMatchType),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.ProbabilityMatchCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ParticipationMode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.ParticipationMode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ProcessingID),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.ProcessingID)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ProcessingMode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.ProcessingMode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(QueryRequestLimit),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.QuantityRequestLimit)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(QueryResponse),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.QueryResponse)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(ResponseMode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.ResponseMode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(RoleClass),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.RoleClass)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(RoleCode),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Controlact.RoleCode)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(RoleStatus),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.RoleStatus)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(RoleStatusNormal),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.RoleStatusNormal)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(SeverityObservation),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.SeverityObservation)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(State),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.State)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(SubscriptionStatus),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.SubscriptionStatus)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(TopicPriority),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.TopicPriority)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_ActMoodIntentEvent),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Transport.x_ActMoodIntentEvent)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_ActMoodOrderEvent),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Payload.x_ActMoodOrderEvent)));

            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(URLScheme),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.URLScheme)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(TelecommunicationAddressUse),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.TelecommunicationAddressUse)));

            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(UnitsOfMeasureCaseSensitive),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.UnitsOfMeasureCaseSensitive)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_BasicUnitsOfMeasure),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.UnitsOfMeasureCaseSensitive)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_DistanceObservationUnitsOfMeasure),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.X_DistanceObservationUnitsOfMeasure)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_DrugUnitsOfMeasure),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.X_DrugUnitsOfMeasure)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_HeightOrWeightObservationUnitsOfMeasure),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.X_HeightOrWeightObservationUnitsOfMeasure)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_TimeUnitsOfMeasure),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.DefaultTimeUnit)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(x_BasicPostalAddressUse),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.X_BasicPostalAddressUse)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(PostalAddressUse),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.PostalAddressUse)));
            Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry
                    .RegisterResolver(
                            typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.EntityNamePartQualifier),
                            new EnumBasedCodeResolver(
                                    typeof(Ca.Infoway.Messagebuilder.Domainvalue.Basic.EntityNamePartQualifier)));

	
			Ca.Infoway.Messagebuilder.Resolver.CodeResolverRegistry.Register(new TrivialCodeResolver());
		}
	}
}
