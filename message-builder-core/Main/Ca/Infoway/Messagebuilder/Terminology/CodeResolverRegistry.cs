/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Terminology {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// This class functions is generally used in one of two ways.  Either:
	/// <ol>
	/// <li>Register one monolithic Code Resolver that handles all lookup requests.
	/// (This approach is currently used by the HealthWatch project, and their
	/// resolver is backed by a database, and is sometimes used in test cases,
	/// in which case we're usually using the TrivialCodeResolver).
	/// To use this approach, a project should call the
	/// <c>register(cResolver)</c> method and set the <c>instance</c>
	/// static variable.</li>
	/// <li>Register one resolver for each domain interface (This approach is currently used
	/// by the eReferrals and Panacea projects).</li>
	/// </ol>
	/// Additionally, this class can automatically resolve:
	/// <ol>
	/// <li>enums; and</li>
	/// <li>classes that follow the enum pattern (having static constants -- see, for
	/// example the Country class</li>
	/// </ol>
	/// In both cases the class or enum must implement the Code interface.
	/// </summary>
	///
	public abstract class CodeResolverRegistry {
	
		private static IDictionary<Type, CodeResolver> resolvers = Ca.Infoway.Messagebuilder.CollUtils
				.SynchronizedMap(new Dictionary<Type, CodeResolver>());
		private static CodeResolver instance;
	
		/// <summary>
		/// Lookup.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="type">the type</param>
		/// <returns>the collection</returns>
		public static ICollection<T> Lookup<T>(Type type)  where T : Code {
			return GetResolver<T>(type).Lookup<T>(type);
		}
	
		/// <summary>
		/// Lookup.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="type">the type</param>
		/// <param name="code">the c</param>
		/// <returns>the t</returns>
		public static T Lookup<T>(Type type, String code)  where T : Code {
			return GetResolver<T>(type).Lookup<T>(type, code);
		}

		public static Code Lookup(Type type, String code) {
			return GetResolver<Code>(type).Lookup<Code>(type, code);
		}
		
		public static T Lookup<T>(String code)  where T : Code {
			return Lookup<T>(typeof(T), code);
		}
		
		/// <summary>
		/// Lookup.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="type">the type</param>
		/// <param name="code">the c</param>
		/// <param name="codeSystemOid">the c system oid</param>
		/// <returns>the t</returns>
		public static T Lookup<T>(Type type, String code, String codeSystemOid)  where T : Code {
			return GetResolver<T>(type).Lookup<T>(type, code, codeSystemOid);
		}

		public static T Lookup<T>(String code, String codeSystemOid)  where T : Code {
			return Lookup<T>(typeof(T), code, codeSystemOid);
		}
		
		/// <summary>
		/// Gets the resolver.
		/// </summary>
		///
		/// <param name="T"> the generic type</param>
		/// <param name="type">the type</param>
		/// <returns>the resolver</returns>
		public static CodeResolver GetResolver<T>(Type type)  where T : Code {
			if (CodeResolverRegistry.resolvers.ContainsKey(type)) {
				return ((Ca.Infoway.Messagebuilder.Terminology.CodeResolver)ILOG.J2CsMapping.Collections.Generics.Collections.Get(resolvers,type));
			} else if (Ca.Infoway.Messagebuilder.Lang.EnumPattern.IsEnum(type)) {
				return new EnumBasedCodeResolver((Type) type);
			} else if (!type.IsInterface) {
				return new EnumPatternCodeResolver();
			} else if (instance == null) {
				throw new InvalidOperationException("No code resolver established for "
						+ type.FullName + ".");
			} else {
				return instance;
			}
		}
		
		public static CodeResolver GetResolver(Type type) {		
			return GetResolver<Code>(type);
		}
		
		/// <summary>
		/// Checks if is initialized.
		/// </summary>
		///
		/// <returns>true, if is initialized</returns>
		public static bool Initialized {
		/// <summary>
		/// Checks if is initialized.
		/// </summary>
		///
		/// <returns>true, if is initialized</returns>
		  get {
				return instance != null;
			}
		}
		
	
		/// <summary>
		/// Register.
		/// </summary>
		///
		/// <param name="codeResolver">the c resolver</param>
		public static void Register(CodeResolver codeResolver) {
			instance = codeResolver;
		}
	
		/// <summary>
		/// Register resolver.
		/// </summary>
		///
		/// <param name="type">the type</param>
		/// <param name="codeResolver">the c resolver</param>
		public static void RegisterResolver(Type type,
				CodeResolver codeResolver) {
			ILOG.J2CsMapping.Collections.Generics.Collections.Put(CodeResolverRegistry.resolvers,(System.Type)(type),(Ca.Infoway.Messagebuilder.Terminology.CodeResolver)(codeResolver));
		}
	
		/// <summary>
		/// Unregister all.
		/// </summary>
		///
		public static void UnregisterAll() {
			CodeResolverRegistry.instance = null;
			CodeResolverRegistry.resolvers.Clear();
		}
	}
}
