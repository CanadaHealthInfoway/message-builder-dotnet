/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/).
///  Version 1.0.0
/// ---------------------------------------------------------------------------------------------------
using Castle.Core.Interceptor;
using Castle.DynamicProxy;

namespace Ca.Infoway.Messagebuilder.Terminology.Proxy {

       using Ca.Infoway.Messagebuilder;
       using Ca.Infoway.Messagebuilder.Terminology.Domainvalue;
       using System;
       using System.Collections.Generic;

       /// <summary>
       /// Creates an instance of Code that is assignable to a specific type.
       /// </summary>
       ///
       public class TypedCodeFactory {

            private static readonly ProxyGenerator PROXY_GENERATOR = new ProxyGenerator();

            private static readonly Type[] STANDARD_INTERFACES = new Type[] {
                typeof(Displayable),
                typeof(Sortable),
                typeof(Active),
                typeof(Common),
                typeof(Identifiable)
            };

               /// <summary>
               /// Creates the Code.
               /// </summary>
               ///
               /// <param name="type">the type</param>
               /// <param name="types">the types</param>
               /// <param name="code">the c</param>
               /// <param name="codeSystemOid">the c system oid</param>
               /// <param name="codeSystemName">the human readable name of the code system</param>
               /// <param name="displayTextMap">the display text map</param>
               /// <param name="sortValue">the sort value</param>
               /// <param name="active">the active</param>
               /// <param name="common">the common</param>
               /// <returns>the c</returns>
               public Code Create(Type type, ICollection<Type> types, String code,
                               String codeSystemOid, String codeSystemName, IDictionary<String, String> displayTextMap,
                               Int32? sortValue, Boolean? active, Boolean? common) {
                   ProxyGenerationOptions options = new ProxyGenerationOptions();
                   IList<Type> allTypes = new List<Type>(types);
                   allTypes.AddAll(STANDARD_INTERFACES);
                   object[] constructorArguments = new object[] { type, allTypes, code, codeSystemOid, codeSystemName, displayTextMap, sortValue, active, common };
                   IInterceptor[] interceptors = new IInterceptor[] {new TypedCodeMethodInterceptor()};
                   return (Code) PROXY_GENERATOR.CreateClassProxy(typeof(TypedCode), allTypes.ToArray(), options, constructorArguments, interceptors);
               }
       }
}