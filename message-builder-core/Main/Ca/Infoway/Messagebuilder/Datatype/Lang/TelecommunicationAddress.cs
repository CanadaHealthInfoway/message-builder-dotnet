/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using Ca.Infoway.Messagebuilder.Platform;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// A class to represent CeRx's notion of a telecommunication address, such as a phone
	/// number, fax, email or http address.
	/// There are several parts to an tel address, but HL7 has dumped all the relevant 
	/// information into a single text field. Urp.
	/// The first part is the URL scheme. This is something like tel: or http:. CeRx limits 
	/// these based on the subclass of TEL (TEL.PHONEMAIL or TEL.URI).
	/// There are some number of uses for each address. CeRx limits this to three, which is
	/// not enforced by this class. For the TEL.URI subclass, use is not permitted at all.
	/// http://www.hl7.org/v3ballot/html/infrastructure/itsxml/datatypes-its-xml.htm#dtimpl-TEL
	/// </summary>
	///
	public class TelecommunicationAddress {
	
		public sealed class Anonymous_C0 : 
				IComparer<Domainvalue.TelecommunicationAddressUse> {
			public int Compare(Domainvalue.TelecommunicationAddressUse o1,
					Domainvalue.TelecommunicationAddressUse o2) {
				return String.CompareOrdinal(o1.CodeValue, o2.CodeValue);
			}
	
			public Anonymous_C0() {
			}
		}
	
		private static readonly String SEPARATOR = ":";
		private static readonly String SLASHES = "//";
	
		private static readonly IList<String> URL_SCHEMES_REQUIRING_SLASHES = new List<String>();
		// add an ordering to the usage list for predictable ordering
		private ICollection<Domainvalue.TelecommunicationAddressUse> addressUses;
	
		private Domainvalue.URLScheme urlScheme;
		private String address;
	
		/// <summary>
		/// Constructs an empty telecom address.
		/// </summary>
		///
		public TelecommunicationAddress() {
			this.addressUses = new LinkedSet<Domainvalue.TelecommunicationAddressUse>();
		}
	
		/// <summary>
		/// Constructs a telecom address with a given scheme, address, and uses.
		/// </summary>
		///
		/// <param name="scheme">the url scheme for the telecom address (ftp, fax, etc.)</param>
		/// <param name="address_0">the actual "address" (phone number, etc) of the telecom address</param>
		/// <param name="uses">which uses are applicable to the given telecom address</param>
		public TelecommunicationAddress(Domainvalue.URLScheme scheme, String address_0,
				params Domainvalue.TelecommunicationAddressUse[] uses) {
			this.addressUses = new LinkedSet<Domainvalue.TelecommunicationAddressUse>();
			this.urlScheme = scheme;
			this.address = address_0;
			foreach (Domainvalue.TelecommunicationAddressUse use in uses) {
				this.addressUses.Add(use);
			}
		}
	
		/// <summary>
		/// Adds an address usage to a telecom address.
		/// </summary>
		///
		/// <param name="addressUse">an address usage</param>
		public void AddAddressUse(Domainvalue.TelecommunicationAddressUse addressUse) {
			if (addressUse != null) {
				this.addressUses.Add(addressUse);
			}
		}
	
		/// <summary>
		/// Returns all address uses for this telecom address.
		/// </summary>
		///
		/// <returns>all address uses</returns>
		public ICollection<Domainvalue.TelecommunicationAddressUse> AddressUses {
		/// <summary>
		/// Returns all address uses for this telecom address.
		/// </summary>
		///
		/// <returns>all address uses</returns>
		  get {
				return this.addressUses;
			}
		}
		
	
		/// <summary>
		/// Sets a url scheme on the telecom address.
		/// </summary>
		///
		/// <param name="urlScheme_0">a url scheme</param>
		public Domainvalue.URLScheme UrlScheme {
		/// <summary>
		/// Returns the telecom address usrl scheme.
		/// </summary>
		///
		/// <returns>the url scheme</returns>
		  get {
				return this.urlScheme;
			}
		/// <summary>
		/// Sets a url scheme on the telecom address.
		/// </summary>
		///
		/// <param name="urlScheme_0">a url scheme</param>
		  set {
				this.urlScheme = value;
			}
		}
		
	
		/// <summary>
		/// Sets the address.
		/// </summary>
		///
		/// <param name="address_0">the address</param>
		public String Address {
		/// <summary>
		/// Returns the actual address (phone number, etc) of this telecom address.
		/// </summary>
		///
		/// <returns>the address of this telecom address</returns>
		  get {
				return this.address;
			}
		/// <summary>
		/// Sets the address.
		/// </summary>
		///
		/// <param name="address_0">the address</param>
		  set {
				this.address = value;
			}
		}
		
	
		/// <summary>
		/// Formats the telecom address into a string.
		/// </summary>
		///
		/// <returns>the formatted telecom address</returns>
		public override  System.String ToString() {
			StringBuilder buffer = new StringBuilder();
			if (this.urlScheme != null) {
				buffer.Append(urlScheme.CodeValue);
				buffer.Append(SEPARATOR);
				if (URL_SCHEMES_REQUIRING_SLASHES.Contains(this.urlScheme.CodeValue)) {
					buffer.Append(SLASHES);
				}
			}
			if (this.address != null) {
				buffer.Append(this.address);
			}
			return buffer.ToString();
		}
	
		static TelecommunicationAddress() {
			URL_SCHEMES_REQUIRING_SLASHES.Add("file");
			URL_SCHEMES_REQUIRING_SLASHES.Add("ftp");
			URL_SCHEMES_REQUIRING_SLASHES.Add("http");
			URL_SCHEMES_REQUIRING_SLASHES.Add("https");
			URL_SCHEMES_REQUIRING_SLASHES.Add("mailto");
			URL_SCHEMES_REQUIRING_SLASHES.Add("nfs");
		}
	}
}
