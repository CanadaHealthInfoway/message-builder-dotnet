/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Domainvalue.Basic;
    using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Abstract super class for names.
	/// </summary>
	///
	public abstract class EntityName {

		private ICollection<EntityNameUse> uses;		
		
		public EntityName() {
			this.uses = new HashSet<EntityNameUse>();
		}
	
		/// <summary>
		/// Obtains the list of name parts.
		/// </summary>
		///
		/// <returns>the list of name parts</returns>
		public abstract IList<EntityNamePart> Parts {
		/// <summary>
		/// Obtains the list of name parts.
		/// </summary>
		///
		/// <returns>the list of name parts</returns>
		  get;
		}
		
	
		/// <summary>
		/// Replaces the set of name uses for this name.
		/// </summary>
		///
		/// <param name="uses_0">the set of name uses</param>
		public ICollection<EntityNameUse> Uses {
		/// <summary>
		/// Obtains the set of name uses for this name.
		/// </summary>
		///
		/// <returns>the set of name uses</returns>
		  get {
				return this.uses;
			}
		/// <summary>
		/// Replaces the set of name uses for this name.
		/// </summary>
		///
		/// <param name="uses_0">the set of name uses</param>
		  set {
				this.uses = value;
			}
		}
		
	
		/// <summary>
		/// Adds a name use to this name.
		/// </summary>
		///
		/// <param name="use">the name use to add</param>
		public void AddUse(EntityNameUse use) {
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(this.uses,use);
		}
	}
}
