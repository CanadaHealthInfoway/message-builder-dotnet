/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	
	/// <summary>
	/// A class to represent CeRx's notion of a physical quantity. Backs the Hl7 datatype PQ.
	/// There are two attributes of note: value (amount) and unit.
	/// The HL7 version of this class relies on the HL7 REAL, which is a
	/// re-implemented BigDecimal for all intents and purposes.
	/// </summary>
	///
	[Serializable]
	public class PhysicalQuantity {
	
		private const long serialVersionUID = 5932473836237229686L;
	
		private BigDecimal quantity;
		private Domainvalue.UnitsOfMeasureCaseSensitive unit;
	
		/// <summary>
		/// Constructs an empty physical quantity. 
		/// </summary>
		///
		public PhysicalQuantity() :
            this (null, null) {
		}
	
		/// <summary>
		/// Constructs a physical quantity based on an amount and a unit. 
		/// </summary>
		///
		/// <param name="quantity_0">an amount</param>
		/// <param name="unit_1">a unit of measurement</param>
		public PhysicalQuantity(BigDecimal quantity_0, Domainvalue.UnitsOfMeasureCaseSensitive unit_1) {
			this.quantity = quantity_0;
			this.unit = unit_1;
            Translation = new List<CodedTypeR2<Code>>();
		}
	
		/// <summary>
		/// Sets the quantity to the supplied BigDecimal value. 
		/// </summary>
		///
		/// <param name="quantity_0">the quantity as a big decimal</param>
		public BigDecimal Quantity {
		/// <summary>
		/// Returns the quantity.
		/// </summary>
		///
		/// <returns>the quantity.</returns>
		  get {
				return this.quantity;
			}
		/// <summary>
		/// Sets the quantity to the supplied BigDecimal value. 
		/// </summary>
		///
		/// <param name="quantity_0">the quantity as a big decimal</param>
		  set {
				this.quantity = value;
			}
		}
		
	
		/// <summary>
		/// Sets the units of this PQ.
		/// </summary>
		///
		/// <param name="unit_0">the units</param>
		public Domainvalue.UnitsOfMeasureCaseSensitive Unit {
		/// <summary>
		/// Obtains the units of this PQ.
		/// </summary>
		///
		/// <returns>the units</returns>
		  get {
				return this.unit;
			}
		/// <summary>
		/// Sets the units of this PQ.
		/// </summary>
		///
		/// <param name="unit_0">the units</param>
		  set {
				this.unit = value;
			}
		}

        /// <summary>
        /// Translations for this PQ
        /// </summary>
        public IList<CodedTypeR2<Code>> Translation {
            get;
            set;
        }
	
		/// <summary>
		/// Generates a hash c for this object based on its quantity and units.
		/// </summary>
		///
		/// <returns>the hashc</returns>
		public override int GetHashCode() {
			return new HashCodeBuilder()
                .Append(this.quantity)
                .Append(this.unit)
                .Append(Translation)
                .ToHashCode();
		}
	
		/// <summary>
		/// Compares the supplied object with this object to see if they are equal.
		/// </summary>
		///
		/// <param name="obj">the object to compare</param>
		/// <returns>whether the objects are equal</returns>
		public override bool Equals(Object obj) {
			if (obj == null) {
				return false;
			} else if ((Object) obj.GetType() != (Object) GetType()) {
				return false;
			} else {
				return Equals((PhysicalQuantity) obj);
			}
		}
	
		private bool Equals(PhysicalQuantity that) {
			return new EqualsBuilder()
                .Append(this.quantity, that.quantity)
                .Append(this.unit, that.unit)
                .Append(this.Translation, that.Translation)
                .IsEquals();
		}
	
		/// <summary>
		/// Converts this object to s atring.
		/// </summary>
		///
		/// <returns>a string representation of this object</returns>
		public override  System.String ToString() {
			return "" + this.quantity + " " + UnitAsString;
		}
	
		
		private String UnitAsString {
		  get {
				String unitAsString = (this.unit == null) ? "" : this.unit.ToString();
				if (Ca.Infoway.Messagebuilder.StringUtils.IsBlank(unitAsString)) {
					return "";
				} else if (Ca.Infoway.Messagebuilder.StringUtils.IsNumeric(unitAsString.Substring(0,(1)-(0)))) {
					return "(" + unitAsString + ")";
				} else {
					return unitAsString;
				}
			}
		}
		
	}
}
