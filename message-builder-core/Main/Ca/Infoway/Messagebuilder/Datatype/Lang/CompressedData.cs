/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {

    using Ca.Infoway.Messagebuilder.Datatype.Lang.Util;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	///   datatype representing the HL7 Datatype ED. (a specialized class)
	/// </summary>
	///
	public class CompressedData : EncapsulatedData {
	
		private Compression compression;
	
		/// <summary>
		/// Constructs an empty CompressedData.
		/// </summary>
		///
		public CompressedData() {
		}
	
		/// <summary>
		/// Constructs a CompressData object given the supplied parameters.
		/// </summary>
		///
		/// <param name="mediaType">a media type</param>
		/// <param name="reference">a reference</param>
		/// <param name="content">the data content</param>
		/// <param name="compression_0">a compression type</param>
		/// <param name="language_1">a language</param>
		public CompressedData(
				x_DocumentMediaType mediaType,
				String reference, byte[] content, Compression compression_0,
				String language_1) : base(mediaType, reference, language_1, content) {
			this.compression = compression_0;
		}
	
		/// <summary>
		/// Returns the compression type.
		/// </summary>
		///
		/// <returns>the compression type</returns>
		public Compression Compression {
		/// <summary>
		/// Returns the compression type.
		/// </summary>
		///
		/// <returns>the compression type</returns>
		  get {
				return this.compression;
			}
		}
	
		/// <summary>
		/// Returns the uncompressed content as a byte array.
		/// </summary>
		///
		/// <returns>the uncompressed content as a byte array</returns>
		public byte[] UncompressedContent {
		/// <summary>
		/// Returns the uncompressed content as a byte array.
		/// </summary>
		///
		/// <returns>the uncompressed content as a byte array</returns>
		  get {
				if (Gzip) {
					try {
						return Compression.Gunzip(Content);
					} catch (IOException) {
						return null;
					}
				} else {
					return Content;
				}
			}
		}
		
	
		/// <summary>
		/// Returns the compressed content as a byte array.
		/// </summary>
		///
		/// <returns>the compressed content as a byte array.</returns>
		public byte[] CompressedContent {
		/// <summary>
		/// Returns the compressed content as a byte array.
		/// </summary>
		///
		/// <returns>the compressed content as a byte array.</returns>
		  get {
				if (Gzip) {
					try {
						return Compression.Gzip(Content);
					} catch (IOException) {
						return null;
					}
				} else {
					return Content;
				}
			}
		}
		
	
		
		private bool Gzip {
		  get {
				return compression != null && Compression.GZIP.Equals(compression);
			}
		}
		
	}
}
