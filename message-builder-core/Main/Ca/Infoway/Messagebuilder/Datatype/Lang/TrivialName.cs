/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	///   datatype for TN Hl7 datatypes.
	/// A string used for simple names for things (e.g. drug names) and places (e.g. "Canada Health Infoway")
	/// </summary>
	///
	public class TrivialName : EntityName {
	
		private readonly String name;
	
		/// <summary>
		/// Constructs a trivial name based on a string.
		/// </summary>
		///
		/// <param name="name_0">the trivial name</param>
		public TrivialName(String name_0) {
			this.name = name_0;
		}
	
		/// <summary>
		/// Returns this trivial name as a list containing a single EntityNamPart.
		/// </summary>
		///
		/// <returns>this trivial name as a list of parts.</returns>
		public override IList<EntityNamePart> Parts {
		/// <summary>
		/// Returns this trivial name as a list containing a single EntityNamPart.
		/// </summary>
		///
		/// <returns>this trivial name as a list of parts.</returns>
		  get {
				if (this.name == null) {
					return new List<EntityNamePart>();
				} else {
					return ILOG.J2CsMapping.Collections.Generics.Arrays.AsList(new EntityNamePart(this.name));
				}
			}
		}
		
	
		/// <summary>
		/// Returns this trivial name formatted as a string.
		/// </summary>
		///
		/// <returns>this trivial name formatted as a string</returns>
		public override  System.String ToString() {
			return Name;
		}
	
		/// <summary>
		/// Returns the underlying string representing this trivial name.
		/// </summary>
		///
		/// <returns>the underlying string representing this trivial name.</returns>
		public String Name {
		/// <summary>
		/// Returns the underlying string representing this trivial name.
		/// </summary>
		///
		/// <returns>the underlying string representing this trivial name.</returns>
		  get {
				return this.name;
			}
		}
		
	}
}
