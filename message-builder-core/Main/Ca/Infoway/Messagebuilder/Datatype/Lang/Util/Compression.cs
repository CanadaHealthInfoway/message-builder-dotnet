/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang.Util {
	
	using Ca.Infoway.Messagebuilder.Lang;
	using ILOG.J2CsMapping.IO;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
    using System.IO.Compression;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// DF | GZ | ZL One of these values have to be used if content is compressed
	/// (zipped). It is up to implementation organization to decide which format to
	/// use. Most likely DF will be acceptable value.
	/// DF - deflate. The "deflate" compressed data format as specified in RFC 1951
	/// [http://www.ietf.org/rfc/rfc1951.txt].
	/// GZ - gzip. A compressed data format that is compatible with the widely used
	/// GZIP utility as specified in RFC 1952 [http://www.ietf.org/rfc/rfc1952.txt]
	/// ZL - zlib indifferent. A compressed data format that also uses the "deflate"
	/// algorithm. Specified as RFC 1950 [http://www.ietf.org/rfc/rfc1952.txt]
	/// </summary>
	///
	[Serializable]
	public class Compression : EnumPattern {
	
		private const long serialVersionUID = 2463751994500229084L;
	
		public static readonly Compression DEFLATE = new Compression("DEFLATE", "DF");
		public static readonly Compression GZIP = new Compression("GZIP", "GZ");
		public static readonly Compression ZLIB = new Compression("ZLIB", "ZL");
        public static readonly Compression Z = new Compression("Z", "Z");
	
		private readonly String compressionType;
	
		private Compression(String name, String compressionType_0) : base(name) {
			this.compressionType = compressionType_0;
		}

        static Compression() { }
	
		/// <summary>
		/// Returns the compression type.
		/// </summary>
		///
		/// <returns>the compression type</returns>
		public String CompressionType {
		/// <summary>
		/// Returns the compression type.
		/// </summary>
		///
		/// <returns>the compression type</returns>
		  get {
				return this.compressionType;
			}
		}
		
	
		/// <summary>
		/// GZIPs a byte array of data.
		/// </summary>
		///
		/// <param name="bytes">the content  to gzip</param>
		/// <returns>the zipped input as a byte array</returns>
		/// <exception cref="IOException if an error occurred generating the byte array"/>
		public static byte[] Gzip(byte[] bytes) {
			if (bytes != null) {
                MemoryStream ms = new MemoryStream();

                using (Stream es = new GZipStream(ms, CompressionMode.Compress))
                {
                    es.Write(bytes, 0, bytes.Length);
                }

                return ms.ToArray();
			}
			return null;
		}
	
		/// <summary>
		/// GUNZIPs a byte array of data.
		/// </summary>
		///
		/// <param name="bytes">the content to gunzip</param>
		/// <returns>the unzipped input as a byte array</returns>
		/// <exception cref="IOException if an error occurred generating the byte array"/>
		public static byte[] Gunzip(byte[] bytes) {
			if (bytes != null) {
                MemoryStream output = new MemoryStream();

                byte[] buffer = new byte[1024];
                int len;

                using (Stream ds = new GZipStream(new MemoryStream(bytes), CompressionMode.Decompress))
                {
                    while (0 < (len = ds.Read(buffer, 0, buffer.Length)))
                        output.Write(buffer, 0, len);
                }

                output.Close();

                return output.ToArray();
			}
			return null;
		}
	
		/// <summary>
		/// Returns a Compression enum that is applicable for the input string.
		/// </summary>
		///
		/// <param name="compressionType_0">a compression type as a string</param>
		/// <returns>a Compression enum that matches the input string</returns>
		public static Compression Get(String compressionType_0) {
			Compression result = null;
			/* foreach */
			foreach (Compression compression  in  Ca.Infoway.Messagebuilder.Lang.EnumPattern.Values<Compression>(typeof(Compression))) {
				if (compression.CompressionType.Equals(compressionType_0)) {
					result = compression;
					break;
				}
			}
			return result;
		}
	}
}
