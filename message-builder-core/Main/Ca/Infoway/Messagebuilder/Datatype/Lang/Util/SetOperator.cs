/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-17 11:48:36 -0400 (Tue, 17 May 2011) $
 * Revision:      $LastChangedRevision: 2666 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Datatype.Lang.Util {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Lang;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Set Operator enum.
	/// </summary>
	///
	[Serializable]
	public class SetOperator : EnumPattern, Code {
	
		private const long serialVersionUID = 3137851858955816030L;
	
		public static readonly SetOperator CONVEX_HULL = new SetOperator(
				"CONVEX_HULL", "H");
		public static readonly SetOperator INCLUDE = new SetOperator("INCLUDE", "I");
		public static readonly SetOperator EXCLUDE = new SetOperator("EXCLUDE", "E");
		public static readonly SetOperator INTERSECT = new SetOperator("INTERSECT",
				"A");
		public static readonly SetOperator PERIODIC_HULL = new SetOperator(
				"PERIODIC_HULL", "P");
	
		private readonly String codeValue;

        public static SetOperator FindMatchingOperator(String operatorString) {
            SetOperator result = null;
            foreach (SetOperator setOperator in EnumPattern.Values<SetOperator>(typeof(SetOperator))) {
                if (setOperator.CodeValue.Equals(operatorString)) {
                    result = setOperator;
                    break;
                }
            }
            return result;
        }
	
		private SetOperator(String name, String codeValue_0) : base(name) {
			this.codeValue = codeValue_0;
		}

        static SetOperator() { }
	
		/// <summary>
		/// Returns an empty string for the c system.
		/// </summary>
		///
		/// <returns>the c system for this enum (empty string)</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns an empty string for the c system.
		/// </summary>
		///
		/// <returns>the c system for this enum (empty string)</returns>
		  get {
				return "";
			}
		}
		
	
		/// <summary>
		/// Returns the value of this enum.
		/// </summary>
		///
		/// <returns>the value of this enum.</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the value of this enum.
		/// </summary>
		///
		/// <returns>the value of this enum.</returns>
		  get {
				return this.codeValue;
			}
		}

        public virtual String CodeSystemName {
            get { return null; }
        }
		
	}
}
