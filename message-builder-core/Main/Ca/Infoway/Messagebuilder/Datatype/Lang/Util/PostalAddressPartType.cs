/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Datatype.Lang.Util {
	
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using Ca.Infoway.Messagebuilder.Lang;
    using ILOG.J2CsMapping.Collections.Generics;
    using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Enum for Postal Address part Types.
	/// </summary>
	///
	[Serializable]
	public class PostalAddressPartType : EnumPattern, NamePartType,
			AddressPartType {
	
		private const long serialVersionUID = 6553215353191315355L;

        /// <summary>
        /// x_BasicAddressPartType
        /// </summary>
		public static readonly PostalAddressPartType DELIMITER = new PostalAddressPartType(
				"DELIMITER", "DEL", "delimiter");
		public static readonly PostalAddressPartType COUNTRY = new PostalAddressPartType(
				"COUNTRY", "CNT", "country");
        public static readonly PostalAddressPartType CITY = new PostalAddressPartType(
                "CITY", "CTY", "city");
        public static readonly PostalAddressPartType STATE = new PostalAddressPartType(
				"STATE", "STA", "state");
        public static readonly PostalAddressPartType POSTAL_CODE = new PostalAddressPartType(
                "POSTAL_CODE", "ZIP", "postalCode");

        /// <summary>
        /// x_FullAddressPartType (also includes the above)
        /// </summary>
        public static readonly PostalAddressPartType STREET_ADDRESS_LINE = new PostalAddressPartType(
				"STREET_ADDRESS_LINE", "SAL", "streetAddressLine");
        public static readonly PostalAddressPartType ADDITIONAL_LOCATOR = new PostalAddressPartType(
                "ADDITIONAL_LOCATOR", "ADL", "additionalLocator");
        public static readonly PostalAddressPartType HOUSE_NUMBER_NUMERIC = new PostalAddressPartType(
                "HOUSE_NUMBER_NUMERIC", "BNN", "houseNumberNumeric");
        public static readonly PostalAddressPartType HOUSE_NUMBER = new PostalAddressPartType(
				"HOUSE_NUMBER", "BNR", "houseNumber");
        public static readonly PostalAddressPartType BUILDING_NUMBER_SUFFIX = new PostalAddressPartType(
                "BUILDING_NUMBER_SUFFIX", "BNS", "buildingNumberSuffix");
        public static readonly PostalAddressPartType DIRECTION = new PostalAddressPartType(
                "DIRECTION", "DIR", "direction");
        public static readonly PostalAddressPartType STREET_NAME_BASE = new PostalAddressPartType(
                "STREET_NAME_BASE", "STB", "streetNameBase");
        public static readonly PostalAddressPartType STREET_NAME = new PostalAddressPartType(
                "STREET_NAME", "STR", "streetName");
        public static readonly PostalAddressPartType STREET_NAME_TYPE = new PostalAddressPartType(
                "STREET_NAME_TYPE", "STTYP", "streetNameType");
		public static readonly PostalAddressPartType UNIT_ID = new PostalAddressPartType(
				"UNIT_ID", "UNID", "unitID");
		public static readonly PostalAddressPartType UNIT_TYPE = new PostalAddressPartType(
				"UNIT_TYPE", "UNIT", "unitType");

        /// <summary>
        /// other values that CHI datatype schemas list as valid
        /// </summary>
        public static readonly PostalAddressPartType COUNTY = new PostalAddressPartType(
                "COUNTY", "CPA", "county");
        public static readonly PostalAddressPartType CARE_OF = new PostalAddressPartType(
				"CARE_OF", "CAR", "careOf");
		public static readonly PostalAddressPartType CENSUS_TRACT = new PostalAddressPartType(
				"CENSUS_TRACT", "CEN", "censusTract");
		public static readonly PostalAddressPartType DELIVERY_ADDRESS_LINE = new PostalAddressPartType(
				"DELIVERY_ADDRESS_LINE", "DAL", "deliveryAddressLine");
		public static readonly PostalAddressPartType DELIVERY_INSTALLATION_TYPE = new PostalAddressPartType(
				"DELIVERY_INSTALLATION_TYPE", "DINST", "deliveryInstallationType");
		public static readonly PostalAddressPartType DELIVERY_INSTALLATION_AREA = new PostalAddressPartType(
				"DELIVERY_INSTALLATION_AREA", "DINSTA", "deliveryInstallationArea");
		public static readonly PostalAddressPartType DELIVERY_INSTALLATION_QUALIFIER = new PostalAddressPartType(
				"DELIVERY_INSTALLATION_QUALIFIER", "DINSTQ",
				"deliveryInstallationQualifier");
		public static readonly PostalAddressPartType DELIVERY_MODE = new PostalAddressPartType(
				"DELIVERY_MODE", "DMOD", "deliveryMode");
		public static readonly PostalAddressPartType DELIVERY_MODE_IDENTIFIER = new PostalAddressPartType(
				"DELIVERY_MODE_IDENTIFIER", "DMODID", "deliveryModeIdentifier");
		public static readonly PostalAddressPartType POST_BOX = new PostalAddressPartType(
				"POST_BOX", "POB", "postBox");
		public static readonly PostalAddressPartType PRECINCT = new PostalAddressPartType(
				"PRECINCT", "PRE", "precinct");
		public static readonly PostalAddressPartType INTERSECTION = new PostalAddressPartType(
				"INTERSECTION", "INT", "intersection");
	
        private static readonly ILOG.J2CsMapping.Collections.Generics.ISet<PostalAddressPartType> basicPartTypes;
        private static readonly ILOG.J2CsMapping.Collections.Generics.ISet<PostalAddressPartType> fullPartTypes;

        private readonly String value_ren;
		private readonly String codeValue;
	
		private PostalAddressPartType(String name, String codeValue_0, String value_ren) : base(name) {
			this.codeValue = codeValue_0;
			this.value_ren = value_ren;
		}

        static PostalAddressPartType() {
            ILOG.J2CsMapping.Collections.Generics.ISet<PostalAddressPartType> set1 = new HashedSet<PostalAddressPartType>();
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set1, DELIMITER);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set1, CITY);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set1, STATE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set1, POSTAL_CODE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set1, COUNTRY);

            basicPartTypes = ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(set1);

            ILOG.J2CsMapping.Collections.Generics.ISet<PostalAddressPartType> set2 = new HashedSet<PostalAddressPartType>();
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, DELIMITER);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, CITY);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, STATE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, POSTAL_CODE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, COUNTRY);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, STREET_ADDRESS_LINE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, ADDITIONAL_LOCATOR);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, HOUSE_NUMBER_NUMERIC);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, HOUSE_NUMBER);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, BUILDING_NUMBER_SUFFIX);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, DIRECTION);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, STREET_NAME_BASE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, STREET_NAME);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, STREET_NAME_TYPE);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, UNIT_ID);
            ILOG.J2CsMapping.Collections.Generics.Collections.Add(set2, UNIT_TYPE);

            fullPartTypes = ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(set2);
        }
	
		/// <summary>
		/// This is the label that appears as the element name when the address is 
		/// rendered into XML.
		/// </summary>
		///
		/// <returns>the enum value</returns>
		public virtual String Value {
		/// <summary>
		/// This is the label that appears as the element name when the address is 
		/// rendered into XML.
		/// </summary>
		///
		/// <returns>the enum value</returns>
		  get {
				return this.value_ren;
			}
		}
		
	
		/// <summary>
		/// Returns the c system for the address part type enum.
		/// </summary>
		///
		/// <returns>the c system for the address part type enum</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns the c system for the address part type enum.
		/// </summary>
		///
		/// <returns>the c system for the address part type enum</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Codesystem.CodeSystem.VOCABULARY_ADDRESS_PART_TYPE.Root;
			}
		}
		
	
		/// <summary>
		/// Returns the c value for the address part type enum.
		/// </summary>
		///
		/// <returns>the c value for the address part type enum</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the c value for the address part type enum.
		/// </summary>
		///
		/// <returns>the c value for the address part type enum</returns>
		  get {
				return this.codeValue;
			}
		}

        public virtual String CodeSystemName {
            get { return null; }
        }

        public static bool IsBasicAddressPartType(PostalAddressPartType partToCheck)
        {
            return basicPartTypes.Contains(partToCheck);
        }

        public static bool IsFullAddressPartType(PostalAddressPartType partToCheck)
        {
            return fullPartTypes.Contains(partToCheck);
        }
		
	}
}
