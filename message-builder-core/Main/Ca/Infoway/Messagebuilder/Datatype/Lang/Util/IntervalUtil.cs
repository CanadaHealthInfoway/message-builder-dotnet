/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-26 09:35:09 -0400 (Mon, 26 Sep 2011) $
 * Revision:      $LastChangedRevision: 3016 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang.Util {
	
	using Ca.Infoway.Messagebuilder.Datatype.Lang;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A utility class for handling the Date Interval   datatype.
	/// </summary>
	///
	public class IntervalUtil {
	
		/// <summary>
		/// Determines whether an interval contains a point in time. The interval need not have
		/// high and low bounds specified.
		/// </summary>
		///
		/// <param name="dateInterval">the interval to check</param>
		/// <param name="date">the date to apply to the given interval</param>
		/// <returns>whether the supplied interval contains the supplied date</returns>
		public static bool Contains(Interval<Ca.Infoway.Messagebuilder.PlatformDate> dateInterval, Ca.Infoway.Messagebuilder.PlatformDate date) {
			if (dateInterval == null) {
				return false;
			} else if (date == null) {
				return true;
			} else {
				Ca.Infoway.Messagebuilder.PlatformDate low = dateInterval.Low;
				Ca.Infoway.Messagebuilder.PlatformDate high = dateInterval.High;
				return (low != null || high != null)
						&& (low == null || low.Time <= date.Time)
						&& (high == null || high.Time >= date.Time);
			}
		}
	
		/// <summary>
		/// Determines if one interval is fully contained within another interval.
		/// The comparison of intervals with the representation PERIOD, WIDTH, PHASE, PERIOD_PHASE,
		/// is not supported.
		/// </summary>
		///
		/// <param name="interval">the interval to check</param>
		/// <param name="otherInterval">the interval to apply to the date interval</param>
		/// <returns>whether the "other" interval is contained within the "date" interval</returns>
		public static bool Contains(Interval<Ca.Infoway.Messagebuilder.PlatformDate> interval,
				Interval<Ca.Infoway.Messagebuilder.PlatformDate> otherInterval) {
			if (interval == null) {
				return false;
			} else if (otherInterval == null) {
				return true;
			} else {
				long low = GetLow(interval);
				long high = GetHigh(interval);
	
				long otherLow = GetLow(otherInterval);
				long otherHigh = GetHigh(otherInterval);
	
				return low <= otherLow && high >= otherHigh;
			}
		}
	
		/// <summary>
		/// Determines if one interval is fully outside the bounds of another interval.
		/// </summary>
		///
		/// <param name="interval">the interval to check</param>
		/// <param name="otherInterval">the interval to apply to the date interval</param>
		/// <returns>whether the "other" interval is fully outside the "date" interval</returns>
		public static bool MutuallyExclusive(Interval<Ca.Infoway.Messagebuilder.PlatformDate> interval,
				Interval<Ca.Infoway.Messagebuilder.PlatformDate> otherInterval) {
			if (interval == null) {
				return false;
			} else if (otherInterval == null) {
				return true;
			} else {
				long low = GetLow(interval);
				long high = GetHigh(interval);
	
				long otherLow = GetLow(otherInterval);
				long otherHigh = GetHigh(otherInterval);
	
				return high < otherLow || otherHigh < low;
			}
		}
	
		/// <summary>
		/// Determines if the current date is contained within a given date interval.
		/// </summary>
		///
		/// <param name="validTime">the interval to check</param>
		/// <returns>whether the current date is within the supplied interval</returns>
		public static bool ContainsCurrentDate(Interval<Ca.Infoway.Messagebuilder.PlatformDate> validTime) {
			if (validTime == null) {
				return true;
			} else {
				long now = DateTime.Now.Millisecond;
				long low = (validTime.Low == null) ? Int64.MinValue : validTime.Low.Time;
				long high = (validTime.High == null) ? Int64.MaxValue
						: validTime.High.Time;
				return now < high && now > low;
			}
		}
	
		/// <summary>
		/// Constructs a data interval from an upper and lower date range.
		/// </summary>
		///
		/// <param name="from">the low bound of the interval. May be null.</param>
		/// <param name="to">the high bound of the interval. May be null.</param>
		/// <returns>an interval corresponding to the given bounds.</returns>
		public static Interval<T> CreateInterval<T>(T from, T to) {
			if (from != null && to != null) {
				return Ca.Infoway.Messagebuilder.Datatype.Lang.Interval<T>.CreateLowHigh<T>(from, to);
			} else if (from != null) {
				return Ca.Infoway.Messagebuilder.Datatype.Lang.Interval<T>.CreateLow<T>(from);
			} else if (to != null) {
				return Ca.Infoway.Messagebuilder.Datatype.Lang.Interval<T>.CreateHigh<T>(to);
			} else {
				return null;
			}
		}
	
		private static long GetHigh(Interval<Ca.Infoway.Messagebuilder.PlatformDate> interval) {
			Ca.Infoway.Messagebuilder.PlatformDate high = interval.High;
			if (high == null) {
				if (Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.LOW.Equals(interval.Representation)) {
					return Int64.MaxValue;
				} else if (Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.SIMPLE.Equals(interval.Representation)) {
					return interval.Value.Time;
				} else if (Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.CENTRE.Equals(interval.Representation)) {
					return interval.Centre.Time;
				} else {
					return Int64.MinValue;
				}
			}
			return high.Time;
		}
	
		private static long GetLow(Interval<Ca.Infoway.Messagebuilder.PlatformDate> interval) {
			Ca.Infoway.Messagebuilder.PlatformDate low = interval.Low;
			if (low == null) {
				if (Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.HIGH.Equals(interval.Representation)) {
					return Int64.MinValue;
				} else if (Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.SIMPLE.Equals(interval.Representation)) {
					return interval.Value.Time;
				} else if (Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.CENTRE.Equals(interval.Representation)) {
					return interval.Centre.Time;
				} else {
					return Int64.MaxValue;
				}
			}
			return low.Time;
		}
	
	}
}
