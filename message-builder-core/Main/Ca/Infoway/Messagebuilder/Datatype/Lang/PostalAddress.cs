/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Domainvalue;
	using System;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
    using Ca.Infoway.Messagebuilder.Datatype.Lang.Util;
	
	/// <summary>
	///   datatype for AD Hl7 datatype. 
	/// http://www.hl7.org/v3ballot/html/infrastructure/itsxml/datatypes-its-xml.htm#dtimpl-AD
	/// </summary>
	///
	public class PostalAddress {
	
        private ISet<PostalAddressUse> uses;
		private readonly IList<PostalAddressPart> parts;

        public PostalAddress()
        {
            this.uses = new HashSet<PostalAddressUse>();
            this.parts = Ca.Infoway.Messagebuilder.CollUtils.SynchronizedList(new List<PostalAddressPart>());
            UseablePeriods = new Dictionary<PlatformDate, SetOperator>();
        }

        /// <summary>
		/// Replaces the postal address' set of uses.
		/// </summary>
		///
		/// <param name="uses_0">set of postal address uses</param>
        public ICollection<PostalAddressUse> Uses
        {
		/// <summary>
		/// Obtains the postal address' set of uses.
		/// </summary>
		///
		/// <returns>set of postal address uses</returns>
		  get {
				return this.uses;
			}
		/// <summary>
		/// Replaces the postal address' set of uses.
		/// </summary>
		///
		/// <param name="uses_0">set of postal address uses</param>
		  set {
				this.uses = new HashSet<PostalAddressUse>();
                this.uses.AddAll(value);
			}
		}
		
	
		/// <summary>
		/// Adds a postal address use.
		/// </summary>
		///
		/// <param name="use">a postal address use</param>
        public void AddUse(PostalAddressUse use) {
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(this.uses,use);
		}
	
		/// <summary>
		/// Obtains the list of postal address parts for this postal address.
		/// </summary>
		///
		/// <returns>list of postal address parts</returns>
		public IList<PostalAddressPart> Parts {
		/// <summary>
		/// Obtains the list of postal address parts for this postal address.
		/// </summary>
		///
		/// <returns>list of postal address parts</returns>
		  get {
				return this.parts;
			}
		}
		
	
		/// <summary>
		/// Add a part to this postal address.
		/// </summary>
		///
		/// <param name="postalAddressPart">the part to add</param>
		public void AddPostalAddressPart(PostalAddressPart postalAddressPart) {
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(this.parts,postalAddressPart);
		}

        // Added for R2 usage only

        /// <summary>
        /// Useable periods or the given telecom address. The periods will be sorted internally.
        /// </summary>
        public IDictionary<PlatformDate, SetOperator> UseablePeriods {
            get;
            private set;
        }

        /// <summary>
        /// Convenience method for adding a period and inclusive operator.
        /// </summary>
        /// <param name="periodInTime"></param>
        /// <param name="setOperator"></param>
        /// <returns>whether the added period replaced an existing period</returns>
        public bool AddUseablePeriod(PlatformDate periodInTime, SetOperator setOperator) {
            // leave it up to the user to worry about a given time replacing an existing one
            SetOperator previousValue = UseablePeriods.ContainsKey(periodInTime) ? UseablePeriods[periodInTime] : null;
            UseablePeriods.Add(periodInTime, setOperator == null ? SetOperator.INCLUDE : setOperator);
            return previousValue != null;
        }

        public Boolean? IsNotOrdered {
            get;
            set;
        }
    
        public override int GetHashCode()
        {
            return new HashCodeBuilder()
		            .Append(this.uses)
		            .Append(this.parts)
                    .Append(UseablePeriods)
                    .Append(IsNotOrdered)
                    .ToHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            else if (obj.GetType() != GetType())
            {
                return false;
            } else {
                return Equals((PostalAddress) obj);
            }
        }

        private bool Equals(PostalAddress that)
        {
            return new EqualsBuilder()
                .Append(this.uses, that.uses)
                .Append(this.parts, that.parts)
                .Append(this.UseablePeriods, that.UseablePeriods)
                .Append(this.IsNotOrdered, that.IsNotOrdered)
                .IsEquals();
        }
    
	}
}
