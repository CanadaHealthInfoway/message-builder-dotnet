/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	
	/// <summary>
	/// This   datatype is used to back the HL7 datatype IVL.
	/// This data type is used when a continuous range needs to be expressed.
	/// </summary>
	///
	/// <param name="T"> the underlying   type of the interval (i.e. Date)</param>
	public class Interval<T> : SetComponent<T> {
	
		private readonly T low;
		private readonly T high;
		private readonly T centre;
		private readonly Diff<T> width;
		private readonly Representation representation;
	
		internal Interval(T low_0, T high_1, T centre_2, Diff<T> width_3,
				Representation representation_4) {
			this.low = low_0;
			this.high = high_1;
			this.centre = centre_2;
			this.width = width_3;
			this.representation = representation_4;
		}
	
		internal Interval(T value_ren) : base(value_ren) {
			this.low =  default(T)/* was: null */;
			this.high =  default(T)/* was: null */;
			this.centre =  default(T)/* was: null */;
			this.width = null;
			this.representation = Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.SIMPLE;
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="low_0">the low bound</param>
		/// <param name="high_1">the high bound</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateLowHigh<TS>(TS low_0, TS high_1) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(low_0);
			Ca.Infoway.Messagebuilder.Validate.NotNull(high_1);
			return new Interval<TS>(low_0, high_1, Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Average(low_0, high_1),
					Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Diff<TS>(low_0, high_1), Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.LOW_HIGH);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="low_0">the low bound</param>
		/// <param name="width_1">the width as a Diff object</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateLowWidth<TS>(TS low_0, Diff<TS> width_1) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(low_0);
			Ca.Infoway.Messagebuilder.Validate.NotNull(width_1);
			TS high_2 = Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Add(low_0, width_1);
			return new Interval<TS>(low_0, high_2, Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Average(low_0, high_2),
					width_1, Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.LOW_WIDTH);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="width_0">the width as a Diff object</param>
		/// <param name="high_1">the high bound</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateWidthHigh<TS>(Diff<TS> width_0, TS high_1) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(width_0);
			Ca.Infoway.Messagebuilder.Validate.NotNull(high_1);
			TS low_2 = Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Diff<TS>(width_0.Value, high_1).Value;
			return new Interval<TS>(low_2, high_1, Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Average(low_2, high_1),
					width_0, Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.WIDTH_HIGH);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="centre_0">the centre bound</param>
		/// <param name="width_1">the width as a Diff object</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateCentreWidth<TS>(TS centre_0, Diff<TS> width_1) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(centre_0);
			Ca.Infoway.Messagebuilder.Validate.NotNull(width_1);
			TS half = Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Half(width_1.Value);
			TS low_2 = Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Diff<TS>(half, centre_0).Value;
			TS high_3 = Ca.Infoway.Messagebuilder.Datatype.Lang.GenericMath.Add(low_2, width_1);
			return new Interval<TS>(low_2, high_3, centre_0, width_1,
					Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.CENTRE_WIDTH);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="low_0">the low bound</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateLow<TS>(TS low_0) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(low_0);
			return new Interval<TS>(low_0, default(TS), default(TS), null, Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.LOW);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="width_0">the width as a Diff object</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateWidth<TS>(Diff<TS> width_0) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(width_0);
            return new Interval<TS>(default(TS), default(TS), default(TS), width_0, Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.WIDTH);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="high_0">the high bound</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateHigh<TS>(TS high_0) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(high_0);
            return new Interval<TS>(default(TS), high_0, default(TS), null, Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.HIGH);
		}
	
		/// <summary>
		/// Constructs an Interval using the supplied parameters.
		/// </summary>
		///
		/// <param name="TS"> the   type of the interval</param>
		/// <param name="centre_0">the centre bound</param>
		/// <returns>the constructed interval</returns>
		public static Interval<TS> CreateCentre<TS>(TS centre_0) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(centre_0);
            return new Interval<TS>(default(TS), default(TS), centre_0, null, Ca.Infoway.Messagebuilder.Datatype.Lang.Representation.CENTRE);
		}
	
		/// <summary>
		/// Returns the centre of this interval.
		/// </summary>
		///
		/// <returns>the centre of this interval</returns>
		public T Centre {
		/// <summary>
		/// Returns the centre of this interval.
		/// </summary>
		///
		/// <returns>the centre of this interval</returns>
		  get {
				return this.centre;
			}
		}
		
	
		/// <summary>
		/// Returns the width of this interval as a Diff.
		/// </summary>
		///
		/// <returns>the width of this interval as a Diff.</returns>
		public Diff<T> Width {
		/// <summary>
		/// Returns the width of this interval as a Diff.
		/// </summary>
		///
		/// <returns>the width of this interval as a Diff.</returns>
		  get {
				return this.width;
			}
		}
		
	
		/// <summary>
		/// Returns the high of this interval.
		/// </summary>
		///
		/// <returns>the high of this interval.</returns>
		public T High {
		/// <summary>
		/// Returns the high of this interval.
		/// </summary>
		///
		/// <returns>the high of this interval.</returns>
		  get {
				return this.high;
			}
		}
		
	
		/// <summary>
		/// Returns the low of this interval.
		/// </summary>
		///
		/// <returns>the low of this interval.</returns>
		public T Low {
		/// <summary>
		/// Returns the low of this interval.
		/// </summary>
		///
		/// <returns>the low of this interval.</returns>
		  get {
				return this.low;
			}
		}
		
	
		/// <summary>
		/// Returns the representation of this interval.
		/// </summary>
		///
		/// <returns>the representation of this interval.</returns>
		public Representation Representation {
		/// <summary>
		/// Returns the representation of this interval.
		/// </summary>
		///
		/// <returns>the representation of this interval.</returns>
		  get {
				return this.representation;
			}
		}
		
	
		/// <summary>
		/// Constructs a simple interval based on a single value.
		/// </summary>
		///
		/// <param name="TS"> the type of the Interval</param>
		/// <param name="value">the simple value for the Interval</param>
		/// <returns>the constructed Interval</returns>
		public static Interval<TS> CreateSimple<TS>(TS value_ren) {
			Ca.Infoway.Messagebuilder.Validate.NotNull(value_ren);
			return new Interval<TS>(value_ren);
		}
	}
}
