/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	
	/// <summary>
	/// An instance identifier. Backs the HL7 datatype II.
	/// An identifier that uniquely identifies a thing or object. Examples are object 
	/// identifier for HL7 RIM objects, medical record number, order id, service catalog 
	/// item id, Vehicle Identification Number (VIN), etc. Instance identifiers are 
	/// defined based on ISO object identifiers. 
	/// </summary>
	///
	[Serializable]
	public class Identifier {
	
		private const long serialVersionUID = -3182973493107028067L;
		private String root;
		private String extension;
        private String version;
	
		/// <summary>
		/// Constructs an empty identifier.
		/// </summary>
		///
		public Identifier() {
		}
	
		/// <summary>
		/// Constructs an Identifier with the supplied parameters.
		/// </summary>
		///
		/// <param name="oid">the csystem</param>
		/// <param name="extension_0">the extension</param>
		public Identifier(Oid oid, String extension_0) : this((oid == null) ? null : oid.Root, extension_0, null) {
		}

        /// <summary>
        /// Constructs an Identifier with the supplied parameters.
        /// </summary>
        ///
        /// <param name="oid">the csystem</param>
        /// <param name="extension_0">the extension</param>
        /// <param name="version_1">the version</param>
        public Identifier(Oid oid, String extension_0, String version_1)
            : this((oid == null) ? null : oid.Root, extension_0, version_1)
        {
        }

        /// <summary>
		/// Constructs an Identifier with the supplied parameters.
		/// </summary>
		///
		/// <param name="root_0">the root</param>
		/// <param name="extension_1">the extension</param>
		public Identifier(String root_0, String extension_1) : this(root_0, extension_1, null) 
        {
		}

        /// <summary>
        /// Constructs an Identifier with the supplied parameters.
        /// </summary>
        ///
        /// <param name="root_0">the root</param>
        /// <param name="extension_1">the extension</param>
        /// <param name="version_2">the version</param>
        public Identifier(String root_0, String extension_1, String version_2) {
            this.root = root_0;
            this.extension = extension_1;
            this.version = version_2;
        }

		/// <summary>
		/// Constructs an Identifier with the supplied parameters.
		/// </summary>
		///
		/// <param name="root_0">the root</param>
		public Identifier(String root_0) : this(root_0, null) {
		}
	
		/// <summary>
		/// Sets the extension.
		/// </summary>
		///
		/// <param name="extension_0">the extension</param>
		public String Extension {
		/// <summary>
		/// Returns the extension.
		/// </summary>
		///
		/// <returns>the extension</returns>
		  get {
				return extension;
			}
		/// <summary>
		/// Sets the extension.
		/// </summary>
		///
		/// <param name="extension_0">the extension</param>
		  set {
				this.extension = value;
			}
		}

        /// <summary>
        /// Sets the version.
        /// </summary>
        ///
        /// <param name="version_0">the version</param>
        public String Version
        {
            /// <summary>
            /// Returns the version.
            /// </summary>
            ///
            /// <returns>the version</returns>
            get
            {
                return version;
            }
            /// <summary>
            /// Sets the version.
            /// </summary>
            ///
            /// <param name="version_0">the version</param>
            set
            {
                this.version = value;
            }
        }
		
	
		/// <summary>
		/// Sets the root.
		/// </summary>
		///
		/// <param name="root_0">the root.</param>
		public String Root {
		/// <summary>
		/// Returns the root.
		/// </summary>
		///
		/// <returns>the root</returns>
		  get {
				return root;
			}
		/// <summary>
		/// Sets the root.
		/// </summary>
		///
		/// <param name="root_0">the root.</param>
		  set {
				this.root = value;
			}
		}

        /// <summary>
        /// The assigning authority name (only applicable for R2 datatype version)
        /// </summary>
        public String AssigningAuthorityName {
            get;
            set;
        }

        /// <summary>
        /// The displayable value (only applicable for R2 datatype version)
        /// </summary>
        public String Displayable {
            get;
            set;
        }
	
		/// <summary>
		/// Formats this object as a string.
		/// </summary>
		///
		/// <returns>the string representation of this object</returns>
		public override  System.String ToString() {
            return "root={" + this.root + "},extension={" + (this.extension == null ? "null" : this.extension) + "}" 
        		+ (this.version == null ? "" : ",version={" + this.version + "}") 
        		+ (this.AssigningAuthorityName == null ? "" : ",assigningAuthorityName={" + this.AssigningAuthorityName + "}")
        		+ (this.Displayable == null ? "" : ",displayable={" + this.Displayable + "}") 
        		;
		}
	
		/// <summary>
		/// Calculates a hashc for this object based on root and extension.
		/// </summary>
		///
		/// <returns>the hashc of this object</returns>
		public override int GetHashCode() {
			return new HashCodeBuilder()
                    .Append(this.root)
                    .Append(this.extension)
                    .Append(this.version)
                    .Append(this.AssigningAuthorityName)
                    .Append(this.Displayable)
					.ToHashCode();
		}
	
		/// <summary>
		/// Determines if the supplied object is equal to this object based on root and extension.
		/// </summary>
		///
		/// <param name="obj">the object to compare</param>
		/// <returns>whether the supplied object equals this object</returns>
		public override bool Equals(Object obj) {
			if (obj == null) {
				return false;
			} else if ((Object) obj.GetType() != (Object) GetType()) {
				return false;
			} else {
				return Equals((Identifier) obj);
			}
		}
	
		private bool Equals(Identifier that) {
			return new EqualsBuilder()
                .Append(this.root, that.root)
                .Append(this.extension, that.extension)
                .Append(this.version, that.version)
                .Append(this.AssigningAuthorityName, that.AssigningAuthorityName)
                .Append(this.Displayable, that.Displayable)
                .IsEquals();
        }
	}
}
