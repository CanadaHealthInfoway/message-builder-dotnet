/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-26 09:35:09 -0400 (Mon, 26 Sep 2011) $
 * Revision:      $LastChangedRevision: 3016 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	///   datatype used to back the HL7 PN datatype.
	/// Covers:
	/// PN.BASIC: Used to express person names for general identification and communication purposes.
	/// PN.SIMPLE: Used to express person names without name parts.
	/// PN.FULL: Used to express person names within a registry where full qualification is needed. 
	/// PN.SEARCH: This type is used to convey name information for searching purposes. All matches are considered to be "starts with" for each specified property. 
	/// </summary>
	///
	public class PersonName : EntityName {
	
		public PersonName() {
			this.parts = Ca.Infoway.Messagebuilder.CollUtils
					.SynchronizedList(new List<EntityNamePart>());
		}
	
		private IList<EntityNamePart> parts;
	
		/// <summary>
		/// Obtains the name parts.
		/// </summary>
		///
		/// <returns>list of entity name parts</returns>
		public override IList<EntityNamePart> Parts {
		/// <summary>
		/// Obtains the name parts.
		/// </summary>
		///
		/// <returns>list of entity name parts</returns>
		  get {
				return this.parts;
			}
		}
		
	
		/// <summary>
		/// Adds a name part.
		/// </summary>
		///
		/// <param name="namePart">the name part to add</param>
		public void AddNamePart(EntityNamePart namePart) {
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(this.parts,namePart);
		}
	
		/// <summary>
		/// Pulls out the (first) given name from the list of parts.
		/// </summary>
		///
		/// <returns>the given name</returns>
		public String GivenName {
		/// <summary>
		/// Pulls out the (first) given name from the list of parts.
		/// </summary>
		///
		/// <returns>the given name</returns>
		  get {
				IList<EntityNamePart> parts_0 = GetPartsOfType(Ca.Infoway.Messagebuilder.Datatype.Lang.PersonNamePartType.GIVEN);
				return ((parts_0.Count==0)) ? null : parts_0[0].Value;
			}
		}
		
	
		/// <summary>
		/// Pulls out the (first) family name from the list of parts.
		/// </summary>
		///
		/// <returns>the family name</returns>
		public String FamilyName {
		/// <summary>
		/// Pulls out the (first) family name from the list of parts.
		/// </summary>
		///
		/// <returns>the family name</returns>
		  get {
				IList<EntityNamePart> parts_0 = GetPartsOfType(Ca.Infoway.Messagebuilder.Datatype.Lang.PersonNamePartType.FAMILY);
				return ((parts_0.Count==0)) ? null : parts_0[0].Value;
			}
		}
		
	
		public IList<EntityNamePart> GetPartsOfType(PersonNamePartType type) {
			IList<EntityNamePart> result = new List<EntityNamePart>();
			/* foreach */
			foreach (EntityNamePart part  in  this.parts) {
				if ((Object) type == (Object) part.Type) {
					ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,part);
				}
			}
			return result;
		}
	
		/// <summary>
		/// Builds a PersonName from a supplied first and last name (each may be null).
		/// </summary>
		///
		/// <param name="firstName">first name</param>
		/// <param name="lastName">last name</param>
		/// <returns>the constructed PersonName</returns>
		public static PersonName CreateFirstNameLastName(String firstName,
				String lastName) {
			PersonName name = new PersonName();
			if (Ca.Infoway.Messagebuilder.StringUtils.IsNotBlank(firstName)) {
				name.AddNamePart(new EntityNamePart(firstName,
						Ca.Infoway.Messagebuilder.Datatype.Lang.PersonNamePartType.GIVEN));
			}
			if (Ca.Infoway.Messagebuilder.StringUtils.IsNotBlank(lastName)) {
				name.AddNamePart(new EntityNamePart(lastName,
						Ca.Infoway.Messagebuilder.Datatype.Lang.PersonNamePartType.FAMILY));
			}
			return name;
		}
	}
}
