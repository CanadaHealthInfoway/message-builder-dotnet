/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Lang {
	
	using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// Used to hold a difference value of a given type.  
	/// </summary>
	///
	/// <param name="T"> the  v type the diff value represents</param>
	public class Diff<T> : BareDiff {
	
		private readonly T value_ren;
        private NullFlavor nullFlavor;
	
		/// <summary>
		/// Constructs a diff using the supplied parameter.
		/// </summary>
		///
		/// <param name="value">the difference value</param>
		public Diff(T value_ren) {
			this.value_ren = value_ren;
            this.nullFlavor = null;
		}

        public Diff(NullFlavor nullFlavor)
        {
            this.value_ren = default(T);
            this.nullFlavor = nullFlavor;
        }
        
        /// <summary>
		/// Returns the diff value.
		/// </summary>
		///
		/// <returns>the diff value</returns>
		public T Value {
		/// <summary>
		/// Returns the diff value.
		/// </summary>
		///
		/// <returns>the diff value</returns>
		  get {
				return this.value_ren;
			}
		}

		public object GetValue() {
			return this.value_ren;
		}		
	
		/// <summary>
		/// Sets a nullflavor on this diff.
		/// </summary>
		///
		/// <param name="nullFlavor">a null flavor</param>
		public virtual NullFlavor NullFlavor {
		/// <summary>
		/// Returns the diff's null flavor.
		/// </summary>
		///
		/// <returns>the null flavor</returns>
		  get {
				return this.nullFlavor;
			}
		/// <summary>
		/// Sets a nullflavor on this diff.
		/// </summary>
		///
		/// <param name="nullFlavor">a null flavor</param>
		  set {
              this.nullFlavor = value;
			}
		}
		
	
		/// <summary>
		/// Determines if the diff has null flavor.
		/// </summary>
		///
		/// <returns>whether the diff has a null flavor set.</returns>
		public virtual bool HasNullFlavor() {
			return this.nullFlavor != null;
		}
		
		public Object BareValue {
			get { return this.value_ren; }
		}
	
	
        public override int GetHashCode()
        {
            return new HashCodeBuilder()
		            .Append(this.value_ren)
		            .Append(this.nullFlavor)
                    .ToHashCode();
        }

        public override bool Equals(object obj)
        {
            if (obj == null)
            {
                return false;
            }
            else if (obj.GetType() != GetType())
            {
                return false;
            } else {
                return Equals((Diff<T>) obj);
            }
        }
    
        private bool Equals(Diff<T> that)
        {
            return new EqualsBuilder()
                    .Append(this.value_ren, that.value_ren)
                    .Append(this.nullFlavor, that.nullFlavor)
                    .IsEquals();
        }
    
	}
}
