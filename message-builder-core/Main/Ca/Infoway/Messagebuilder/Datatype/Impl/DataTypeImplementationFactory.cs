/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Xml;
	using log4net;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
    using System.Reflection;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A factory for obtaining datatype implementation classes from a type name.
	/// </summary>
	///
	public class DataTypeImplementationFactory {
	
		private static readonly ILog LOG = LogManager.GetLogger(typeof(DataTypeImplementationFactory));

        private static readonly String implNamespace = typeof(DataTypeImplementationFactory).Namespace;
	
		/// <summary>
		/// Obtains the datatype implementation class for a type name.
		/// </summary>
		///
		/// <param name="typeName">the type name</param>
		/// <returns>the impl class corresponding to the type name</returns>
		/* @SuppressWarnings("unchecked")*/
		public static Type GetImplementation(String typeName, bool isCDAR2) {
			Type implementation = null;
	
			StandardDataType dataType = Ca.Infoway.Messagebuilder.Datatype.StandardDataType.GetByTypeName(typeName);
			if (dataType != null) {
				try {
                    string implTypeName = dataType.RootType;
                    if (isCDAR2) {
                        implTypeName = CodedTypeEvaluator.GetR2CodedType(typeName);
                    }
					string fullClassName = String.Format("{0}.{1}Impl", implNamespace, implTypeName);
                    Assembly assembly = Assembly.GetExecutingAssembly();
                    implementation = assembly.GetType(fullClassName);
                    if (implementation == null) {
                        foreach (Type t in assembly.GetTypes()) {
                            string assemblyTypeName = t.FullName;
                            int arityCharacterIndex = assemblyTypeName.IndexOf("`");
                            if (arityCharacterIndex >= 0) { //Generic type
                                assemblyTypeName = assemblyTypeName.Substring(0, arityCharacterIndex);
                            }
                            if (fullClassName.Equals(assemblyTypeName)) {
                                implementation = t;
                                break;
                            }
                        }
                    }
				} catch (TypeLoadException e) {
					LOG.Error("Unable to find implementation for type: " + typeName, e);
				}
			}
	
			return implementation;
		}
	}
}
