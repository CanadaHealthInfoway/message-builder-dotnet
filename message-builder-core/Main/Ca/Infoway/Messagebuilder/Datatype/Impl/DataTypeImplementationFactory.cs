/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder.Datatype;
	using log4net;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A factory for obtaining datatype implementation classes from a type name.
	/// </summary>
	///
	public class DataTypeImplementationFactory {
	
		private static readonly ILog LOG = LogManager.GetLogger(typeof(DataTypeImplementationFactory));

        private static readonly String implNamespace = typeof(DataTypeImplementationFactory).Namespace;
	
		/// <summary>
		/// Obtains the datatype implementation class for a type name.
		/// </summary>
		///
		/// <param name="typeName">the type name</param>
		/// <returns>the impl class corresponding to the type name</returns>
		/* @SuppressWarnings("unchecked")*/
		public static Type GetImplementation(
				String typeName) {
			Type implementation = null;
	
			StandardDataType dataType = Ca.Infoway.Messagebuilder.Datatype.StandardDataType.GetByTypeName(typeName);
			if (dataType != null) {
				try {
					string fullClassName = String.Format("{0}.{1}Impl", implNamespace, dataType.RootType);
                    implementation = (Type) ILOG.J2CsMapping.Reflect.Helper.GetNativeType(fullClassName);
				} catch (TypeLoadException e) {
					LOG.Error("Unable to find implementation for type: " + typeName, e);
				}
			}
	
			return implementation;
		}
	}
}
