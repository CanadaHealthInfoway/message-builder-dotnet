/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder.Datatype;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Reflection;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A factory to create a datatype object given a type name. 
	/// </summary>
	///
	public class DataTypeFactory {
	
		/// <summary>
		/// Creates a datatype object given a type name. 
		/// </summary>
		///
		/// <param name="typeName">the type</param>
		/// <returns>the created datatype</returns>
		/* @SuppressWarnings("unchecked")*/
		public static object /*ANY*/ CreateDataType(String typeName, bool isCDAR2) {
			Type implementation = DataTypeImplementationFactory.GetImplementation(typeName, isCDAR2);
			try {
				if (implementation != null) {
                    if (isCDAR2) {
                        if (implementation.IsGenericType) {
                            implementation = implementation.MakeGenericType(typeof(Code));
                        }
                    }
					return Activator.CreateInstance(implementation);
				} else {
					throw new Exception("Unable to create data type: " + typeName);
				}
			} catch (TargetException e) {
				throw new Exception("Unable to create data type: " + typeName, e);
			} catch (MemberAccessException e_0) {
				throw new Exception("Unable to create data type: " + typeName, e_0);
			}
		}
	}
}
