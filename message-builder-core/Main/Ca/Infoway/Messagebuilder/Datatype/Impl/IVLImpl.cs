/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder.Datatype;
	using Ca.Infoway.Messagebuilder.Datatype.Lang;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// HL7 datatype IVL. Backed by the   datatype Interval.
	/// This data type is used when a continuous range needs to be expressed.
	/// </summary>
	///
	/// <param name="T"> the HL7 datatype of the interval</param>
	/// <param name="V"> the Interval   type, or a subclass</param>
	public class IVLImpl<T, V> : ANYImpl<V>, IVL<T, V> /* where T : QTY<?>  where V : Interval<?> */ {
	
		private const long serialVersionUID = -5984093680112937602L;
	
		private readonly bool highClosed;
		private readonly bool lowClosed;
	
		/// <summary>
		/// Constructs an empty IVL.
		/// </summary>
		///
		public IVLImpl() : this(false, false,  default(V)) {
		}
	
		/// <summary>
		/// Constructs an IVL with the given value.
		/// </summary>
		///
		/// <param name="defaultValue">an initial value</param>
		public IVLImpl(V defaultValue) : this(false, false, defaultValue) {
		}
	
		/// <summary>
		/// Constructs an IVL using the supplied parameters.
		/// </summary>
		///
		/// <param name="lowClosed_0">whether low bound is closed</param>
		/// <param name="highClosed_1">whether high bound is closed</param>
		public IVLImpl(bool lowClosed_0, bool highClosed_1) : this(lowClosed_0, highClosed_1,  default(V)) {
		}
	
		/// <summary>
		/// Constructs an IVL using the supplied parameters.
		/// </summary>
		///
		/// <param name="lowClosed_0">whether low bound is closed</param>
		/// <param name="highClosed_1">whether high bound is closed</param>
		/// <param name="defaultValue">an initial value</param>
		public IVLImpl(bool lowClosed_0, bool highClosed_1, V defaultValue) : this(typeof(V), defaultValue, null, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.IVL) {
		}
	
		/// <summary>
		/// Constructs an IVL using the supplied parameters.
		/// </summary>
		///
		/// <param name="rawType">the underlying   type</param>
		/// <param name="value">an initial value</param>
		/// <param name="nullFlavor">a null flavor</param>
		/// <param name="dataType">the HL7 datatype</param>
		public IVLImpl(Type rawType, V value_ren, NullFlavor nullFlavor,
				StandardDataType dataType) : this(rawType, value_ren, nullFlavor, dataType, false, false) {
		}
	
		/// <summary>
		/// Constructs an IVL using the supplied parameters.
		/// </summary>
		///
		/// <param name="rawType">the underlying   type</param>
		/// <param name="value">an initial value</param>
		/// <param name="nullFlavor">a null flavor</param>
		/// <param name="dataType">the HL7 datatype</param>
		/// <param name="lowClosed_0">whether low bound is closed</param>
		/// <param name="highClosed_1">whether high bound is closed</param>
		public IVLImpl(Type rawType, V value_ren, NullFlavor nullFlavor,
				StandardDataType dataType, bool lowClosed_0, bool highClosed_1) : base(rawType, value_ren, nullFlavor, dataType) {
			this.lowClosed = lowClosed_0;
			this.highClosed = highClosed_1;
		}
	
		/// <summary>
		/// Determines whether the high bound is closed.
		/// </summary>
		///
		/// <returns>whether the high bound is closed</returns>
		public virtual bool HighClosed {
		/// <summary>
		/// Determines whether the high bound is closed.
		/// </summary>
		///
		/// <returns>whether the high bound is closed</returns>
		  get {
				return this.highClosed;
			}
		}
		
	
		/// <summary>
		/// Determines whether the low bound is closed.
		/// </summary>
		///
		/// <returns>whether the low bound is closed</returns>
		public virtual bool LowClosed {
		/// <summary>
		/// Determines whether the low bound is closed.
		/// </summary>
		///
		/// <returns>whether the low bound is closed</returns>
		  get {
				return this.lowClosed;
			}
		}
	}
}
