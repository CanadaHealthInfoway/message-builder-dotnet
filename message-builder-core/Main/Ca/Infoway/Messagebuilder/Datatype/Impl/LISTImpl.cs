/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Datatype.Impl
{

    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Datatype;
	using Ca.Infoway.Messagebuilder.Domainvalue;
    using ILOG.J2CsMapping.Collections;
    using ILOG.J2CsMapping.Collections.Generics;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    /// <summary>
    /// HL7 datatype LIST. Backed by a   List.
    /// Used when multiple repetitions are allowed and order matters.
    /// </summary>
    ///
    /// <param name="T"> the HL7 datatype held by the LIST</param>
    /// <param name="V"> the underlying   datatype held by the underlying   List</param>
    public class LISTImpl<T, V> : ANYImpl<ICollection<T>>, CollectionHelper, BareCollection, LIST<T, V> where T : ANY<V>
    {
        private const long serialVersionUID = -1016261753587524757L;

        private readonly Type hl7Class;

        /// <summary>
        /// Builds an HL7 LIST from an existing   List.
        /// </summary>
        ///
        /// <param name="T"> the HL7 datatype held by the LIST</param>
        /// <param name="V"> the underlying   datatype held by the underlying   List</param>
        /// <param name="rawElementType">the class of the underlying   datatype held by the list</param>
        /// <param name="rawElements">a list of   datatype values</param>
        /// <returns>the constructed LIST</returns>
        /* @SuppressWarnings("unchecked")*/
        public static LIST<TS, VS> Create<TS, VS>(Type rawElementType, IList<VS> rawElements) where TS : ANY<VS>
        {
            LISTImpl<TS, VS> list = new LISTImpl<TS, VS>(rawElementType);
            ILOG.J2CsMapping.Collections.Generics.Collections.AddAll(rawElements, list.RawList());
            return list;
        }

        /// <summary>
        /// Constructs an empty LIST of the given HL7 datatype.
        /// </summary>
        ///
        /// <param name="hl7Class_0">the HL7 datatype class</param>
        /* @SuppressWarnings("unchecked")*/
        public LISTImpl(Type hl7Class)
            : this(hl7Class, new List<T>())
        {
        }

        /// <summary>
        /// Constructs a LIST of the given HL7 datatype with a null flavor.
        /// </summary>
        ///
        /// <param name="hl7Class_0">the HL7 datatype class</param>
        /// <param name="nullFlavor">a null flavor</param>
        /* @SuppressWarnings("unchecked")*/
        public LISTImpl(Type hl7Class, NullFlavor nullFlavor)
            : this(hl7Class, new List<T>())
        {
            NullFlavor = nullFlavor;
        }

        /// <summary>
        /// Constructs a LIST of the given HL7 datatype with the supplied initial value.
        /// </summary>
        ///
        /// <param name="hl7Class_0">the HL7 datatype class</param>
        /// <param name="defaultValue">the initial value</param>
        /* @SuppressWarnings("unchecked")*/
        public LISTImpl(Type hl7Class, IList<T> defaultValue)
            : base(typeof(IList), defaultValue, null, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.LIST)
        {
            this.hl7Class = hl7Class;
        }

        /// <summary>
        /// Returns an empty List.
        /// </summary>
        ///
        /// <returns>an empty List</returns>
        protected internal override ICollection<T> NullValue
        {
            /// <summary>
            /// Returns an empty List.
            /// </summary>
            ///
            /// <returns>an empty List</returns>
            get
            {
                return new List<T>();
            }
        }

        /// <summary>
        /// Returns the underlying   List containing values in the underlying   datatype.
        /// </summary>
        ///
        /// <returns>the underlying   List containing values in the underlying   datatype</returns>
        public virtual IList<V> RawList()
        {
            return new RawListWrapper<T, V>(Value, Hl7Class);
        }

		public virtual IList<U> RawList<U>() where U : V {
			return new RawListWrapper<T, U>(Value, Hl7Class);
		}
		
        private Type Hl7Class
        {
            get
            {
                return this.hl7Class;
            }
        }

        /// <summary>
        /// Returns the underlying   Collection containing values in the underlying   datatype.
        /// </summary>
        ///
        /// <returns>the underlying   Collection containing values in the underlying   datatype</returns>
        public virtual ICollection<object> RawCollection()
        {
			return new RawListWrapper<T, object>(Value, Hl7Class);
        }

        /// <summary>
        /// Returns the HL7 datatype class.
        /// </summary>
        ///
        /// <returns>the HL7 datatype class.</returns>
        public virtual Type ElementType
        {
            /// <summary>
            /// Returns the HL7 datatype class.
            /// </summary>
            ///
            /// <returns>the HL7 datatype class.</returns>
            get
            {
                return this.hl7Class;
            }
        }

		public void Add(BareANY any) {
			Value.Add((T) any);
		}

		public ICollection<BareANY> GetBareCollectionValue() {
			ICollection<BareANY> result = new List<BareANY>();
			foreach (T t in Value) {
				result.Add(t);
			}
			return result;
		}
		
    }
}
