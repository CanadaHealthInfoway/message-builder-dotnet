/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder.Datatype;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// ANY Hl7 datatype.
	/// Defines the basic properties of every data value.
	/// This is an abstract type, meaning that no value can be just a data value
	/// without belonging to any concrete type. Every concrete type is a
	/// specialization of this general abstract DataValue type.
	/// </summary>
	///
	/// <param name="V"> the underlying   datatype</param>
	public class ANYImpl<V> : BareANYImpl, ANY<V>, ICloneable {
	
		private const long serialVersionUID = 5073666472702745793L;
	
		private readonly Type rawType;
	
		private V value_ren;
		private NullFlavor nullFlavor;
	
		private StandardDataType dataType;
	
		/// <summary>
		/// Constructs an empty ANY.
		/// </summary>
		///
		public ANYImpl() : this((Type)null) {
		}
	
		/// <summary>
		/// Constructs an ANY object based on an underlying   datatype.
		/// </summary>
		///
		/// <param name="rawType_0">the   datatype this ANY is based on</param>
		public ANYImpl(Type rawType_0) : this(rawType_0,  default(V), null) {
		}
	
		/// <summary>
		/// Constructs an ANY object.
		/// </summary>
		///
		/// <param name="value">the underlying   value of thie ANY object.</param>
		/// <param name="nullFlavor_0">the null flavor to set on the ANY object</param>
		public ANYImpl(V value_ren, NullFlavor nullFlavor_0) : this(null, value_ren, nullFlavor_0) {
		}
	
		/// <summary>
		/// Constructs an ANY object.
		/// </summary>
		///
		/// <param name="rawType_0">the   datatype this ANY is based on</param>
		/// <param name="value">the underlying   value of thie ANY object.</param>
		/// <param name="nullFlavor_1">the null flavor to set on the ANY object</param>
		public ANYImpl(Type rawType_0, V value_ren, NullFlavor nullFlavor_1) : this(rawType_0, value_ren, nullFlavor_1, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.ANY) {
		}
	
		/// <summary>
		/// Constructs an ANY object.
		/// </summary>
		///
		/// <param name="value">the underlying   value of thie ANY object.</param>
		/// <param name="nullFlavor_0">the null flavor to set on the ANY object</param>
		/// <param name="dataType_1">the enum datatype of this ANy object</param>
		public ANYImpl(V value_ren, NullFlavor nullFlavor_0, StandardDataType dataType_1) : this(null, value_ren, nullFlavor_0, dataType_1) {
		}
	
		/// <summary>
		/// Constructs an ANY object.
		/// </summary>
		///
		/// <param name="rawType_0">the   datatype this ANY is based on</param>
		/// <param name="value">the underlying   value of thie ANY object.</param>
		/// <param name="nullFlavor_1">the null flavor to set on the ANY object</param>
		/// <param name="dataType_2">the enum datatype of this ANy object</param>
		public ANYImpl(Type rawType_0, V value_ren, NullFlavor nullFlavor_1, StandardDataType dataType_2) {
			this.rawType = rawType_0;
			this.value_ren = value_ren;
			this.nullFlavor = nullFlavor_1;
			this.dataType = dataType_2;
		}
	
		/// <summary>
		/// Sets a value on the ANY object.
		/// </summary>
		///
		/// <param name="value">the value to set on this ANY object</param>
		public virtual V Value {
		/// <summary>
		/// Returns the value.
		/// </summary>
		///
		/// <returns>the underlying   datatype value</returns>
		  get {
				return this.value_ren;
			}
		/// <summary>
		/// Sets a value on the ANY object.
		/// </summary>
		///
		/// <param name="value">the value to set on this ANY object</param>
		  set {
				ValidateValue(value);
				this.value_ren = value;
			}
		}
		
	
		private void ValidateValue(V value_ren) {
			if (value_ren != null && this.rawType != null
					&& !this.rawType.IsInstanceOfType(value_ren)) {
				throw new Exception(ILOG.J2CsMapping.Util.StringUtil.Format("Invalid raw type %s for %s. Valid raw type is %s",value_ren
											.GetType(),GetType(),this.rawType.FullName));
			}
		}
	
		/// <summary>
		/// Obtain the null representation (typically "null") for this particular ANY type (V).
		/// For example, the null representation  of a list will be an empty list.
		/// </summary>
		///
		/// <returns>the value representing null for the ANY type (V)</returns>
		protected internal virtual V NullValue {
		/// <summary>
		/// Obtain the null representation (typically "null") for this particular ANY type (V).
		/// For example, the null representation  of a list will be an empty list.
		/// </summary>
		///
		/// <returns>the value representing null for the ANY type (V)</returns>
		  get {
				return  default(V)/* was: null */;
			}
		}
		
	
		/// <summary>
		/// Determines if the object currently has a null flavor set.
		/// </summary>
		///
		/// <returns>whether the object currently has a null flavor.</returns>
		public virtual bool HasNullFlavor() {
			return NullFlavor != null;
		}
	
		/// <summary>
		/// Sets a null flavor on the object.
		/// </summary>
		///
		/// <param name="nullFlavor_0">the null flavor to set</param>
		public virtual NullFlavor NullFlavor {
		/// <summary>
		/// Returns the current null flavor state of the object.
		/// </summary>
		///
		/// <returns>the null flavor</returns>
		  get {
				return this.nullFlavor;
			}
		/// <summary>
		/// Sets a null flavor on the object.
		/// </summary>
		///
		/// <param name="nullFlavor_0">the null flavor to set</param>
		  set {
				this.nullFlavor = value;
			}
		}
		
	
		/// <summary>
		/// Determines if this ANY object has a null flavor.
		/// </summary>
		///
		/// <returns>whether this object has a null flavor</returns>
		public virtual bool Null {
		/// <summary>
		/// Determines if this ANY object has a null flavor.
		/// </summary>
		///
		/// <returns>whether this object has a null flavor</returns>
		  get {
				return HasNullFlavor();
			}
		}
		
	
		/// <summary>
		/// Determines if this ANY object has no null flavor.
		/// </summary>
		///
		/// <returns>whether this object has no null flavor</returns>
		public virtual bool NonNull() {
			return !Null;
		}
	
		/// <summary>
		/// Determines whether this ANY object has a null flavor of "Not applicable".
		/// </summary>
		///
		/// <returns>whether this ANY object has a null flavor of "Not applicable"</returns>
		public virtual bool NotApplicable() {
			return Ca.Infoway.Messagebuilder.Domainvalue.Nullflavor.NullFlavor.NOT_APPLICABLE.Equals(NullFlavor);
		}
	
		/// <summary>
		/// Determines whether this ANY object has a null flavor of "other".
		/// </summary>
		///
		/// <returns>whether this ANY object has a null flavor of "other"</returns>
		public virtual bool Other() {
			return Ca.Infoway.Messagebuilder.Domainvalue.Nullflavor.NullFlavor.OTHER.Equals(NullFlavor);
		}
	
		/// <summary>
		/// Determines whether this ANY object has a null flavor of "unknown".
		/// </summary>
		///
		/// <returns>whether this ANY object has a null flavor of "unknown"</returns>
		public virtual bool Unknown() {
			return Ca.Infoway.Messagebuilder.Domainvalue.Nullflavor.NullFlavor.UNKNOWN.Equals(NullFlavor);
		}
	
		/// <summary>
		/// Compares two ANY objects to see if they are equal.
		/// </summary>
		///
		/// <param name="obj">the object to compare</param>
		/// <returns>whether the objects are equal</returns>
		public override bool Equals(Object obj) {
			if ((Object) this == obj)
				return true;
			if (obj == null)
				return false;
			if ((Object) GetType() != (Object) obj.GetType())
				return false;
			return this.Equal((ANY<V>) obj);
		}
	
		private bool Equal(ANY<V> otherAny) {
			bool equal;
			if (Null || otherAny.Null) {
				equal = false;
			} else {
				equal = (Value != null) ? Value.Equals(otherAny.Value)
						: otherAny.Value == null;
			}
			return equal;
		}
	
		/// <summary>
		/// Generates a hashc for this class.
		/// </summary>
		///
		/// <returns>the hashc</returns>
		public override int GetHashCode() {
			int result = 17;
			if (this.value_ren != null) {
				result ^= this.value_ren.GetHashCode();
			}
			if (this.nullFlavor != null) {
				result ^= this.nullFlavor.GetHashCode();
			}
			return result;
		}
	
		/// <summary>
		/// Clones this object.
		/// </summary>
		///
		/// <returns>a clone of this object</returns>
		/// <exception cref="CloneNotSupportedException if cloning encountered a problem"/>
		public virtual ANY<V> Clone() {
            return new ANYImpl<V>(rawType, value_ren, nullFlavor, dataType);
		}

        object ICloneable.Clone() {
            return (object)Clone();
        }
	
		/// <summary>
		/// Sets this ANY's datatype.
		/// </summary>
		///
		/// <param name="dataType_0">the underlying enum datatype</param>
		public StandardDataType DataType {
		/// <summary>
		/// Represents the fact that every data value implicitly carries information about its own data type. 
		/// Thus, given a data value one can inquire about its data type.
		/// </summary>
		///
		/// <returns>the underlying enum datatype</returns>
		  get {
				return this.dataType;
			}
		/// <summary>
		/// Sets this ANY's datatype.
		/// </summary>
		///
		/// <param name="dataType_0">the underlying enum datatype</param>
		  set {
				this.dataType = value;
			}
		}
		
		public override Object BareValue {
			get { return this.value_ren; }
			set { this.value_ren = (V) value; }
		}
	}
}
