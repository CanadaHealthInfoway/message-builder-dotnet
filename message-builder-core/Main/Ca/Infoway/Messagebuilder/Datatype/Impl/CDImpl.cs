/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Datatype;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// HL7 datatype CD. Backed by a Code.
	/// A CD represents any kind of concept usually by giving a c defined in a
	/// c system. A CD can contain the original text or phrase that served as the
	/// basis of the coding and one or more translations into different coding
	/// systems. A CD can also contain qualifiers to describe, e.g., the concept of a
	/// "left foot" as a postcoordinated term built from the primary c "FOOT" and
	/// the qualifier "LEFT". In cases of an exceptional value, the CD need not
	/// contain a c but only the original text describing that concept.
	/// CD is mostly used in one of its restricted or "profiled" forms, CS, CE, CV.
	/// Use of the full concept descriptor data type is not common. It requires a
	/// conscious decision and documented rationale. In all other cases, one of the
	/// CD restrictions shall be used.
	/// All CD restrictions constrain certain properties. Properties may be
	/// constrained to the extent that only one value may be allowed for that
	/// property, in which case mentioning the property becomes redundant.
	/// Constraining a property to one value is referred to as suppressing that
	/// property. Although, conceptually a suppressed property is still semantically
	/// applicable, it is safe for an HL7 interface to assume the implicit default
	/// value without testing.
	/// </summary>
	///
	/// <param name="V"> the underlying c type.</param>
	public class CDImpl : ANYImpl<Code>, CD {
	
		private const long serialVersionUID = 1152929036065255121L;
	
		/// <summary>
		/// Constructs an empty CD.
		/// </summary>
		///
		public CDImpl() : this(null) {
		}
	
		/// <summary>
		/// Constructs a CD with the given value.
		/// </summary>
		///
		/// <param name="defaultValue">an initial value</param>
		public CDImpl(Code defaultValue) : this(defaultValue, null, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.CD) {
		}
	
		/// <summary>
		/// Constructs a CD with the given null flavor.
		/// </summary>
		///
		/// <param name="nullFlavor">a null flavor</param>
		public CDImpl(NullFlavor nullFlavor) : this(null, nullFlavor, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.CD) {
		}
	
		/// <summary>
		/// Constructs a CD using the supplied parameters.
		/// </summary>
		///
		/// <param name="value">a value</param>
		/// <param name="nullFlavor">a  null flavor</param>
		/// <param name="dataType">an HL7 datatype</param>
		public CDImpl(Code value_ren, NullFlavor nullFlavor, StandardDataType dataType) : base(null, value_ren, nullFlavor, dataType) {
		}
	
	}
}
