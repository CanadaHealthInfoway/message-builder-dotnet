/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype.Impl {
	
	using Ca.Infoway.Messagebuilder.Datatype;
	using Ca.Infoway.Messagebuilder.Datatype.Lang;
	using Ca.Infoway.Messagebuilder.Domainvalue;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// HL7 datatype for addresses. Backed by the   datatype PostalAddress.
	/// Covers:
	/// AD.BASIC:  Used to communicate addresses for simple display, mailing and contact purposes.  
	/// The data type is not generally suitable for registries.
	/// AD.FULL:   Used to communicate fully validatable addresses. Usually appropriate only for registry-type situations.
	/// AD.SEARCH: This type is used to convey high level address information for searching purposes. All matches are 
	/// considered to be "starts with" for each specified property.
	/// </summary>
	///
	public class ADImpl : ANYImpl<PostalAddress>, AD {
	
		private const long serialVersionUID = 8235191514425680358L;
	
		/// <summary>
		/// Constructs an empty AD.
		/// </summary>
		///
		public ADImpl() : this((PostalAddress)null) {
		}
	
		/// <summary>
		/// Constructs an AD given the supplied address.
		/// </summary>
		///
		/// <param name="address">the postal address</param>
		public ADImpl(PostalAddress address) : base(typeof(PostalAddress), address, null, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.AD) {
		}
	
		/// <summary>
		/// Constructs an AD with the supplied null flavor.
		/// </summary>
		///
		/// <param name="nullFlavor">the null flavor to assign the address</param>
		public ADImpl(NullFlavor nullFlavor) : base(typeof(PostalAddress), null, nullFlavor, Ca.Infoway.Messagebuilder.Datatype.StandardDataType.AD) {
		}
	
	}
}
