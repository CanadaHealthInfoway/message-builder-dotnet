/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2011-12-21 14:34:58 -0500 (Wed, 21 Dec 2011) $
 * Revision:      $LastChangedRevision: 3164 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Datatype {
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Lang;
	using ILOG.J2CsMapping.Collections.Generics;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// A list of standard HL7 data types.
	/// Each enum maps to the appropriate HL7 datatype name, actual HL7 datatype, and underlying datatype. An enum
	/// will also map to a Simple XMl datatype where appropriate.
	/// This enum class contains numerous helper methods for determining properties about types, and for converting
	/// between type variations, eg. determining the HL7 datatype from the Simple Xm ldatatype.
	/// An attempt has been made to try to consistently use the following naming standards:
	/// <b>enum datatype (or enum):</b>          a datatype represented by the StandardDataType enum 
	/// <b>HL7 datatype:</b>                     the HL7-defined datatype, eg. URG or URG&lt;TS.DATE&gt; or TS.DATE
	/// <b>  datatype (or just datatype):</b> the underlying   class used for a datatype, eg. String, PostalAddress
	/// <b>simple xml datatype:</b>              the datatype equivalent used for the Simple XML variant
	/// </summary>
	///
	[Serializable]
	public class StandardDataType : EnumPattern, Typed {
	
		private const long serialVersionUID = 75841345036545890L;
	
		public static readonly StandardDataType ANY = new StandardDataType("ANY",
				"ANY");
		public static readonly StandardDataType ANY_LAB = new StandardDataType(
				"ANY_LAB", "ANY.LAB");
		public static readonly StandardDataType ANY_CA_IZ = new StandardDataType(
				"ANY_CA_IZ", "ANY.CA.IZ");
		public static readonly StandardDataType ANY_PATH = new StandardDataType(
				"ANY_PATH", "ANY.PATH");
	
		public static readonly StandardDataType AD = new StandardDataType("AD", "AD");
		public static readonly StandardDataType AD_BASIC = new StandardDataType(
				"AD_BASIC", "AD.BASIC");
		public static readonly StandardDataType AD_FULL = new StandardDataType(
				"AD_FULL", "AD.FULL");
		public static readonly StandardDataType AD_SEARCH = new StandardDataType(
				"AD_SEARCH", "AD.SEARCH");
	
		public static readonly StandardDataType BL = new StandardDataType("BL", "BL");
	
		public static readonly StandardDataType ON = new StandardDataType("ON", "ON");
	
		public static readonly StandardDataType SC = new StandardDataType("SC", "SC");
	
		public static readonly StandardDataType EN = new StandardDataType("EN", "EN");
	
		public static readonly StandardDataType TN = new StandardDataType("TN", "TN");
	
		public static readonly StandardDataType QTY = new StandardDataType("QTY",
				"QTY");
	
		public static readonly StandardDataType GTS = new StandardDataType("GTS",
				"GTS");
		public static readonly StandardDataType GTS_BOUNDEDPIVL = new StandardDataType(
				"GTS_BOUNDEDPIVL", "GTS.BOUNDEDPIVL");
	
		public static readonly StandardDataType II = new StandardDataType("II", "II",
				"InstanceIdentifier");
		public static readonly StandardDataType II_TOKEN = new StandardDataType(
				"II_TOKEN", "II.TOKEN", "InstanceIdentifier");
		public static readonly StandardDataType II_BUS = new StandardDataType(
				"II_BUS", "II.BUS", "InstanceIdentifier");
		public static readonly StandardDataType II_PUBLIC = new StandardDataType(
				"II_PUBLIC", "II.PUBLIC", "InstanceIdentifier");
		public static readonly StandardDataType II_OID = new StandardDataType(
				"II_OID", "II.OID", "InstanceIdentifier");
		public static readonly StandardDataType II_VER = new StandardDataType(
				"II_VER", "II.VER", "InstanceIdentifier");
		public static readonly StandardDataType II_PUBLICVER = new StandardDataType(
				"II_PUBLICVER", "II.PUBLICVER", "InstanceIdentifier");
		public static readonly StandardDataType II_BUS_AND_VER = new StandardDataType(
				"II_BUS_AND_VER", "II.BUS_AND_VER", "InstanceIdentifier");
		public static readonly StandardDataType II_BUSVER = new StandardDataType(
				"II_BUSVER", "II.BUSVER", "InstanceIdentifier");
	
		public static readonly StandardDataType CV = new StandardDataType("CV", "CV",
				"CodedValue");
		public static readonly StandardDataType CD = new StandardDataType("CD", "CD",
				"CodedType");
		public static readonly StandardDataType CD_LAB = new StandardDataType(
				"CD_LAB", "CD.LAB", "CodedTypeLab");
		public static readonly StandardDataType CE = new StandardDataType("CE", "CE");
		public static readonly StandardDataType CS = new StandardDataType("CS", "CS",
				"SimpleCodedType");
	
		public static readonly StandardDataType ST = new StandardDataType("ST", "ST");
		public static readonly StandardDataType ST_LANG = new StandardDataType(
				"ST_LANG", "ST.LANG", "LocalizedString");
	
		public static readonly StandardDataType ED = new StandardDataType("ED", "ED");
		public static readonly StandardDataType ED_DOC = new StandardDataType(
				"ED_DOC", "ED.DOC", "EncapsulatedDocumentType");
		public static readonly StandardDataType ED_DOC_OR_REF = new StandardDataType(
				"ED_DOC_OR_REF", "ED.DOCORREF", "EncapsulatedDocumentOrReference");
        public static readonly StandardDataType ED_REF = new StandardDataType(
                "ED_REF", "ED.REF", "EncapsulatedReferenceType");   //CeRx only
		public static readonly StandardDataType ED_DOC_REF = new StandardDataType(
				"ED_DOC_REF", "ED.DOCREF", "EncapsulatedReferenceType");
		public static readonly StandardDataType ED_SIGNATURE = new StandardDataType(
				"ED_SIGNATURE", "ED.SIGNATURE", "EncapsulatedSignatureType");
	
		public static readonly StandardDataType PN = new StandardDataType("PN", "PN");
		public static readonly StandardDataType PN_BASIC = new StandardDataType(
				"PN_BASIC", "PN.BASIC");
		public static readonly StandardDataType PN_SIMPLE = new StandardDataType(
				"PN_SIMPLE", "PN.SIMPLE");
		public static readonly StandardDataType PN_FULL = new StandardDataType(
				"PN_FULL", "PN.FULL");
		public static readonly StandardDataType PN_SEARCH = new StandardDataType(
				"PN_SEARCH", "PN.SEARCH");
	
		public static readonly StandardDataType IVL = new StandardDataType("IVL",
				"IVL", "Interval");
		public static readonly StandardDataType IVL_DATE = new StandardDataType(
				"IVL_DATE", "IVL<TS.DATE>");
		public static readonly StandardDataType IVL_DATETIME = new StandardDataType(
				"IVL_DATETIME", "IVL<TS.DATETIME>");
		public static readonly StandardDataType IVL_FULL_DATE = new StandardDataType(
				"IVL_FULL_DATE", "IVL<TS.FULLDATE>");
		public static readonly StandardDataType IVL_FULL_DATE_TIME = new StandardDataType(
				"IVL_FULL_DATE_TIME", "IVL<TS.FULLDATETIME>");
		public static readonly StandardDataType IVL_FULL_DATE_WITH_TIME = new StandardDataType(
				"IVL_FULL_DATE_WITH_TIME", "IVL<TS.FULLDATEWITHTIME>");
		public static readonly StandardDataType IVL_TS = new StandardDataType(
				"IVL_TS", "IVL<TS>", "DateInterval");
		public static readonly StandardDataType IVL_HIGH_TS_FULLDATE = new StandardDataType(
				"IVL_HIGH_TS_FULLDATE", "IVL.HIGH<TS.FULLDATE>", "DateInterval");
		public static readonly StandardDataType IVL_WIDTH_TS_FULLDATE = new StandardDataType(
				"IVL_WIDTH_TS_FULLDATE", "IVL.WIDTH<TS.FULLDATE>", "DateInterval");
		public static readonly StandardDataType IVL_LOW_TS_DATE = new StandardDataType(
				"IVL_LOW_TS_DATE", "IVL.LOW<TS.DATE>", "DateInterval");
		public static readonly StandardDataType IVL_LOW_TS_FULLDATE = new StandardDataType(
				"IVL_LOW_TS_FULLDATE", "IVL.LOW<TS.FULLDATE>", "DateInterval");
        public static readonly StandardDataType IVL_PQ = new StandardDataType(
                "IVL_PQ", "IVL<PQ>", "PhysicalQuantityInterval");
        public static readonly StandardDataType IVL_PQ_BASIC = new StandardDataType("IVL_PQ_BASIC", "IVL<PQ.BASIC>", "PhysicalQuantityInterval"); 
        public static readonly StandardDataType IVL_PQ_DRUG = new StandardDataType("IVL_PQ_DRUG", "IVL<PQ.DRUG>", "PhysicalQuantityInterval"); 
        public static readonly StandardDataType IVL_PQ_TIME = new StandardDataType("IVL_PQ_TIME", "IVL<PQ.TIME>", "PhysicalQuantityInterval"); 
        public static readonly StandardDataType IVL_PQ_LAB = new StandardDataType("IVL_PQ_LAB", "IVL<PQ.LAB>", "PhysicalQuantityInterval"); 
        public static readonly StandardDataType IVL_PQ_HEIGHTWEIGHT = new StandardDataType("IVL_PQ_HEIGHTWEIGHT", "IVL<PQ.HEIGHTWEIGHT>", "PhysicalQuantityInterval");
        public static readonly StandardDataType IVL_PQ_DISTANCE = new StandardDataType("IVL_PQ_DISTANCE", "IVL<PQ.DISTANCE>", "PhysicalQuantityInterval");
	
		public static readonly StandardDataType IVL_WIDTH = new StandardDataType(
				"IVL_WIDTH", "IVL.WIDTH", "Interval");
		public static readonly StandardDataType IVL_LOW = new StandardDataType(
				"IVL_LOW", "IVL.LOW", "Interval");
		public static readonly StandardDataType IVL_HIGH = new StandardDataType(
				"IVL_HIGH", "IVL.HIGH", "Interval");
	
		public static readonly StandardDataType MO = new StandardDataType("MO", "MO");
		public static readonly StandardDataType MO_CAD = new StandardDataType(
				"MO_CAD", "MO.CAD", "Money");
	
		public static readonly StandardDataType PIVL = new StandardDataType("PIVL",
				"PIVL");
		public static readonly StandardDataType PIVL_TS_DATETIME = new StandardDataType(
				"PIVL_TS_DATETIME", "PIVL<TS.DATETIME>", "PeriodicIntervalOfTime");
	
		public static readonly StandardDataType INT = new StandardDataType("INT",
				"INT", "integer");
		public static readonly StandardDataType INT_NONNEG = new StandardDataType(
				"INT_NONNEG", "INT.NONNEG", "integer");
		public static readonly StandardDataType INT_POS = new StandardDataType(
				"INT_POS", "INT.POS", "integer");
	
		public static readonly StandardDataType PQ = new StandardDataType("PQ", "PQ",
				"PhysicalQuantity");
		public static readonly StandardDataType PQ_BASIC = new StandardDataType(
				"PQ_BASIC", "PQ.BASIC", "PhysicalQuantity");
		public static readonly StandardDataType PQ_DRUG = new StandardDataType(
				"PQ_DRUG", "PQ.DRUG", "PhysicalQuantity");
		public static readonly StandardDataType PQ_TIME = new StandardDataType(
				"PQ_TIME", "PQ.TIME", "PhysicalQuantity");
		public static readonly StandardDataType PQ_LAB = new StandardDataType(
				"PQ_LAB", "PQ.LAB", "PhysicalQuantity");
		public static readonly StandardDataType PQ_HEIGHTWEIGHT = new StandardDataType(
				"PQ_HEIGHTWEIGHT", "PQ.HEIGHTWEIGHT", "PhysicalQuantity");
		public static readonly StandardDataType PQ_DISTANCE = new StandardDataType(
				"PQ_DISTANCE", "PQ.DISTANCE", "PhysicalQuantity");
	
		public static readonly StandardDataType REAL = new StandardDataType("REAL",
				"REAL");
		public static readonly StandardDataType REAL_COORD = new StandardDataType(
				"REAL_COORD", "REAL.COORD");
		public static readonly StandardDataType REAL_CONF = new StandardDataType(
				"REAL_CONF", "REAL.CONF");
	
		public static readonly StandardDataType RTO = new StandardDataType("RTO",
				"RTO");
		public static readonly StandardDataType RTO_PQ_DRUG_PQ_TIME = new StandardDataType(
				"RTO_PQ_DRUG_PQ_TIME", "RTO<PQ.DRUG, PQ.TIME>");
		public static readonly StandardDataType RTO_PQ_DRUG_PQ_DRUG = new StandardDataType(
				"RTO_PQ_DRUG_PQ_DRUG", "RTO<PQ.DRUG, PQ.DRUG>");
		public static readonly StandardDataType RTO_MO_CAD_PQ_BASIC = new StandardDataType(
				"RTO_MO_CAD_PQ_BASIC", "RTO<MO.CAD, PQ.BASIC>");
	
		public static readonly StandardDataType TS = new StandardDataType("TS", "TS");
		public static readonly StandardDataType TS_DATE = new StandardDataType(
				"TS_DATE", "TS.DATE", "PartialDate");
		public static readonly StandardDataType TS_DATETIME = new StandardDataType(
				"TS_DATETIME", "TS.DATETIME", "PartialDateTime");
		public static readonly StandardDataType TS_FULLDATEWITHTIME = new StandardDataType(
				"TS_FULLDATEWITHTIME", "TS.FULLDATEWITHTIME", "FullDateWithTime");
		public static readonly StandardDataType TS_FULLDATE = new StandardDataType(
				"TS_FULLDATE", "TS.FULLDATE", "FullDate");
		public static readonly StandardDataType TS_FULLDATETIME = new StandardDataType(
				"TS_FULLDATETIME", "TS.FULLDATETIME", "FullDateTime");
	
		public static readonly StandardDataType TEL = new StandardDataType("TEL",
				"TEL", "BaseTelecommunicationAddress");
        public static readonly StandardDataType TEL_ALL = new StandardDataType("TEL_ALL", "TEL.ALL", "PhonemailTelecommunicationAddress"); 
		public static readonly StandardDataType TEL_PHONEMAIL = new StandardDataType(
				"TEL_PHONEMAIL", "TEL.PHONEMAIL",
				"PhonemailTelecommunicationAddress");
		public static readonly StandardDataType TEL_PHONE = new StandardDataType(
				"TEL_PHONE", "TEL.PHONE", "PhoneNumber");
		public static readonly StandardDataType TEL_EMAIL = new StandardDataType(
				"TEL_EMAIL", "TEL.EMAIL", "EmailAddress");
		public static readonly StandardDataType TEL_URI = new StandardDataType(
				"TEL_URI", "TEL.URI", "Uri");
	
		public static readonly StandardDataType URG = new StandardDataType("URG",
				"URG");
		public static readonly StandardDataType URG_TS_DATE = new StandardDataType(
				"URG_TS_DATE", "URG<TS.DATE>");
		public static readonly StandardDataType URG_PQ = new StandardDataType(
				"URG_PQ", "URG<PQ>");
        public static readonly StandardDataType URG_PQ_BASIC = new StandardDataType("URG_PQ_BASIC", "URG<PQ.BASIC>");
		public static readonly StandardDataType URG_PQ_DRUG = new StandardDataType(
				"URG_PQ_DRUG", "URG<PQ.DRUG>");
		public static readonly StandardDataType URG_PQ_TIME = new StandardDataType(
				"URG_PQ_TIME", "URG<PQ.TIME>");
	    public static readonly StandardDataType URG_PQ_LAB = new StandardDataType("URG_PQ_LAB", "URG<PQ.LAB>");
	    public static readonly StandardDataType URG_PQ_HEIGHTWEIGHT = new StandardDataType("URG_PQ_HEIGHTWEIGHT", "URG<PQ.HEIGHTWEIGHT>");
        public static readonly StandardDataType URG_PQ_DISTANCE = new StandardDataType("URG_PQ_DISTANCE", "URG<PQ.DISTANCE>");
	
		public static readonly StandardDataType URL = new StandardDataType("URL",
				"URL");
	
		public static readonly StandardDataType SXPR = new StandardDataType("SXPR",
				"SXPR");
		public static readonly StandardDataType SXCM = new StandardDataType("SXCM",
				"SXCM");
	
		public static readonly StandardDataType SET = new StandardDataType("SET",
				"SET");
		public static readonly StandardDataType SET_II = new StandardDataType(
				"SET_II", "SET<II>");
	
		public static readonly StandardDataType LIST = new StandardDataType("LIST",
				"LIST");
		public static readonly StandardDataType LIST_TEL_PHONEMAIL = new StandardDataType(
				"LIST_TEL_PHONEMAIL", "LIST<TEL.PHONEMAIL>");
		
		public static readonly StandardDataType COLLECTION = new StandardDataType("COLLECTION",
				"COLLECTION");
	
	/// The BAG data type.  Note that this data type is not a standard part of the 
	/// pan-Canadian Data Types specification.
		public static readonly StandardDataType BAG = new StandardDataType("BAG",
				"BAG");

        private static readonly ILOG.J2CsMapping.Collections.Generics.ISet<StandardDataType> ignorable;
	
		private static IDictionary<String, StandardDataType> simpleXmlMap;
	
		private readonly String type;
		private readonly String simpleXmlType;
	
		private StandardDataType(String enumName, String type_0) : this(enumName, type_0, null) {
		}
	
		private StandardDataType(String enumName, String type_0, String simpleXmlType_1) : base(enumName) {
			this.type = type_0;
			this.simpleXmlType = simpleXmlType_1;
		}
	
		/// <summary>
		/// Gets the type name and parameter types.
		/// </summary>
		///
		/// <returns>this enum's HL7TypeName, an objecting defining the type's name and parameter types.</returns>
		public Hl7TypeName TypeName {
		/// <summary>
		/// Gets the type name and parameter types.
		/// </summary>
		///
		/// <returns>this enum's HL7TypeName, an objecting defining the type's name and parameter types.</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Datatype.Hl7TypeName.Parse(Type);
			}
		}
		
	
		/// <summary>
		/// Obtains the type name.
		/// </summary>
		///
		/// <returns>the HL7 name of the data type (eg. "INT.NONNEG")</returns>
		public virtual String Type {
		/// <summary>
		/// Obtains the type name.
		/// </summary>
		///
		/// <returns>the HL7 name of the data type (eg. "INT.NONNEG")</returns>
		  get {
				return this.type;
			}
		}
		
	
		/// <summary>
		/// Returns the root datatype of this data type. 
		/// </summary>
		///
		/// <returns>the root data type of this data type, as an enum.</returns>
		public StandardDataType RootDataType {
		/// <summary>
		/// Returns the root datatype of this data type. 
		/// </summary>
		///
		/// <returns>the root data type of this data type, as an enum.</returns>
		  get {
				return StandardDataType.GetByTypeName(RootType);
			}
		}
		
	
		/// <summary>
		/// Returns the root datatype of this data type. 
		/// </summary>
		///
		/// <returns>the root data type of this data type, as a string.</returns>
		public String RootType {
		/// <summary>
		/// Returns the root datatype of this data type. 
		/// </summary>
		///
		/// <returns>the root data type of this data type, as a string.</returns>
		  get {
				return TypeName.RootName;
			}
		}
		
	
		/// <summary>
		/// Determines if the enum represents a cd type.
		/// </summary>
		///
		/// <returns>whether or not the enum is a cd type.</returns>
		public bool Coded {
		/// <summary>
		/// Determines if the enum represents a cd type.
		/// </summary>
		///
		/// <returns>whether or not the enum is a cd type.</returns>
            get { return new List<String>(){"CD", "CV", "CE", "CS"}.Contains(RootType); }
		}
		
	
		/// <summary>
		/// Determines if the given datatype shares the same root HL7 datatype.
		/// </summary>
		///
		/// <param name="dataType">the type to compare</param>
		/// <returns>whether the datatypes are eqivalent, that is, do they share the same root HL7 datatype</returns>
		public bool IsEquivalent(StandardDataType dataType) {
			return dataType != null && RootType.Equals(dataType.RootType);
		}
	
		/// <summary>
		/// Determines if a given HL7 datatype name is a LIST or SET. 
		/// </summary>
		///
		/// <param name="dataTypeName">the HL7 name of the datatype to check</param>
		/// <returns>whether the supplied HL7 datatype is a collection type</returns>
		public static bool IsSetOrList(String dataTypeName) {
			return dataTypeName != null
					&& (IsSet(dataTypeName) || IsList(dataTypeName));
		}
	
		/// <summary>
		/// Determines if a given HL7 datatype name is a SET. 
		/// </summary>
		///
		/// <param name="dataTypeName">the HL7 name of the datatype to check</param>
		/// <returns>whether the supplied HL7 datatype is a SET type</returns>
		public static bool IsSet(String dataTypeName) {
			return dataTypeName != null
					&& dataTypeName.StartsWith(SET.RootType);
		}
	
		/// <summary>
		/// Determines if a given HL7 datatype name is a LIST. 
		/// </summary>
		///
		/// <param name="dataTypeName">the HL7 name of the datatype to check</param>
		/// <returns>whether the supplied HL7 datatype is a LIST type</returns>
		public static bool IsList(String dataTypeName) {
			return dataTypeName != null
					&& dataTypeName.StartsWith(LIST.RootType);
		}
	
		/// <summary>
		/// Determines if a given HL7 datatype name is a COLLECTION.
		/// </summary>
		///
		/// <param name="dataTypeName">the HL7 name of the datatype to check/param>
		/// <returns>whether the supplied HL7 datatype is a COLLECTION type</returns>
		public static bool isCollection(String dataTypeName) {
			return dataTypeName != null 
				    && dataTypeName.StartsWith(COLLECTION.RootType);
		}

		/// <summary>
		/// Determines the enum datatype for the given type (Typed) object. 
		/// </summary>
		///
		/// <param name="typed">the object to get the type name from</param>
		/// <returns>the type enum corresponding to the input parameter type</returns>
		public static StandardDataType GetByTypeName(Typed typed) {
			return (typed == null) ? null : GetByTypeName(typed.Type);
		}
	
		/// <summary>
		/// Determines the enum datatype for a given HL7 type name. 
		/// </summary>
		///
		/// <param name="name_0">the HL7 name of a datatype</param>
		/// <returns>the type enum corresponding to the input parameter name</returns>
		public static StandardDataType GetByTypeName(String name_0) {
			StandardDataType result = null;
			
			name_0 = StringUtils.DeleteWhitespace(name_0);
	
			if (IsList(name_0)) {
				result = StandardDataType.LIST;
			} else if (IsSet(name_0)) {
				result = StandardDataType.SET;
			} else if (isCollection(name_0)) {
				result = StandardDataType.COLLECTION;
			} else {
				/* foreach */
				foreach (StandardDataType type  in  Ca.Infoway.Messagebuilder.Lang.EnumPattern
						.GetEnumConstants(typeof(StandardDataType))) {
					if (String.Equals(name_0, type.Type)) {
						result = type;
						break;
					}
				}
			}
	
			return result;
		}
	
		/// <summary>
		/// Checks if this enum datatype is part of the Canadian datatype specs.
		/// </summary>
		///
		/// <returns>whether this enum datatype is part of the current (and possibly multiple previous) Canadian specs.</returns>
		public bool PartOfCanadianSpec {
		/// <summary>
		/// Checks if this enum datatype is part of the Canadian datatype specs.
		/// </summary>
		///
		/// <returns>whether this enum datatype is part of the current (and possibly multiple previous) Canadian specs.</returns>
		  get {
				return !ignorable.Contains(this);
			}
		}
		
	
		/// <summary>
		/// Returns the simple xml equivalent name for this enum.
		/// </summary>
		///
		/// <returns>the simple xml type name for this enum.</returns>
		public String SimpleXmlType {
		/// <summary>
		/// Returns the simple xml equivalent name for this enum.
		/// </summary>
		///
		/// <returns>the simple xml type name for this enum.</returns>
		  get {
				return this.simpleXmlType;
			}
		}
		
	
		/// <summary>
		/// Obtains the datatype enum corresponding to a given simple xml type name.
		/// </summary>
		///
		/// <param name="simpleXmlType_0">the simple xml type name to convert</param>
		/// <returns>the corresponding enum datatype</returns>
		public static StandardDataType ConvertSimpleXmlToDataType(
				String simpleXmlType_0) {
			if (simpleXmlMap == null) {
				InitializeSimpleXmlMap();
			}
			return ((Ca.Infoway.Messagebuilder.Datatype.StandardDataType)ILOG.J2CsMapping.Collections.Generics.Collections.Get(simpleXmlMap,simpleXmlType_0));
		}
	
		[MethodImpl(MethodImplOptions.Synchronized)]
		private static void InitializeSimpleXmlMap() {
			if (simpleXmlMap == null) {
				IDictionary<String, StandardDataType> map = new Dictionary<String, StandardDataType>();
				/* foreach */
				foreach (StandardDataType type  in  Ca.Infoway.Messagebuilder.Lang.EnumPattern
						.GetEnumConstants(typeof(StandardDataType))) {
					String simpleXmlType_0 = type.simpleXmlType;
					if (Ca.Infoway.Messagebuilder.StringUtils.IsNotBlank(simpleXmlType_0)) {
						if (map.ContainsKey(simpleXmlType_0)) {
							StandardDataType other = ((Ca.Infoway.Messagebuilder.Datatype.StandardDataType)ILOG.J2CsMapping.Collections.Generics.Collections.Get(map,simpleXmlType_0));
							if (String.Equals(other.RootType, type.RootType)) {
								ILOG.J2CsMapping.Collections.Generics.Collections.Put(map,(System.String)(simpleXmlType_0),(Ca.Infoway.Messagebuilder.Datatype.StandardDataType)(StandardDataType
																	.GetByTypeName(type.RootType)));
							} else {
								throw new InvalidOperationException("Simple XML type "
										+ simpleXmlType_0
										+ " is mapped to two incompatible types: "
										+ type.Type + ", " + other.Type);
							}
						} else {
							ILOG.J2CsMapping.Collections.Generics.Collections.Put(map,(System.String)(simpleXmlType_0),(Ca.Infoway.Messagebuilder.Datatype.StandardDataType)(type));
						}
					}
				}
				simpleXmlMap = ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableMap(map);
			}
		}
	
		static StandardDataType() {
            ILOG.J2CsMapping.Collections.Generics.ISet<StandardDataType> set = new HashedSet<StandardDataType>();
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,ED);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,EN);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,IVL);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,ON);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,QTY);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,RTO);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,SC);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,TEL);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,TS);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,URG);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,URL);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,IVL_WIDTH);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,IVL_LOW);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,IVL_HIGH);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,PIVL);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,SXPR);
			ILOG.J2CsMapping.Collections.Generics.Collections.Add(set,SXCM);
			
            ignorable = ILOG.J2CsMapping.Collections.Generics.Collections.UnmodifiableSet(set);
        }
	}
}
