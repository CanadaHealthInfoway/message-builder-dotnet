/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Domainvalue.Basic
{
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Lang;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// MediaType.
	/// Media types from:
	/// http://www.hl7.org/v3ballot/html/infrastructure/datatypes/datatypes.htm#dt-ED
	/// </summary>
	///
	[Serializable]
	public class MediaType : EnumPattern, 		Ca.Infoway.Messagebuilder.Domainvalue.MediaType, Describable {
	
		private const long serialVersionUID = -1973934802325355773L;
	
		/// <summary>
		/// Currently not a valid HL7 media type.
		/// </summary>
		///
		public static readonly MediaType EXCEL = new MediaType("EXCEL",
				"application/vnd.ms-excel");
		/// <summary>
		/// For any plain text.
		/// </summary>
		///
		public static readonly MediaType PLAIN_TEXT = new MediaType("PLAIN_TEXT",
				"text/plain");
		/// <summary>
		/// For compatibility, this represents the HL7 v2.x FT data type. Its use is
		/// recommended only for backward compatibility with HL7 v2.x systems.
		/// </summary>
		///
		public static readonly MediaType HL7_TEXT = new MediaType("HL7_TEXT",
				"text/x-hl7-ft");
		/// <summary>
		/// For marked-up text according to the Hypertext Mark-up Language. HTML markup
		/// is sufficient for typographically marking-up most written-text documents.
		/// HTML is platform independent and widely deployed.
		/// </summary>
		///
		public static readonly MediaType HTML_TEXT = new MediaType("HTML_TEXT",
				"text/html");
		/// <summary>
		/// The Portable Document Format is recommended for written text that is completely
		/// laid out and read-only. PDF is a platform independent, widely deployed, and open
		/// specification with freely available creation and rendering tools.
		/// </summary>
		///
		public static readonly MediaType PDF = new MediaType("PDF", "application/pdf");
		/// <summary>
		/// For structured character based data. There is a risk that general SGML/XML is too
		/// powerful to allow a sharing of general SGML/XML documents between different
		/// applications.
		/// </summary>
		///
		public static readonly MediaType XML_TEXT = new MediaType("XML_TEXT",
				"text/xml");
		/// <summary>
		/// The Rich Text Format is widely used to share word-processor documents. However,
		/// RTF does have compatibility problems, as it is quite dependent on the word
		/// processor. May be useful if word processor edit-able text should be shared.
		/// </summary>
		///
		public static readonly MediaType RTF_TEXT = new MediaType("RTF_TEXT",
				"text/rtf");
		/// <summary>
		/// This format is very prone to compatibility problems. If sharing of edit-able text
		/// is required, text/plain, text/html or text/rtf should be used instead.
		/// </summary>
		///
		public static readonly MediaType MSWORD = new MediaType("MSWORD",
				"application/msword");
		/// <summary>
		/// This is a format for single channel audio, encd using 8bit ISDN mu-law [PCM]
		/// at a sample rate of 8000 Hz. This format is standardized by: CCITT,
		/// Fascicle III.4 -Recommendation G.711. Pulse Code Modulation (PCM) of Voice
		/// Frequencies. Geneva, 1972.
		/// </summary>
		///
		public static readonly MediaType BASIC_AUDIO = new MediaType("BASIC_AUDIO",
				"audio/basic");
		/// <summary>
		/// MPEG-1 Audio layer-3 is an audio compression algorithm and file format defined in
		/// ISO 11172-3 and ISO 13818-3. MP3 has an adjustable sampling frequency for highly
		/// compressed telephone to CD quality audio.
		/// </summary>
		///
		public static readonly MediaType MPEG_AUDIO_LAYER_3 = new MediaType(
				"MPEG_AUDIO_LAYER_3", "audio/mpeg");
		/// <summary>
		/// ADPCM allows compressing audio data. It is defined in the Internet specification
		/// RFC 2421 [ftp://ftp.isi.edu/in-notes/rfc2421.txt]. Its implementation base is
		/// unclear.
		/// </summary>
		///
		public static readonly MediaType K32ADPCM_AUDIO = new MediaType(
				"K32ADPCM_AUDIO", "audio/k32adpcm");
		/// <summary>
		/// Portable Network Graphics (PNG) [http://www.cdrom.com/pub/png] is a widely
		/// supported lossless image compression standard with open source c available.
		/// </summary>
		///
		public static readonly MediaType PNG_IMAGE = new MediaType("PNG_IMAGE",
				"image/png");
		/// <summary>
		/// GIF is a popular format that is universally well supported. However GIF is patent
		/// encumbered and should therefore be used with caution.
		/// </summary>
		///
		public static readonly MediaType GIF_IMAGE = new MediaType("GIF_IMAGE",
				"image/gif");
		/// <summary>
		/// This format is required for high compression of high color photographs. It is a
		/// "lossy" compression, but the difference to lossless compression is almost
		/// unnoticeable to the human vision.
		/// </summary>
		///
		public static readonly MediaType JPEG_IMAGE = new MediaType("JPEG_IMAGE",
				"image/jpeg");
		/// <summary>
		/// Digital Imaging and Communications in Medicine (DICOM) MIME type defined in
		/// RFC3240 [http://ietf.org/rfc/rfc3240.txt].
		/// </summary>
		///
		public static readonly MediaType DICOM = new MediaType("DICOM",
				"application/dicom");
		/// <summary>
		/// This is recommended only for fax applications.
		/// </summary>
		///
		public static readonly MediaType G3FA_XIMAGE = new MediaType("G3FA_XIMAGE",
				"image/g3fax");
		/// <summary>
		/// Although TIFF (Tag Image File Format) is an international standard it has many
		/// interoperability problems in practice. Too many different versions that are not
		/// handled by all software alike.
		/// </summary>
		///
		public static readonly MediaType TIFF_IMAGE = new MediaType("TIFF_IMAGE",
				"image/tiff");
		/// <summary>
		/// MPEG is an international standard, widely deployed, highly efficient for high
		/// color video; open source c exists; highly interoperable.
		/// </summary>
		///
		public static readonly MediaType MPEG_VIDEO = new MediaType("MPEG_VIDEO",
				"video/mpeg");
		/// <summary>
		/// The AVI file format is just a wrapper for many different ccs; it is a source
		/// of many interoperability problems.
		/// </summary>
		///
		public static readonly MediaType _XAVI_VIDEO = new MediaType("_XAVI_VIDEO",
				"video/x-avi");
		/// <summary>
		/// This is an openly standardized format for 3D models that can be useful for
		/// virtual reality applications such as anatomy or biochemical research
		/// (visualization of the steric structure of macromolecules).
		/// </summary>
		///
		public static readonly MediaType VRML_MODEL = new MediaType("VRML_MODEL",
				"model/vrml");
	
		private readonly String mimeType;
	
		private MediaType(String name, String mimeType_0) : base(name) {
			this.mimeType = mimeType_0;
		}

        static MediaType() { }
	
		/// <summary>
		/// Returns the mime type. 
		/// </summary>
		///
		/// <returns>the mime type</returns>
		public String MimeType {
		/// <summary>
		/// Returns the mime type. 
		/// </summary>
		///
		/// <returns>the mime type</returns>
		  get {
				return this.mimeType;
			}
		}
		
	
		/// <summary>
		/// Obtains the media type registered for the supplied mime type.
		/// Returns null if no media type could be found.
		/// </summary>
		///
		/// <param name="mimeType_0">the mimetype to match</param>
		/// <returns>the applicable MediaType</returns>
		public static MediaType Get(String mimeType_0) {
			MediaType result = null;
			/* foreach */
			foreach (MediaType mediaType  in  Ca.Infoway.Messagebuilder.Lang.EnumPattern.Values<MediaType>(typeof(MediaType))) {
				if (mediaType.MimeType.Equals(mimeType_0)) {
					result = mediaType;
					break;
				}
			}
			return result;
		}
	
		/// <summary>
		/// Returns the media type c system.
		/// </summary>
		///
		/// <returns>the media type c system</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns the media type c system.
		/// </summary>
		///
		/// <returns>the media type c system</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Codesystem.CodeSystem.VOCABULARY_DOCUMENT_MEDIA_TYPES.Root;
			}
		}
		
	
		/// <summary>
		/// Returns the c value.
		/// </summary>
		///
		/// <returns>the c value</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the c value.
		/// </summary>
		///
		/// <returns>the c value</returns>
		  get {
				return this.mimeType;
			}
		}
		
	
		/// <summary>
		/// Returns the description of the media type.
		/// </summary>
		///
		/// <returns>the description</returns>
		public virtual String Description {
		/// <summary>
		/// Returns the description of the media type.
		/// </summary>
		///
		/// <returns>the description</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Domainvalue.Util.DescribableUtil.GetDefaultDescription(this);
			}
		}
		
	
	}
}
