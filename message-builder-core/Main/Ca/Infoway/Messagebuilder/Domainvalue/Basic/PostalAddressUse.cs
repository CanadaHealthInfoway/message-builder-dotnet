/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Domainvalue.Basic
{
	
	using Ca.Infoway.Messagebuilder.Lang;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// PostalAdressUse enum.
	/// From http://www.hl7.org/v3ballot/html/infrastructure/itsxml/datatypes-its-xml.htm#domain-PostalAddressUse
	/// </summary>
	///
	[Serializable]
	public class PostalAddressUse : EnumPattern, 
			Ca.Infoway.Messagebuilder.Domainvalue.PostalAddressUse {
	
		private const long serialVersionUID = -4205269283911237833L;
	
		/// <summary>
		/// A communication address at a home, attempted contacts for business purposes 
		/// might intrude privacy and chances are one will contact family or other household 
		/// members instead of the person one wishes to call. Typically used with urgent 
		/// cases, or if no other contacts are available.
		/// </summary>
		///
		public static readonly PostalAddressUse HOME = new PostalAddressUse("HOME",
				"H");
		/// <summary>
		/// The primary home, to reach a person after business hours.
		/// </summary>
		///
		public static readonly PostalAddressUse PRIMARY_HOME = new PostalAddressUse(
				"PRIMARY_HOME", "HP");
		/// <summary>
		/// A vacation home, to reach a person while on vacation.
		/// </summary>
		///
		public static readonly PostalAddressUse VACATION_HOME = new PostalAddressUse(
				"VACATION_HOME", "HV");
		/// <summary>
		/// An office address. First choice for business related contacts during 
		/// business hours.
		/// </summary>
		///
		public static readonly PostalAddressUse WORK_PLACE = new PostalAddressUse(
				"WORK_PLACE", "WP");
		/// <summary>
		/// Indicates a work place address or telecommunication address that 
		/// reaches the individual or organization directly without intermediaries. 
		/// For phones, often referred to as a 'private line'.
		/// </summary>
		///
		public static readonly PostalAddressUse DIRECT = new PostalAddressUse(
				"DIRECT", "DIR");
		/// <summary>
		/// Indicates a work place address or telecommunication address that is a 'standard' 
		/// address which may reach a reception service, mail-room, or other 
		/// intermediary prior to the target entity. 
		/// </summary>
		///
		public static readonly PostalAddressUse PUBLIC = new PostalAddressUse(
				"PUBLIC", "PUB");
		/// <summary>
		/// A flag indicating that the address is bad, in fact, useless.
		/// </summary>
		///
		public static readonly PostalAddressUse BAD = new PostalAddressUse("BAD",
				"BAD");
		/// <summary>
		/// A temporary address, may be good for visit or mailing. Note that an address 
		/// history can provide more detailed information.
		/// </summary>
		///
		public static readonly PostalAddressUse TEMPORARY = new PostalAddressUse(
				"TEMPORARY", "TMP");
		/// <summary>
		/// Alphabetic transcription of name (Japanese: romaji).
		/// </summary>
		///
		public static readonly PostalAddressUse ALPHABETIC = new PostalAddressUse(
				"ALPHABETIC", "ABC");
		/// <summary>
		/// Ideographic representation of name (e.g., Japanese kanji, Chinese characters).
		/// </summary>
		///
		public static readonly PostalAddressUse SYLLABIC = new PostalAddressUse(
				"SYLLABIC", "SYL");
		/// <summary>
		/// Syllabic transcription of name (e.g., Japanese kana, Korean hangul).
		/// </summary>
		///
		public static readonly PostalAddressUse IDEOGRAPHIC = new PostalAddressUse(
				"IDEOGRAPHIC", "IDE");
		/// <summary>
		/// Used primarily to visit an address.
		/// </summary>
		///
		public static readonly PostalAddressUse PHYSICAL = new PostalAddressUse(
				"PHYSICAL", "PHYS");
		/// <summary>
		/// Used to send mail.
		/// </summary>
		///
		public static readonly PostalAddressUse POSTAL = new PostalAddressUse(
				"POSTAL", "PST");
	
		private readonly String codeValue;
	
		private PostalAddressUse(String name, String codeValue_0) : base(name) {
			this.codeValue = codeValue_0;
		}

        static PostalAddressUse() { }
	
		/// <summary>
		/// Returns the c system for this postal address enum.
		/// </summary>
		///
		/// <returns>the c system for this postal address enum</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns the c system for this postal address enum.
		/// </summary>
		///
		/// <returns>the c system for this postal address enum</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Codesystem.CodeSystem.VOCABULARY_POSTAL_ADDRESS_USE.Root;
			}
		}

		public virtual String CodeSystemName {
            get { return null; }
        }
	
		/// <summary>
		/// Returns the c value for this enum.
		/// </summary>
		///
		/// <returns>the c value</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the c value for this enum.
		/// </summary>
		///
		/// <returns>the c value</returns>
		  get {
				return this.codeValue;
			}
		}
		
	}
}
