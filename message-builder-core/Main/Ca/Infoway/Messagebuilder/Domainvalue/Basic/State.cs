/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Domainvalue.Basic {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Runtime.Serialization;
	
	/// <summary>
	/// The cerx AD.Basic states that the country is a SC data type (meaning that the c is optional but the text description is always manadatory){@link Code} can not model this type. In the future we may want to handle this type? 
	/// For now we are just using the text description directly and ignoring any iso3166-alpha2 c that may be present.
	/// </summary>
	///
	[Serializable]
	public class State : Ca.Infoway.Messagebuilder.Domainvalue.State {
	
		private const long serialVersionUID = -9119222339454680995L;
	
		public static readonly State ALBERTA = new State("AB", "Alberta");
		public static readonly State BRITISH_COLUMBIA = new State("BC",
				"British Columbia");
		public static readonly State MANITOBA = new State("MB", "Manitoba");
		public static readonly State NEW_BRUNSWICK = new State("NB", "New Brunsiwck");
		public static readonly State NEWFOUNDLAND = new State("NL",
				"Newfoundland and Labrador");
		public static readonly State NORTHWEST_TERRITORIES = new State("NT",
				"Northwest Territories");
		public static readonly State NOVA_SCOTIA = new State("NS", "Nova Scotia");
		public static readonly State NUNAVUT = new State("NU", "Nunavat");
		public static readonly State PRINCE_EDWARD_ISLAND = new State("PE",
				"Prince Edward Island");
		public static readonly State ONTARIO = new State("ON", "Ontario");
		public static readonly State QUEBEC = new State("QC", "Quebec");
		public static readonly State SASKATCHEWAN = new State("SK", "Saskatchewan");
		public static readonly State YUKON = new State("YT", "Yukon Territory");
	
		public static readonly IDictionary CANADIAN_PROVINCES = new Hashtable();
		private readonly String code;
		private readonly String name;
	
		/// <summary>
		/// Constructs a State with the given c and name.
		/// </summary>
		///
		/// <param name="code_0">a c</param>
		/// <param name="name_1">a name</param>
		public State(String code_0, String name_1) {
			this.code = code_0;
			this.name = name_1;
		}
	
		/// <summary>
		/// Returns the c.
		/// </summary>
		///
		/// <returns>the c</returns>
		public String Code {
		/// <summary>
		/// Returns the c.
		/// </summary>
		///
		/// <returns>the c</returns>
		  get {
				return this.code;
			}
		}
		
	
		/// <summary>
		/// Returns the name.
		/// </summary>
		///
		/// <returns>the name</returns>
		public String Name {
		/// <summary>
		/// Returns the name.
		/// </summary>
		///
		/// <returns>the name</returns>
		  get {
				return this.name;
			}
		}
		
	
		/// <summary>
		/// Returns the c value.
		/// </summary>
		///
		/// <returns>the c value</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the c value.
		/// </summary>
		///
		/// <returns>the c value</returns>
		  get {
				return this.code;
			}
		}

		public virtual String CodeSystemName {
            get { return null; }
        }
	
		/// <summary>
		/// Returns the collection of values.
		/// </summary>
		///
		/// <returns>the collection of values</returns>
		public static ICollection Values() {
			return CANADIAN_PROVINCES.Values;
		}
	
		/// <summary>
		/// Returns the State matching the given c.
		/// </summary>
		///
		/// <param name="code_0">the c to lookup</param>
		/// <returns>the matching State</returns>
		public static State ResolveState(String code_0) {
			return (State) ILOG.J2CsMapping.Collections.Collections.Get(CANADIAN_PROVINCES,code_0);
		}
	
		/// <summary>
		/// Returns an empty c system.
		/// </summary>
		///
		/// <returns>an empty c system.</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns an empty c system.
		/// </summary>
		///
		/// <returns>an empty c system.</returns>
		  get {
				return "";
			}
		}
		
	
		static State() {
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,ALBERTA.Code,ALBERTA);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,BRITISH_COLUMBIA.Code,BRITISH_COLUMBIA);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,MANITOBA.Code,MANITOBA);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,NEW_BRUNSWICK.Code,NEW_BRUNSWICK);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,NEWFOUNDLAND.Code,NEWFOUNDLAND);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,NORTHWEST_TERRITORIES.Code,NORTHWEST_TERRITORIES);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,NOVA_SCOTIA.Code,NOVA_SCOTIA);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,NUNAVUT.Code,NUNAVUT);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,PRINCE_EDWARD_ISLAND.Code,PRINCE_EDWARD_ISLAND);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,ONTARIO.Code,ONTARIO);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,QUEBEC.Code,QUEBEC);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,SASKATCHEWAN.Code,SASKATCHEWAN);
				ILOG.J2CsMapping.Collections.Collections.Put(CANADIAN_PROVINCES,YUKON.Code,YUKON);
			}
	}}
