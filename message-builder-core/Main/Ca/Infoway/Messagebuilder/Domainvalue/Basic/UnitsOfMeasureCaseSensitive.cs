/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Domainvalue.Basic
{
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Lang;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// An enum for units of measurement. Currently only used in tests.
	/// </summary>
	///
	[Serializable]
    public class UnitsOfMeasureCaseSensitive : EnumPattern, Ca.Infoway.Messagebuilder.Domainvalue.UnitsOfMeasureCaseSensitive, Ca.Infoway.Messagebuilder.Domainvalue.x_BasicUnitsOfMeasure,
			Describable {
	
		private const long serialVersionUID = -8960154320681947245L;

        // some implementations want to be able to specify unit="1"; this is a bit of a hack to allow this case
        public static readonly UnitsOfMeasureCaseSensitive ONE = new UnitsOfMeasureCaseSensitive(
                "ONE", "1");
        public static readonly UnitsOfMeasureCaseSensitive THOUSAND_PARTS_PER_MICROLITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "THOUSAND_PARTS_PER_MICROLITRE_LOWER", "10+3/ul");
		public static readonly UnitsOfMeasureCaseSensitive PERCENT = new UnitsOfMeasureCaseSensitive(
				"PERCENT", "%");
		public static readonly UnitsOfMeasureCaseSensitive PER_DAY = new UnitsOfMeasureCaseSensitive(
				"PER_DAY", "1/d");
		public static readonly UnitsOfMeasureCaseSensitive PER_MINUTE = new UnitsOfMeasureCaseSensitive(
				"PER_MINUTE", "1/min");
		public static readonly UnitsOfMeasureCaseSensitive DEGREE_CELSIUS = new UnitsOfMeasureCaseSensitive(
				"DEGREE_CELSIUS", "Cel");
		public static readonly UnitsOfMeasureCaseSensitive UNIT = new UnitsOfMeasureCaseSensitive(
				"UNIT", "U");
		public static readonly UnitsOfMeasureCaseSensitive ENZYME_UNIT_MICROMOLES_MINUTE_PER_LITRE = new UnitsOfMeasureCaseSensitive(
				"ENZYME_UNIT_MICROMOLES_MINUTE_PER_LITRE", "U/L");
        public static readonly UnitsOfMeasureCaseSensitive ENZYME_UNIT_MICROMOLES_MINUTE_PER_LITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "ENZYME_UNIT_MICROMOLES_MINUTE_PER_LITRE_LOWER", "U/l");
		public static readonly UnitsOfMeasureCaseSensitive CUP = new UnitsOfMeasureCaseSensitive(
				"CUP", "[cup_us]");
		public static readonly UnitsOfMeasureCaseSensitive DEGREE_FAHRENHEIT = new UnitsOfMeasureCaseSensitive(
				"DEGREE_FAHRENHEIT", "[deg]");
		public static readonly UnitsOfMeasureCaseSensitive FLUID_OUNCE = new UnitsOfMeasureCaseSensitive(
				"FLUID_OUNCE", "[foz_br]");
		public static readonly UnitsOfMeasureCaseSensitive FOOT = new UnitsOfMeasureCaseSensitive(
				"FOOT", "[ft_i]");
		public static readonly UnitsOfMeasureCaseSensitive GALLON = new UnitsOfMeasureCaseSensitive(
				"GALLON", "[gal_br]");
		public static readonly UnitsOfMeasureCaseSensitive INCH = new UnitsOfMeasureCaseSensitive(
				"INCH", "[in_i]");
		public static readonly UnitsOfMeasureCaseSensitive POUND = new UnitsOfMeasureCaseSensitive(
				"POUND", "[lb_av]");
		public static readonly UnitsOfMeasureCaseSensitive OUNCE = new UnitsOfMeasureCaseSensitive(
				"OUNCE", "[oz_av]");
		public static readonly UnitsOfMeasureCaseSensitive PINT = new UnitsOfMeasureCaseSensitive(
				"PINT", "[pt_br]");
		public static readonly UnitsOfMeasureCaseSensitive QUART = new UnitsOfMeasureCaseSensitive(
				"QUART", "[qt_br]");
		public static readonly UnitsOfMeasureCaseSensitive SQUARE_FOOT = new UnitsOfMeasureCaseSensitive(
				"SQUARE_FOOT", "[sft_i]");
		public static readonly UnitsOfMeasureCaseSensitive SQUARE_INCH = new UnitsOfMeasureCaseSensitive(
				"SQUARE_INCH", "[sin_i]");
		public static readonly UnitsOfMeasureCaseSensitive SQUARE_YARD = new UnitsOfMeasureCaseSensitive(
				"SQUARE_YARD", "[syd_i]");
		public static readonly UnitsOfMeasureCaseSensitive TABLESPOON = new UnitsOfMeasureCaseSensitive(
				"TABLESPOON", "[tbs_us]");
		public static readonly UnitsOfMeasureCaseSensitive TEASPOON = new UnitsOfMeasureCaseSensitive(
				"TEASPOON", "[tsp_us]");
		public static readonly UnitsOfMeasureCaseSensitive YARD = new UnitsOfMeasureCaseSensitive(
				"YARD", "[yd_i]");
		public static readonly UnitsOfMeasureCaseSensitive YEAR = new UnitsOfMeasureCaseSensitive(
				"YEAR", "a");
		public static readonly UnitsOfMeasureCaseSensitive CENTIMETRE = new UnitsOfMeasureCaseSensitive(
				"CENTIMETRE", "cm");
		public static readonly UnitsOfMeasureCaseSensitive SQUARE_CENTIMETRE = new UnitsOfMeasureCaseSensitive(
				"SQUARE_CENTIMETRE", "cm2");
		public static readonly UnitsOfMeasureCaseSensitive CUBIC_CENTIMETER = new UnitsOfMeasureCaseSensitive(
				"CUBIC_CENTIMETER", "cm3");
		public static readonly UnitsOfMeasureCaseSensitive DAY = new UnitsOfMeasureCaseSensitive(
				"DAY", "d");
		public static readonly UnitsOfMeasureCaseSensitive DECAGRAM = new UnitsOfMeasureCaseSensitive(
				"DECAGRAM", "dg");
		public static readonly UnitsOfMeasureCaseSensitive DECALITRE = new UnitsOfMeasureCaseSensitive(
				"DECALITRE", "dL");
        public static readonly UnitsOfMeasureCaseSensitive DECALITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "DECALITRE_LOWER", "dl");
		public static readonly UnitsOfMeasureCaseSensitive GRAM = new UnitsOfMeasureCaseSensitive(
				"GRAM", "g");
		public static readonly UnitsOfMeasureCaseSensitive GRAM_PER_DAY = new UnitsOfMeasureCaseSensitive(
				"GRAM_PER_DAY", "g/d");
		public static readonly UnitsOfMeasureCaseSensitive GRAMS_PER_LITRE = new UnitsOfMeasureCaseSensitive(
				"GRAMS_PER_LITRE", "g/L");
        public static readonly UnitsOfMeasureCaseSensitive GRAMS_PER_LITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "GRAMS_PER_LITRE_LOWER", "g/l");
        public static readonly UnitsOfMeasureCaseSensitive GRAMS_PER_DECILITRE = new UnitsOfMeasureCaseSensitive(
                "GRAMS_PER_DECILITRE", "g/dL");
        public static readonly UnitsOfMeasureCaseSensitive GRAMS_PER_DECILITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "GRAMS_PER_DECILITRE_LOWER", "g/dl");
		public static readonly UnitsOfMeasureCaseSensitive HOUR = new UnitsOfMeasureCaseSensitive(
				"HOUR", "h");
		public static readonly UnitsOfMeasureCaseSensitive INTERNATIONAL_UNIT = new UnitsOfMeasureCaseSensitive(
				"INTERNATIONAL_UNIT", "iU");
		public static readonly UnitsOfMeasureCaseSensitive KILOGRAM = new UnitsOfMeasureCaseSensitive(
				"KILOGRAM", "kg");
		public static readonly UnitsOfMeasureCaseSensitive LITRE = new UnitsOfMeasureCaseSensitive(
				"LITRE", "L");
        public static readonly UnitsOfMeasureCaseSensitive LITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "LITRE_LOWER", "l");
		public static readonly UnitsOfMeasureCaseSensitive METRE = new UnitsOfMeasureCaseSensitive(
				"METRE", "m");
		public static readonly UnitsOfMeasureCaseSensitive SQUARE_METRE = new UnitsOfMeasureCaseSensitive(
				"SQUARE_METRE", "m2");
		public static readonly UnitsOfMeasureCaseSensitive MILLIUNIT = new UnitsOfMeasureCaseSensitive(
				"MILLIUNIT", "mU");
		public static readonly UnitsOfMeasureCaseSensitive MILLIEQUIVALENT = new UnitsOfMeasureCaseSensitive(
				"MILLIEQUIVALENT", "meq");
		public static readonly UnitsOfMeasureCaseSensitive MILLIGRAM = new UnitsOfMeasureCaseSensitive(
				"MILLIGRAM", "mg");
		public static readonly UnitsOfMeasureCaseSensitive MILLIGRAM_PER_DAY = new UnitsOfMeasureCaseSensitive(
				"MILLIGRAM_PER_DAY", "mg/d");
        public static readonly UnitsOfMeasureCaseSensitive MILLIGRAM_PER_MILLILITRE = new UnitsOfMeasureCaseSensitive(
                "MILLIGRAM_PER_MILLILITRE", "mg/mL");
		public static readonly UnitsOfMeasureCaseSensitive MINUTE = new UnitsOfMeasureCaseSensitive(
				"MINUTE", "min");
		public static readonly UnitsOfMeasureCaseSensitive MILLILITRE = new UnitsOfMeasureCaseSensitive(
				"MILLILITRE", "mL");
        public static readonly UnitsOfMeasureCaseSensitive MILLILITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "MILLILITRE_LOWER", "ml");
		public static readonly UnitsOfMeasureCaseSensitive MILLILITRE_PER_SECOND = new UnitsOfMeasureCaseSensitive(
				"MILLILITRE_PER_SECOND", "mL/s");
        public static readonly UnitsOfMeasureCaseSensitive MILLILITRE_PER_SECOND_LOWER = new UnitsOfMeasureCaseSensitive(
                "MILLILITRE_PER_SECOND_LOWER", "ml/s");
        public static readonly UnitsOfMeasureCaseSensitive MILLILITRE_PER_MINUTE = new UnitsOfMeasureCaseSensitive(
                "MILLILITRE_PER_MINUTE", "mL/min");
        public static readonly UnitsOfMeasureCaseSensitive MILLILITRE_PER_MINUTE_LOWER = new UnitsOfMeasureCaseSensitive(
                "MILLILITRE_PER_MINUTE_LOWER", "ml/min");
		public static readonly UnitsOfMeasureCaseSensitive MILLIMETER = new UnitsOfMeasureCaseSensitive(
				"MILLIMETER", "mm");
		public static readonly UnitsOfMeasureCaseSensitive SQUARE_MILLIMETRE = new UnitsOfMeasureCaseSensitive(
				"SQUARE_MILLIMETRE", "mm2");
		public static readonly UnitsOfMeasureCaseSensitive CUBIC_MILIMETER = new UnitsOfMeasureCaseSensitive(
				"CUBIC_MILIMETER", "mm3");
		public static readonly UnitsOfMeasureCaseSensitive MILLIMETERS_OF_MERCURY_PRESSURE = new UnitsOfMeasureCaseSensitive(
				"MILLIMETERS_OF_MERCURY_PRESSURE", "mm[Hg]");
		public static readonly UnitsOfMeasureCaseSensitive MILLIMOLE = new UnitsOfMeasureCaseSensitive(
				"MILLIMOLE", "mmol");
		public static readonly UnitsOfMeasureCaseSensitive MILLIMOLES_PER_LITRE = new UnitsOfMeasureCaseSensitive(
				"MILLIMOLES_PER_LITRE", "mmol/L");
        public static readonly UnitsOfMeasureCaseSensitive MILLIMOLES_PER_LITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "MILLIMOLES_PER_LITRE_LOWER", "mmol/l");
		public static readonly UnitsOfMeasureCaseSensitive MONTH = new UnitsOfMeasureCaseSensitive(
				"MONTH", "mo");
		public static readonly UnitsOfMeasureCaseSensitive MOLE = new UnitsOfMeasureCaseSensitive(
				"MOLE", "mol");
		public static readonly UnitsOfMeasureCaseSensitive MILLISECOND = new UnitsOfMeasureCaseSensitive(
				"MILLISECOND", "ms");
		public static readonly UnitsOfMeasureCaseSensitive NANOGRAM = new UnitsOfMeasureCaseSensitive(
				"NANOGRAM", "ng");
		public static readonly UnitsOfMeasureCaseSensitive NANOLITRE = new UnitsOfMeasureCaseSensitive(
				"NANOLITRE", "nL");
        public static readonly UnitsOfMeasureCaseSensitive NANOLITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "NANOLITRE_LOWER", "nl");
		public static readonly UnitsOfMeasureCaseSensitive PICOGRAMS_PER_MILLILITRE = new UnitsOfMeasureCaseSensitive(
				"PICOGRAMS_PER_MILLILITRE", "pg/mL");
        public static readonly UnitsOfMeasureCaseSensitive PICOGRAMS_PER_MILLILITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "PICOGRAMS_PER_MILLILITRE_LOWER", "pg/ml");
		public static readonly UnitsOfMeasureCaseSensitive SECOND = new UnitsOfMeasureCaseSensitive(
				"SECOND", "s");
		public static readonly UnitsOfMeasureCaseSensitive MICROGRAM = new UnitsOfMeasureCaseSensitive(
				"MICROGRAM", "ug");
		public static readonly UnitsOfMeasureCaseSensitive MICROGRAM_PER_MINUTE = new UnitsOfMeasureCaseSensitive(
				"MICROGRAM_PER_MINUTE", "ug/min");
		public static readonly UnitsOfMeasureCaseSensitive MICROLITRE = new UnitsOfMeasureCaseSensitive(
				"MICROLITRE", "uL");
        public static readonly UnitsOfMeasureCaseSensitive MICROLITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "MICROLITRE_LOWER", "ul");
		public static readonly UnitsOfMeasureCaseSensitive MICROMOLE = new UnitsOfMeasureCaseSensitive(
				"MICROMOLE", "umol");
		public static readonly UnitsOfMeasureCaseSensitive MICROMOLES_PER_LITRE = new UnitsOfMeasureCaseSensitive(
				"MICROMOLES_PER_LITRE", "umol/L");
        public static readonly UnitsOfMeasureCaseSensitive MICROMOLES_PER_LITRE_LOWER = new UnitsOfMeasureCaseSensitive(
                "MICROMOLES_PER_LITRE_LOWER", "umol/l");
		public static readonly UnitsOfMeasureCaseSensitive WEEK = new UnitsOfMeasureCaseSensitive(
				"WEEK", "wk");

        public static readonly UnitsOfMeasureCaseSensitive MILLIGRAMS_PER_ACTUATION = new UnitsOfMeasureCaseSensitive(
                "MILLIGRAMS_PER_ACTUATION", "mg/actuat");

        public static readonly UnitsOfMeasureCaseSensitive MILE = new UnitsOfMeasureCaseSensitive("MILE", "[mi_us]");
        public static readonly UnitsOfMeasureCaseSensitive DEGREE = new UnitsOfMeasureCaseSensitive("DEGREE", "deg");
        public static readonly UnitsOfMeasureCaseSensitive KILOMETER = new UnitsOfMeasureCaseSensitive("KILOMETER", "km");
        public static readonly UnitsOfMeasureCaseSensitive METER = new UnitsOfMeasureCaseSensitive("METER", "m");
	
		private readonly String codeValue;
	
		private UnitsOfMeasureCaseSensitive(String name, String codeValue_0) : base(name) {
			this.codeValue = codeValue_0;
		}

        static UnitsOfMeasureCaseSensitive() { }
	
		/// <summary>
		/// Returns the c system for this unit of measurement.
		/// </summary>
		///
		/// <returns>the c system for this unit of measurement.</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns the c system for this unit of measurement.
		/// </summary>
		///
		/// <returns>the c system for this unit of measurement.</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Codesystem.CodeSystem.VOCABULARY_UNIFORM_UNIT_OF_MEASURE.Root;
			}
		}

        public virtual String CodeSystemName {
            get { return null; }
        }
	
		/// <summary>
		/// Returns the value of the unit of measurement.
		/// </summary>
		///
		/// <returns>the value of the unit of measurement.</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the value of the unit of measurement.
		/// </summary>
		///
		/// <returns>the value of the unit of measurement.</returns>
		  get {
				return this.codeValue;
			}
		}
		
	
		/// <summary>
		/// Returns the description of this unit of measurement.
		/// </summary>
		///
		/// <returns>the description of this unit of measurement.</returns>
		public virtual String Description {
		/// <summary>
		/// Returns the description of this unit of measurement.
		/// </summary>
		///
		/// <returns>the description of this unit of measurement.</returns>
		  get {
                return Ca.Infoway.Messagebuilder.Domainvalue.Util.DescribableUtil.GetDefaultDescription(Name);
          }
		}
		
	}
}
