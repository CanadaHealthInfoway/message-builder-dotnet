/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-17 11:48:36 -0400 (Tue, 17 May 2011) $
 * Revision:      $LastChangedRevision: 2666 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

namespace Ca.Infoway.Messagebuilder.Domainvalue.Basic
{
	
	using Ca.Infoway.Messagebuilder;
	using Ca.Infoway.Messagebuilder.Lang;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	
	/// <summary>
	/// EntityNameUse.
	/// From http://www.hl7.org/v3ballot/html/infrastructure/itsxml/datatypes-its-xml.htm#domain-EntityNameUse
	/// </summary>
	///
	[Serializable]
	public class EntityNameUse : EnumPattern, 
			Ca.Infoway.Messagebuilder.Domainvalue.EntityNameUse, Describable {
	
		private const long serialVersionUID = -8087184682557715309L;
	
		public static readonly EntityNameUse LICENSE = new EntityNameUse("LICENSE",
				"C");
		public static readonly EntityNameUse INDIGENOUS_TRIBAL = new EntityNameUse(
				"INDIGENOUS_TRIBAL", "I");
		public static readonly EntityNameUse LEGAL = new EntityNameUse("LEGAL", "L");
		public static readonly EntityNameUse PSEUDONYM = new EntityNameUse(
				"PSEUDONYM", "P");
		public static readonly EntityNameUse ARTIST_STAGE = new EntityNameUse(
				"ARTIST_STAGE", "A");
		public static readonly EntityNameUse RELIGIOUS = new EntityNameUse(
				"RELIGIOUS", "R");
		public static readonly EntityNameUse SEARCH = new EntityNameUse("SEARCH",
				"SRCH");
		public static readonly EntityNameUse PHONETIC = new EntityNameUse("PHONETIC",
				"PHON");
		public static readonly EntityNameUse SOUNDEX = new EntityNameUse("SOUNDEX",
				"SNDX");
		public static readonly EntityNameUse ALPHABETIC = new EntityNameUse(
				"ALPHABETIC", "ABC");
		public static readonly EntityNameUse SYLLABIC = new EntityNameUse("SYLLABIC",
				"SYL");
		public static readonly EntityNameUse IDEOGRAPHIC = new EntityNameUse(
				"IDEOGRAPHIC", "IDE");
	
		public static readonly EntityNameUse ASSIGNED = new EntityNameUse("ASSIGNED",
				"ASGN");
	
		public static readonly EntityNameUse HEALTH_CARD = new EntityNameUse(
				"HEALTH_CARD", "HC");
	
		// This use replaces "Health Card", and has been adopted internationally
		public static readonly EntityNameUse OFFICIAL_REGISTRY = new EntityNameUse(
				"OFFICIAL_REGISTRY", "OR");
	
		private readonly String codeValue;
	
		private EntityNameUse(String name, String codeValue_0) : base(name) {
			this.codeValue = codeValue_0;
		}

        static EntityNameUse() { }
	
		/// <summary>
		/// Returns the entity name c system.
		/// </summary>
		///
		/// <returns>the entity name c system</returns>
		public virtual String CodeSystem {
		/// <summary>
		/// Returns the entity name c system.
		/// </summary>
		///
		/// <returns>the entity name c system</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Codesystem.CodeSystem.VOCABULARY_ENTITY_NAME_USE.Root;
			}
		}
		
	
		/// <summary>
		/// Returns the c value.
		/// </summary>
		///
		/// <returns>the c value</returns>
		public virtual String CodeValue {
		/// <summary>
		/// Returns the c value.
		/// </summary>
		///
		/// <returns>the c value</returns>
		  get {
				return this.codeValue;
			}
		}
		
	
		/// <summary>
		/// Returns the description.
		/// </summary>
		///
		/// <returns>the description</returns>
		public virtual String Description {
		/// <summary>
		/// Returns the description.
		/// </summary>
		///
		/// <returns>the description</returns>
		  get {
				return Ca.Infoway.Messagebuilder.Domainvalue.Util.DescribableUtil.GetDefaultDescription(this);
			}
		}
		
	}
}
