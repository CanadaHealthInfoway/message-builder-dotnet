/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

using Platform.Xml.Parsers;
using Platform.Xml.Sax;

namespace Ca.Infoway.Messagebuilder.Util.Xml {

    using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.IO;
	using System.Runtime.CompilerServices;
	using System.Xml;
	
	public class DocumentFactory {

		private readonly XmlEntityResolver entityResolver;
	
		public DocumentFactory() {
			this.entityResolver = null;
		}
	
		public DocumentFactory(XmlEntityResolver entityResolver_0) {
			this.entityResolver = entityResolver_0;
		}
	
		public XmlDocument CreateFromFile(FileInfo xmlFile) {
			FileStream fileStream = xmlFile.OpenRead();
			try {
				return CreateFromStream(fileStream);
			} finally {
				fileStream.Close();
			}
		}
	
		public static XmlDocument CreateDocumentFromStream(Stream stream) {
			return new DocumentFactory().CreateFromStream(stream);
		}
	
		public XmlDocument CreateFromStream(Stream stream) {
			return CreateDocumentBuilder().Parse(XmlReader.Create(stream));
		}
	
		public XmlDocument CreateFromString(String xml) {
			XmlDocument document = null;
			try {
				document = CreateDocumentBuilder().Parse(
						XmlReader.Create(new StringReader(xml)));
			} catch (IOException e) {
				// should never happen
			}
			return document;
		}
	
		public XmlDocument CreateFromResource(InputStreamResource resource) {
			XmlDocument document = null;
			Stream input = resource.InputStream;
			try {
				document = (input == null) ? null : CreateDocumentBuilder().Parse(
						XmlReader.Create(input));
			} finally {
				IOUtils.CloseQuietly(input);
			}
			return document;
		}
	
		public XmlDocument CreateFromByteArray(byte[] xml) {
			XmlDocument document = null;
			try {
				document = CreateDocumentBuilder().Parse(
						XmlReader.Create(new MemoryStream(xml)));
			} catch (IOException e) {
				throw new SAXException(e);
			}
			return document;
		}
	
		protected internal XmlDocumentBuilder CreateDocumentBuilder() {
			XmlDocumentBuilder builder = null;
			try {
				XmlDocumentBuilderFactory factory = CreateDocumentBuilderFactory();
				builder = factory.NewDocumentBuilder();
				if (this.entityResolver != null) {
					builder.SetEntityResolver(this.entityResolver);
				}
			} catch (XmlParserConfigurationException e) {
				throw new Exception(e.ToString());
			}
			return builder;
		}
	
		internal XmlDocumentBuilderFactory CreateDocumentBuilderFactory() {
			XmlDocumentBuilderFactory factory = XmlDocumentBuilderFactory.NewInstance();
			factory.SetNamespaceAware(true);
			return factory;
		}
	
		public XmlDocument NewDocument() {
			return CreateDocumentBuilder().NewDocument();
		}
	}
}
