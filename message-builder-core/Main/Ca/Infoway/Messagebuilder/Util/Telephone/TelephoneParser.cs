/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-09-21 11:11:24 -0400 (Wed, 21 Sep 2011) $
 * Revision:      $LastChangedRevision: 3001 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Util.Telephone {
	
	using Ca.Infoway.Messagebuilder;
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Runtime.CompilerServices;
	using System.Text;
	
	/// <summary>
	/// A utility to parse standard North-American telephone numbers.
	/// </summary>
	///
	public class TelephoneParser {
	
		private static readonly String PUNCTUATION = "+()- :;=";
	
		/// <summary>
		/// Parse a string representation of a telephone into an object.
		/// </summary>
		///
		/// <param name="telephoneNumber">- the string representation of the telephone.</param>
		/// <returns>- the telephone number as a parsed object.</returns>
		public Telephone CreateTelephone(String telephoneNumber) {
			if (Ca.Infoway.Messagebuilder.StringUtils.IsBlank(telephoneNumber)) {
				return null;
			} else if (IsOnlyNumbers(telephoneNumber)) {
				return ProcessNumericNumber(telephoneNumber);
			} else {
				return ProcessFormattedTelephoneNumber(telephoneNumber);
			}
		}
	
		/* This is a bit dreadful, but it seems to work */
		private Telephone ProcessFormattedTelephoneNumber(String telephoneNumber) {
			String areaCode = null;
			String extension = null;
			String firstPart = null;
			TelephoneLocalNumber number = null;
			bool bracket = false;
			bool invalid = false;
			bool extensionIndicator = false;
			bool firstTime = true;
	
			/* foreach */
			foreach (String token  in  Tokenize(telephoneNumber)) {
	
				if (Ca.Infoway.Messagebuilder.StringUtils.IsBlank(token)) {
					// ignore it
				} else if ("(".Equals(token)) {
					if (bracket || areaCode != null || number != null) {
						invalid = true;
						break;
					} else {
						bracket = true;
					}
				} else if (")".Equals(token)) {
					if (bracket && areaCode != null) {
						bracket = false;
					} else {
						invalid = true;
						break;
					}
				} else if (IsExtensionIndicator(token)) {
					if (extension == null) {
						extensionIndicator = true;
					} else {
						invalid = true;
						break;
					}
				} else if (IsOnlyNumbers(token) && extensionIndicator) {
					extension = token;
					extensionIndicator = false;
				} else if (IsOnlyNumbers(token) && token.Length == 3 && bracket) {
					if (areaCode == null) {
						areaCode = token;
					} else {
						invalid = true;
						break;
					}
				} else if (IsOnlyNumbers(token) && token.Length == 3) {
					if (firstPart == null) {
						firstPart = token;
					} else if (areaCode == null) {
						areaCode = firstPart;
						firstPart = token;
					} else {
						invalid = true;
						break;
					}
				} else if (IsOnlyNumbers(token) && token.Length == 4) {
					if (firstPart == null) {
						invalid = true;
						break;
					} else {
						Telephone temp = ProcessNumericNumber(firstPart + token);
						number = temp.PhoneNumber;
						firstPart = null;
					}
				} else if (IsOnlyNumbers(token) && token.Length == 7) {
					if (firstPart != null) {
						if (areaCode == null) {
							areaCode = firstPart;
							firstPart = null;
						} else {
							invalid = true;
							break;
						}
					}
					Telephone temp_0 = ProcessNumericNumber(token);
					number = temp_0.PhoneNumber;
				} else if (IsPunctuation(token)) {
					// ignore it
				} else if ("1".Equals(token) && firstTime) {
					// ignore it
				} else {
					invalid = true;
					break;
				}
				if (!"+".Equals(token)) {
					firstTime = false;
				}
			}
	
			if (number != null && !bracket && !invalid && !extensionIndicator) {
				Telephone result = new Telephone();
				result.AreaCode = areaCode;
				result.PhoneNumber = number;
				result.Extension = extension;
				return result;
			} else {
				return null;
			}
		}
	
		private bool IsPunctuation(String token) {
			return PUNCTUATION.IndexOf(token) >= 0;
		}
	
		private bool IsExtensionIndicator(String token) {
			return "x".Equals(token,StringComparison.InvariantCultureIgnoreCase) || "ext".Equals(token,StringComparison.InvariantCultureIgnoreCase);
		}
	
		private Telephone ProcessNumericNumber(String telephoneNumber) {
			Telephone telephone = new Telephone();
			switch (telephoneNumber.Length) {
			case 11:
				if ("1".Equals(Ca.Infoway.Messagebuilder.StringUtils.Substring(telephoneNumber, 0, 1))) {
					return ProcessNumericNumber(Ca.Infoway.Messagebuilder.StringUtils.Substring(
							telephoneNumber, 1));
				} else {
					return null;
				}

                case 10:
				telephone.AreaCode = Ca.Infoway.Messagebuilder.StringUtils.Substring(telephoneNumber, 0, 3);
				telephoneNumber = Ca.Infoway.Messagebuilder.StringUtils.Substring(telephoneNumber, 3);
					{
						telephone.PhoneNumber = Ca.Infoway.Messagebuilder.Util.Telephone.TelephoneLocalNumber
															.Create(telephoneNumber);
						return telephone;
					}

                case 7:
				telephone.PhoneNumber = Ca.Infoway.Messagebuilder.Util.Telephone.TelephoneLocalNumber
									.Create(telephoneNumber);
				return telephone;
	
			default:
				return null;
			}
		}
	
		private bool IsOnlyNumbers(String telephoneNumber) {
			bool result = true;
			/* foreach */
			foreach (char c  in  telephoneNumber.ToCharArray()) {
				if ("0123456789".IndexOf(c) < 0) {
					result = false;
					break;
				}
			}
			return result;
		}
	
		private IList<String> Tokenize(String number) {
			IList<String> result = new List<String>();
			StringBuilder builder = new StringBuilder();
	
			/* foreach */
			foreach (Char? c  in  number.ToCharArray()) {
				if (IsPunctuation(c.ToString()) || Char.IsWhiteSpace((c).Value)) {
					if (builder.Length > 0) {
						ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,builder.ToString());
						builder.Length=0;
					}
					ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,c.ToString());
				} else if (IsOnlyNumbers(c.ToString())) {
					if (builder.Length > 0 && !IsOnlyNumbers(builder.ToString())) {
						ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,builder.ToString());
						builder.Length=0;
					}
					builder.Append(c);
				} else {
					if (builder.Length > 0 && IsOnlyNumbers(builder.ToString())) {
						ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,builder.ToString());
						builder.Length=0;
					}
					builder.Append(c);
				}
			}
			if (builder.Length > 0) {
				ILOG.J2CsMapping.Collections.Generics.Collections.Add(result,builder.ToString());
				builder.Length=0;
			}
	
			return result;
		}
	}
}
