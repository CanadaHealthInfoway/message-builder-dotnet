/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Util.Xml {
	
	using Ca.Infoway.Messagebuilder.J5goodies;
	using NUnit;
    using System;
    using System.Xml;
	
	[NUnit.Framework.TestFixture]
	public class XmlDescriberTest {
	
		private static readonly String XML_SIMPLE = "<outer><child /><child /><fred /></outer>";
		private static readonly String XML_MORE_COMPLICATED = "<outer><child><grandchild name=\"Junior\" /></child><child /><fred name=\"Flintstone\" /></outer>";
		private static readonly String XML_REPEATED_NAME_NON_CONTIGUOUS = "<outer><child><grandchild /></child><child />"
				+ "<fred /><child><dummy /></child></outer>";

		[NUnit.Framework.Test]
		public void ShouldDescribePath() {
			XmlDocument xml = new DocumentFactory().CreateFromString(XML_SIMPLE);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement, "//fred");
			NUnit.Framework.Assert.AreEqual("/outer/fred",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber.DescribePath(node),"path");
		}
	
		[NUnit.Framework.Test]
		public void ShouldDescribePathWithMultiples() {
			XmlDocument xml = new DocumentFactory().CreateFromString(XML_SIMPLE);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement,
					"//child[1]");
			NUnit.Framework.Assert.AreEqual("/outer/child[1]",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber.DescribePath(node),"path");
		}
	
		[NUnit.Framework.Test]
		public void ShouldDescribePathWithMultiples2() {
			XmlDocument xml = new DocumentFactory().CreateFromString(XML_SIMPLE);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement,
					"//child[2]");
			NUnit.Framework.Assert.AreEqual("/outer/child[2]",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber.DescribePath(node),"path");
		}
	
		[NUnit.Framework.Test]
		public void ShouldDescribePathWithMultiplesInParentHierarchy() {
			XmlDocument xml = new DocumentFactory()
					.CreateFromString(XML_MORE_COMPLICATED);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement,
					"//grandchild");
			NUnit.Framework.Assert.AreEqual("/outer/child[1]/grandchild",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber
							.DescribePath(node),"path");
		}
	
		[NUnit.Framework.Test]
		public void ShouldDescribePathWithMultiplesInParentHierarchyAndAttribute() {
			XmlDocument xml = new DocumentFactory()
					.CreateFromString(XML_MORE_COMPLICATED);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement,
					"//grandchild/@name");
			NUnit.Framework.Assert.AreEqual("/outer/child[1]/grandchild/@name",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber
							.DescribePath(node),"path");
		}
	
		[NUnit.Framework.Test]
		public void ShouldDescribePathWithNonContiguousMultiples() {
			XmlDocument xml = new DocumentFactory()
					.CreateFromString(XML_REPEATED_NAME_NON_CONTIGUOUS);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement,
					"//dummy");
			NUnit.Framework.Assert.AreEqual("/outer/child[3]/dummy",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber
							.DescribePath(node),"path");
		}
	
		[NUnit.Framework.Test]
		public void ShouldDescribeAttribute() {
			XmlDocument xml = new DocumentFactory()
					.CreateFromString(XML_MORE_COMPLICATED);
	
			XmlNode node = new XPathHelper().GetSingleNode(xml.DocumentElement,
					"//fred/@name");
			NUnit.Framework.Assert.AreEqual("/outer/fred/@name",Ca.Infoway.Messagebuilder.Util.Xml.XmlDescriber
							.DescribePath(node),"path");
		}
	}
}
