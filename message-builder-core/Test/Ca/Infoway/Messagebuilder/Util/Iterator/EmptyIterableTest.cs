/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: gng $
 * Last modified: $LastChangedDate: 2015-11-19 18:20:12 -0500 (Fri, 30 Jan 2015) $
 * Revision:      $LastChangedRevision: 9755 $
 */


/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------
 
namespace Ca.Infoway.Messagebuilder.Util.Iterator {
	
	using Ca.Infoway.Messagebuilder;
	using ILOG.J2CsMapping.Collections.Generics;
	using NUnit;
    using System;
    using System.Collections.Generic;
	
	[NUnit.Framework.TestFixture]
	public class EmptyIterableTest {
	
		[NUnit.Framework.Test]
		public void TestNullSafeIterable() {
			IList<String> thing = null;
			AssertIterable(Ca.Infoway.Messagebuilder.Util.Iterator.EmptyIterable<String>.NullSafeIterable(thing));
		}
	
		private void AssertIterable<T0>(IEnumerable<T0> i) {
			NUnit.Framework.Assert.IsNotNull(i,"iterable");
			NUnit.Framework.Assert.IsNotNull(new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<T0>(i.GetEnumerator()),"iterator");
            NUnit.Framework.Assert.IsFalse(new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<T0>(i.GetEnumerator()).HasNext(), "has next");
            NUnit.Framework.Assert.IsNull(new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<T0>(i.GetEnumerator()).Next(), "next");
		}
	
		[NUnit.Framework.Test]
		public void TestNullSafeIterableArray() {
			String[] list = null;
            AssertIterable(Ca.Infoway.Messagebuilder.Util.Iterator.EmptyIterable<String>.NullSafeIterable<String>(list));
		}
	
		[NUnit.Framework.Test]
		public void TestArray() {
			String[] list = new String[] { "Fred" };
            IEnumerable<String> i = Ca.Infoway.Messagebuilder.Util.Iterator.EmptyIterable<String>.NullSafeIterable(list);
			NUnit.Framework.Assert.IsNotNull(i,"iterable");
			IIterator<String> iterator = new ILOG.J2CsMapping.Collections.Generics.IteratorAdapter<System.String>(i.GetEnumerator());
			NUnit.Framework.Assert.IsNotNull(iterator,"iterator");
			NUnit.Framework.Assert.IsNotNull(iterator.HasNext(),"hasNext()");
			NUnit.Framework.Assert.AreEqual("Fred",iterator.Next(),"next()");
			NUnit.Framework.Assert.IsFalse(iterator.HasNext(),"no more");
		}
	
		[NUnit.Framework.Test]
		public void TestNullSafeIterableMap() {
			IDictionary<String, PlatformDate> map = null;
			AssertIterable(Ca.Infoway.Messagebuilder.Util.Iterator.EmptyIterable<String>.NullSafeKeySetIterable(map));
		}
	
		[NUnit.Framework.Test]
		public void TestNullSafeIterableMapValues() {
			IDictionary<String, PlatformDate> map = null;
			AssertIterable(Ca.Infoway.Messagebuilder.Util.Iterator.EmptyIterable<PlatformDate>.NullSafeValuesIterable(map));
		}
	}
}
