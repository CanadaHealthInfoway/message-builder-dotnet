/**
 * Copyright 2013 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-17 11:48:36 -0400 (Tue, 17 May 2011) $
 * Revision:      $LastChangedRevision: 2666 $
 */

/// ---------------------------------------------------------------------------------------------------
///  This file was automatically generated by J2CS Translator (http://j2cstranslator.sourceforge.net/). 
///  Version 1.0.0                                                                                      
/// ---------------------------------------------------------------------------------------------------

//#if inctest 


namespace Ca.Infoway.Messagebuilder.Terminology {
 
    using System.Collections.Generic;
	
	[NUnit.Framework.TestFixture]
	public class EnumBasedCodeResolverTest {
	
		[NUnit.Framework.Test]
		public void TestEnumResolver() {

			Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry.RegisterResolver(typeof(MockEnum), new EnumBasedCodeResolver(typeof(MockEnum)));
	
			MockEnum fred = Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry.Lookup<MockEnum>(typeof(MockEnum), "FRED");

			NUnit.Framework.Assert.IsNotNull(fred,"fred");
			NUnit.Framework.Assert.AreEqual(Ca.Infoway.Messagebuilder.Terminology.MockEnum.FRED,fred,"fred");
		}
	
		[NUnit.Framework.Test]
		public void TestAllValues() {

		    ICollection<MockEnum> results = new EnumBasedCodeResolver(typeof(MockEnum)).Lookup<MockEnum>(typeof(MockEnum));

			NUnit.Framework.Assert.IsNotNull(results,"results");
            NUnit.Framework.Assert.AreEqual( 5, results.Count,"size");

		    
		}

        [NUnit.Framework.Test]
        public void TestAllValuesTwoParamConstructorCase()
        {

            ICollection<MockTwoLetters> results = new EnumBasedCodeResolver(typeof(MockTwoLetters)).Lookup<MockTwoLetters>(typeof(MockTwoLetters));

            NUnit.Framework.Assert.IsNotNull(results, "results");
            NUnit.Framework.Assert.AreEqual(3, results.Count, "size");


        }
	
		[NUnit.Framework.Test]
		public void TestEnumResolverUsingInterface() {

			Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry.RegisterResolver(typeof(MockCharacters),
					new EnumBasedCodeResolver(typeof(MockEnum)));
	
			MockCharacters fred = Ca.Infoway.Messagebuilder.Terminology.CodeResolverRegistry.Lookup<MockCharacters>(typeof(MockCharacters),
					"FRED");
			NUnit.Framework.Assert.IsNotNull(fred,"fred");
			NUnit.Framework.Assert.AreEqual(Ca.Infoway.Messagebuilder.Terminology.MockEnum.FRED,fred,"fred");
		}
	
		[NUnit.Framework.Test]
		public void TestEnumResolverUsingInterfaceWithCodeSystem() {

			EnumBasedCodeResolver resolver = new EnumBasedCodeResolver(
					typeof(MockStarTrek));
			MockCharacters spock = resolver.Lookup<MockCharacters>(typeof(MockCharacters), "SPOCK",
					"to.boldly.go.wrong.code.system", null);
			NUnit.Framework.Assert.IsNull(spock,"spock");
		}

        [NUnit.Framework.TearDown]
        public virtual void TearDown()
        {
            CodeResolverRegistry.UnregisterAll();
        }
    }
}
//#endif