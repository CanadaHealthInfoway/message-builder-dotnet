/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 16:47:15 -0300 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt911108ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>CodedObservation</summary>
     * 
     * <remarks>REPC_MT420003CA.CommonObservationEvent: Coded 
     * Observation <p>Annotation is only permitted if Annotation 
     * Indicator is not present and vice versa</p> <p>This record 
     * expresses a single point-in-time observation made about a 
     * patient.</p><p>E.g. blood type, APGAR, diagnosis, mole 
     * shape, etc.</p><p>Note: Diagnosis captured using Coded 
     * Observations represent 'point-in-time' assessments. To 
     * assert a condition as a problem and track it over time, use 
     * the Health Condition transactions.</p> <p>This record 
     * expresses a single point-in-time observation made about a 
     * patient.</p><p>E.g. blood type, APGAR, diagnosis, mole 
     * shape, etc.</p><p>Note: Diagnosis captured using Coded 
     * Observations represent 'point-in-time' assessments. To 
     * assert a condition as a problem and track it over time, use 
     * the Health Condition transactions.</p> <p>This record 
     * expresses a single point-in-time observation made about a 
     * patient.</p><p>E.g. blood type, APGAR, diagnosis, mole 
     * shape, etc.</p><p>Note: Diagnosis captured using Coded 
     * Observations represent 'point-in-time' assessments. To 
     * assert a condition as a problem and track it over time, use 
     * the Health Condition transactions.</p> <p>Observations are a 
     * key mechanism for capturing the state of a patient. 
     * Observations provide context for interventions subsequently 
     * taken. Observations can also be tracked over time to look 
     * for changes that may help in assessing a patient's 
     * health.</p> REPC_MT420001CA.CommonObservationEvent: Coded 
     * Observation <p>This record expresses a single point-in-time 
     * observation made about a patient.</p><p>E.g. blood type, 
     * APGAR, diagnosis, mole shape, etc.</p><p>Note: Diagnosis 
     * captured using Coded Observations represent 'point-in-time' 
     * assessments. To assert a condition as a problem and track it 
     * over time, use the Health Condition transactions.</p> 
     * <p>This record expresses a single point-in-time observation 
     * made about a patient.</p><p>E.g. blood type, APGAR, 
     * diagnosis, mole shape, etc.</p><p>Note: Diagnosis captured 
     * using Coded Observations represent 'point-in-time' 
     * assessments. To assert a condition as a problem and track it 
     * over time, use the Health Condition transactions.</p> 
     * <p>This record expresses a single point-in-time observation 
     * made about a patient.</p><p>E.g. blood type, APGAR, 
     * diagnosis, mole shape, etc.</p><p>Note: Diagnosis captured 
     * using Coded Observations represent 'point-in-time' 
     * assessments. To assert a condition as a problem and track it 
     * over time, use the Health Condition transactions.</p> 
     * <p>Observations are a key mechanism for capturing the state 
     * of a patient. Observations provide context for interventions 
     * subsequently taken. Observations can also be tracked over 
     * time to look for changes that may help in assessing a 
     * patient's health.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"REPC_MT420001CA.CommonObservationEvent","REPC_MT420003CA.CommonObservationEvent"})]
    public class CodedObservation : MessagePartBean, Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Comt_mt111111ca.ISHR {

        private II id;
        private CD code;
        private BL negationInd;
        private IVL<TS, Interval<PlatformDate>> effectiveTime;
        private SET<CV, Code> confidentialityCode;
        private CD value;
        private CE interpretationCode;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.ServiceLocation indirectTargetServiceDeliveryLocation;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt911108ca.IActingPerson responsiblePartyActingPerson;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt911108ca.IActingPerson> performerActingPerson;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.ChangedBy author;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.IActingPerson informantActingPerson;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.EHRRepository custodian1AssignedDevice;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.ServiceLocation custodian2ServiceDeliveryLocation;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.OccurredAt location;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.Request_2 inFulfillmentOfActRequest;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.ActDefinition> definitionActDefinition;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.OldCommonObservationEvent> predecessorOldCommonObservationEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.BecauseOf> reason;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.ComponentObservations_2> componentSubObservationEvent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.NewCommonObservationEvent successorNewCommonObservationEvent;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.Includes subjectOf;
        private BL subjectOf2AnnotationIndicator;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.CareCompositions> componentOfPatientCareProvisionEvent;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.Component2> componentOf2;

        public CodedObservation() {
            this.id = new IIImpl();
            this.code = new CDImpl();
            this.negationInd = new BLImpl();
            this.effectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.confidentialityCode = new SETImpl<CV, Code>(typeof(CVImpl));
            this.value = new CDImpl();
            this.interpretationCode = new CEImpl();
            this.performerActingPerson = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt911108ca.IActingPerson>();
            this.definitionActDefinition = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.ActDefinition>();
            this.predecessorOldCommonObservationEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.OldCommonObservationEvent>();
            this.reason = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.BecauseOf>();
            this.componentSubObservationEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.ComponentObservations_2>();
            this.subjectOf2AnnotationIndicator = new BLImpl(false);
            this.componentOfPatientCareProvisionEvent = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.CareCompositions>();
            this.componentOf2 = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.Component2>();
        }
        /**
         * <summary>ObservationRecordId</summary>
         * 
         * <remarks>A:Observation Record Id </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"id"})]
        public Identifier Id {
            get { return this.id.Value; }
            set { this.id.Value = value; }
        }

        /**
         * <summary>ObservationType</summary>
         * 
         * <remarks>B:Observation Type <p>Only 'nullFlavor' value of 
         * OTH is available.</p> </p><p>Observation types include: 
         * Assertion, blood type, APGAR, etc.</p> </p><p>Observation 
         * types include: Assertion, blood type, APGAR, etc.</p> 
         * <p>EPHS: new vocab concepts needed. See implementation 
         * notes</p><p>EPHS: vocab code needed for immunization 
         * interpretation</p><p>EPHS: vocab domain needed for medical 
         * history</p><p>EPHS: vocab domain needed for 
         * Assessment</p><p>EPHS: vocab domain needed for encounter 
         * complication</p><p>EPHS: concept code needed for Outbreak 
         * Complication</p> <p>EPHS: new vocab concepts needed. See 
         * implementation notes</p><p>EPHS: vocab code needed for 
         * immunization interpretation</p><p>EPHS: vocab domain needed 
         * for medical history</p><p>EPHS: vocab domain needed for 
         * Assessment</p><p>EPHS: vocab domain needed for encounter 
         * complication</p><p>EPHS: concept code needed for Outbreak 
         * Complication</p> <p>EPHS: new vocab concepts needed. See 
         * implementation notes</p><p>EPHS: vocab code needed for 
         * immunization interpretation</p><p>EPHS: vocab domain needed 
         * for medical history</p><p>EPHS: vocab domain needed for 
         * Assessment</p><p>EPHS: vocab domain needed for encounter 
         * complication</p><p>EPHS: concept code needed for Outbreak 
         * Complication</p> <p>EPHS: new vocab concepts needed. See 
         * implementation notes</p><p>EPHS: vocab code needed for 
         * immunization interpretation</p><p>EPHS: vocab domain needed 
         * for medical history</p><p>EPHS: vocab domain needed for 
         * Assessment</p><p>EPHS: vocab domain needed for encounter 
         * complication</p><p>EPHS: concept code needed for Outbreak 
         * Complication</p> <p>EPHS: new vocab concepts needed. See 
         * implementation notes</p><p>EPHS: vocab code needed for 
         * immunization interpretation</p><p>EPHS: vocab domain needed 
         * for medical history</p><p>EPHS: vocab domain needed for 
         * Assessment</p><p>EPHS: vocab domain needed for encounter 
         * complication</p><p>EPHS: concept code needed for Outbreak 
         * Complication</p> <p>EPHS: new vocab concepts needed. See 
         * implementation notes</p><p>EPHS: vocab code needed for 
         * immunization interpretation</p><p>EPHS: vocab domain needed 
         * for medical history</p><p>EPHS: vocab domain needed for 
         * Assessment</p><p>EPHS: vocab domain needed for encounter 
         * complication</p><p>EPHS: concept code needed for Outbreak 
         * Complication</p> </p> </p> </p> </p> 
         * <p>EPHS:Observation.code fixed to &quot;OUTCOME&quot; at 
         * runtime</p><p>EPHS: observation.code fixed to &quot;DIRECTLY 
         * OBSERVED DOSES TAKEN&quot; at runtime</p> 
         * <p>EPHS:Observation.code fixed to &quot;OUTCOME&quot; at 
         * runtime</p><p>EPHS: observation.code fixed to &quot;DIRECTLY 
         * OBSERVED DOSES TAKEN&quot; at runtime</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public Code Code {
            get { return (Code) this.code.Value; }
            set { this.code.Value = value; }
        }

        /**
         * <summary>RefutedIndicator</summary>
         * 
         * <remarks>D:Refuted Indicator </p> </p> </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"negationInd"})]
        public bool? NegationInd {
            get { return this.negationInd.Value; }
            set { this.negationInd.Value = value; }
        }

        /**
         * <summary>ObservationPeriod</summary>
         * 
         * <remarks>E:Observation Period <p>Identifies the time at 
         * which the observation applies. Usually, this will be 
         * conveyed as a single point in time (center with a width of 
         * 0). However, some observations may cover a time-period with 
         * in which case start and end or start and duration may be 
         * specified.</p><p>Note that the date the observation applies 
         * is not always the same as the time the observation is 
         * actually made. A lab example: if blood was drawn two days 
         * ago and White Blood Count (WBC) was done today, then WBC 
         * observation date should reflect the date of two days ago 
         * because that is the time the observation actually applies 
         * to.</p> <p>Identifies the time at which the observation 
         * applies. Usually, this will be conveyed as a single point in 
         * time (center with a width of 0). However, some observations 
         * may cover a time-period with in which case start and end or 
         * start and duration may be specified.</p><p>Note that the 
         * date the observation applies is not always the same as the 
         * time the observation is actually made. A lab example: if 
         * blood was drawn two days ago and White Blood Count (WBC) was 
         * done today, then WBC observation date should reflect the 
         * date of two days ago because that is the time the 
         * observation actually applies to.</p> </p> <p>EPHS: signs and 
         * symptoms onset date maps to beginning of time interval, 
         * recovery date to end of interval</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> EffectiveTime {
            get { return this.effectiveTime.Value; }
            set { this.effectiveTime.Value = value; }
        }

        /**
         * <summary>ObservationMaskingIndicators</summary>
         * 
         * <remarks>D:Observation Masking Indicators </p> </p> </p> 
         * </p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"confidentialityCode"})]
        public ICollection<x_BasicConfidentialityKind> ConfidentialityCode {
            get { return this.confidentialityCode.RawSet<x_BasicConfidentialityKind>(); }
        }

        /**
         * <summary>ObservationValue</summary>
         * 
         * <remarks>L:Observation Value <p>Observation Value must be 
         * specified and may only be specified when no sub-observations 
         * are present.</p><p>Depending on 
         * CommonCodedClinicalObservationType, One of 
         * CommonClinicalObservationResultValue or 
         * CommonClinicalObservationAssertionValue must be implemented 
         * in place of CommonClinicalbservationValue</p> <p>Observation 
         * Value must be specified and may only be specified when no 
         * sub-observations are present.</p><p>Depending on 
         * CommonCodedClinicalObservationType, One of 
         * CommonClinicalObservationResultValue or 
         * CommonClinicalObservationAssertionValue must be implemented 
         * in place of CommonClinicalbservationValue</p> <p>Indicates 
         * what was actually observed when the observation was 
         * made.</p><p>E.g. code for pregnancy, code for blood type, 
         * color of eyes etc.</p> <p>Indicates what was actually 
         * observed when the observation was made.</p><p>E.g. code for 
         * pregnancy, code for blood type, color of eyes etc.</p> 
         * <p>Conveys the clinical information resulting from the 
         * observation in a standardized representation.</p> 
         * L:Observation Value <p>Depending on 
         * CommonCodedClinicalObservationType, one of 
         * CommonClinicalObservationResultValue or 
         * CommonClinicalObservationAssertionValue must be implemented 
         * in place of 
         * CommonClinicalCodedObservationValue</p><p>Observation Value 
         * must be specified and may only be specified when no 
         * sub-observations are present.</p> <p>Depending on 
         * CommonCodedClinicalObservationType, one of 
         * CommonClinicalObservationResultValue or 
         * CommonClinicalObservationAssertionValue must be implemented 
         * in place of 
         * CommonClinicalCodedObservationValue</p><p>Observation Value 
         * must be specified and may only be specified when no 
         * sub-observations are present.</p> <p>Indicates what was 
         * actually observed when the observation was made.</p><p>E.g. 
         * code for pregnancy, code for blood type, color of eyes 
         * etc.</p> <p>Indicates what was actually observed when the 
         * observation was made.</p><p>E.g. code for pregnancy, code 
         * for blood type, color of eyes etc.</p> <p>Conveys the 
         * clinical information resulting from the observation in a 
         * standardized representation.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"value"})]
        public CommonClinicalObservationValue Value {
            get { return (CommonClinicalObservationValue) this.value.Value; }
            set { this.value.Value = value; }
        }

        /**
         * <summary>ObservationNormalityInterpretation</summary>
         * 
         * <remarks>M:Observation Normality Interpretation 
         * <p>Identifies the level of variation of the observed state 
         * from what would be considered normal for a patient of 
         * similar age and gender. E.g. &quot;Normal&quot;, 
         * &quot;High&quot;, etc.</p> <p>Provides an ability to quickly 
         * flag observations that are outside the norm. These are 
         * generally the records which are of most interest from a 
         * clinical perspective.</p> M:Observation Normality 
         * Interpretation <p>Identifies the level of variation of the 
         * observed state from what would be considered normal for a 
         * patient of similar age and gender. E.g. &quot;Normal&quot;, 
         * &quot;High&quot;, &quot;Critically High&quot;, etc.</p> 
         * <p>Provides an ability to quickly flag observations that are 
         * outside the norm. These are generally the records which are 
         * of most interest from a clinical perspective.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"interpretationCode"})]
        public ObservationInterpretationNormality InterpretationCode {
            get { return (ObservationInterpretationNormality) this.interpretationCode.Value; }
            set { this.interpretationCode.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"indirectTarget/serviceDeliveryLocation"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.ServiceLocation IndirectTargetServiceDeliveryLocation {
            get { return this.indirectTargetServiceDeliveryLocation; }
            set { this.indirectTargetServiceDeliveryLocation = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"responsibleParty/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt911108ca.IActingPerson ResponsiblePartyActingPerson {
            get { return this.responsiblePartyActingPerson; }
            set { this.responsiblePartyActingPerson = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"performer/actingPerson"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt911108ca.IActingPerson> PerformerActingPerson {
            get { return this.performerActingPerson; }
        }

        [Hl7XmlMappingAttribute(new string[] {"author"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.ChangedBy Author {
            get { return this.author; }
            set { this.author = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"informant/actingPerson"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.IActingPerson InformantActingPerson {
            get { return this.informantActingPerson; }
            set { this.informantActingPerson = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"custodian1/assignedDevice"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.EHRRepository Custodian1AssignedDevice {
            get { return this.custodian1AssignedDevice; }
            set { this.custodian1AssignedDevice = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"custodian2/serviceDeliveryLocation"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.ServiceLocation Custodian2ServiceDeliveryLocation {
            get { return this.custodian2ServiceDeliveryLocation; }
            set { this.custodian2ServiceDeliveryLocation = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"location"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.OccurredAt Location {
            get { return this.location; }
            set { this.location = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"inFulfillmentOf/actRequest"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.Request_2 InFulfillmentOfActRequest {
            get { return this.inFulfillmentOfActRequest; }
            set { this.inFulfillmentOfActRequest = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"definition/actDefinition"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.ActDefinition> DefinitionActDefinition {
            get { return this.definitionActDefinition; }
        }

        [Hl7XmlMappingAttribute(new string[] {"predecessor/oldCommonObservationEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.OldCommonObservationEvent> PredecessorOldCommonObservationEvent {
            get { return this.predecessorOldCommonObservationEvent; }
        }

        [Hl7XmlMappingAttribute(new string[] {"reason"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.BecauseOf> Reason {
            get { return this.reason; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component/subObservationEvent"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.ComponentObservations_2> ComponentSubObservationEvent {
            get { return this.componentSubObservationEvent; }
        }

        [Hl7XmlMappingAttribute(new string[] {"successor/newCommonObservationEvent"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.NewCommonObservationEvent SuccessorNewCommonObservationEvent {
            get { return this.successorNewCommonObservationEvent; }
            set { this.successorNewCommonObservationEvent = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf","subjectOf1"})]
        [Hl7MapByPartType(Name="subjectOf", Type="REPC_MT420001CA.Subject")]
        [Hl7MapByPartType(Name="subjectOf1", Type="REPC_MT420003CA.Subject")]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.Includes SubjectOf {
            get { return this.subjectOf; }
            set { this.subjectOf = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"subjectOf2/annotationIndicator"})]
        public bool? SubjectOf2AnnotationIndicator {
            get { return this.subjectOf2AnnotationIndicator.Value; }
            set { this.subjectOf2AnnotationIndicator.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"componentOf/patientCareProvisionEvent","componentOf1/patientCareProvisionEvent"})]
        [Hl7MapByPartType(Name="componentOf", Type="REPC_MT420001CA.Component3")]
        [Hl7MapByPartType(Name="componentOf/patientCareProvisionEvent", Type="COCT_MT011001CA.PatientCareProvisionEvent")]
        [Hl7MapByPartType(Name="componentOf1", Type="REPC_MT420003CA.Component3")]
        [Hl7MapByPartType(Name="componentOf1/patientCareProvisionEvent", Type="COCT_MT011001CA.PatientCareProvisionEvent")]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Merged.CareCompositions> ComponentOfPatientCareProvisionEvent {
            get { return this.componentOfPatientCareProvisionEvent; }
        }

        [Hl7XmlMappingAttribute(new string[] {"componentOf2"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Iehr.Merged.Component2> ComponentOf2 {
            get { return this.componentOf2; }
        }

    }

}