/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 16:47:15 -0300 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca {
    using Ca.Infoway.Messagebuilder;
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Datatype.Lang;
    using Ca.Infoway.Messagebuilder.Domainvalue;
    using Ca.Infoway.Messagebuilder.Model;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220100ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220110ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220200ca;
    using Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220210ca;
    using System;
    using System.Collections.Generic;


    /**
     * <summary>Administration Instructions</summary>
     * 
     * <remarks><p>This comprises all specifications necessary for 
     * the dispensed product to be administered to/by the patient 
     * in a manner as intended by the prescriber.</p> <p>Allows 
     * providers to communicate intentions and to cross-check 
     * intended and actual methods of administration.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"COCT_MT270010CA.DosageInstruction"})]
    public class AdministrationInstructions : MessagePartBean {

        private CS moodCode;
        private CD code;
        private ST text;
        private IVL<TS, Interval<PlatformDate>> effectiveTime;
        private SET<CV, Code> approachSiteCode;
        private CV routeCode;
        private SET<RTO<PhysicalQuantity, PhysicalQuantity>, Ratio<PhysicalQuantity, PhysicalQuantity>> maxDoseQuantity;
        private CV administrationUnitCode;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.IMedication consumableMedication1;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.AdditionalSIGInstruction component1SupplementalInstruction;
        private IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.ConsistsOf> component2;

        public AdministrationInstructions() {
            this.moodCode = new CSImpl();
            this.code = new CDImpl();
            this.text = new STImpl();
            this.effectiveTime = new IVLImpl<TS, Interval<PlatformDate>>();
            this.approachSiteCode = new SETImpl<CV, Code>(typeof(CVImpl));
            this.routeCode = new CVImpl();
            this.maxDoseQuantity = new SETImpl<RTO<PhysicalQuantity, PhysicalQuantity>, Ratio<PhysicalQuantity, PhysicalQuantity>>(typeof(RTOImpl<PhysicalQuantity, PhysicalQuantity>));
            this.administrationUnitCode = new CVImpl();
            this.component2 = new List<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.ConsistsOf>();
        }
        /**
         * <summary>Dosage Usage Context</summary>
         * 
         * <remarks><p>- moodCode must be DEFN for drug definitions 
         * (such as monographs) - moodCode must be RQO for orders; - 
         * moodCode must be EVN for dispenses and recording of other 
         * medications</p> <p>Indicates the context of the 
         * administration.</p><p>moodCode = RQO, for administration 
         * instruction on orders</p><p>moodCode = EVN, for 
         * administration instruction on dispenses</p><p>moodCode = 
         * DEF, for administration instruction on medication definition 
         * documents/references (typically, monographs).</p> 
         * <p>Indicates the context of the 
         * administration.</p><p>moodCode = RQO, for administration 
         * instruction on orders</p><p>moodCode = EVN, for 
         * administration instruction on dispenses</p><p>moodCode = 
         * DEF, for administration instruction on medication definition 
         * documents/references (typically, monographs).</p> 
         * <p>Indicates the context of the 
         * administration.</p><p>moodCode = RQO, for administration 
         * instruction on orders</p><p>moodCode = EVN, for 
         * administration instruction on dispenses</p><p>moodCode = 
         * DEF, for administration instruction on medication definition 
         * documents/references (typically, monographs).</p> 
         * <p>Indicates the context of the 
         * administration.</p><p>moodCode = RQO, for administration 
         * instruction on orders</p><p>moodCode = EVN, for 
         * administration instruction on dispenses</p><p>moodCode = 
         * DEF, for administration instruction on medication definition 
         * documents/references (typically, monographs).</p> <p>Puts 
         * the class in context, and is therefore mandatory.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"moodCode"})]
        public x_ActMoodDefEvnRqo MoodCode {
            get { return (x_ActMoodDefEvnRqo) this.moodCode.Value; }
            set { this.moodCode.Value = value; }
        }

        /**
         * <summary>Dosage Type</summary>
         * 
         * <remarks><p>Distinguishes types of dosage.</p> 
         * <p>Distinguishes between types of dosage administration and 
         * is therefore mandatory. Datatype is CD to allow for SNOMED 
         * codes.</p> <p>For SNOMED this will pre-coordinate route, 
         * body site and potentially drug. For non-SNOMED, this will be 
         * a fixed value of DRUG.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"code"})]
        public Code Code {
            get { return (Code) this.code.Value; }
            set { this.code.Value = value; }
        }

        /**
         * <summary>C:Rendered Dosage Instruction</summary>
         * 
         * <remarks><p>A free form textual specification generated from 
         * the input specifications as created by the 
         * provider.</p><p>This is made up of either an 'Ad-hoc dosage 
         * instruction' or 'Textual rendition of the structured dosage 
         * lines', plus route, dosage unit, and other pertinent 
         * administration information specified by the provider.</p> 
         * <p>A free form textual specification generated from the 
         * input specifications as created by the provider.</p><p>This 
         * is made up of either an 'Ad-hoc dosage instruction' or 
         * 'Textual rendition of the structured dosage lines', plus 
         * route, dosage unit, and other pertinent administration 
         * information specified by the provider.</p> <p>Allows the 
         * provider to verify the codified structured dosage 
         * information entered and ensure that the exploded instruction 
         * is consistent with the intended instructions.</p><p>Also 
         * useful in bringing back administration instructions on query 
         * responses.</p><p>This is mandatory as dosage instructions 
         * must always be available in rendered form.</p> <p>Allows the 
         * provider to verify the codified structured dosage 
         * information entered and ensure that the exploded instruction 
         * is consistent with the intended instructions.</p><p>Also 
         * useful in bringing back administration instructions on query 
         * responses.</p><p>This is mandatory as dosage instructions 
         * must always be available in rendered form.</p> <p>Allows the 
         * provider to verify the codified structured dosage 
         * information entered and ensure that the exploded instruction 
         * is consistent with the intended instructions.</p><p>Also 
         * useful in bringing back administration instructions on query 
         * responses.</p><p>This is mandatory as dosage instructions 
         * must always be available in rendered form.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"text"})]
        public String Text {
            get { return this.text.Value; }
            set { this.text.Value = value; }
        }

        /**
         * <summary>A:Administration Period</summary>
         * 
         * <remarks><p>The time period (begin and end dates) within 
         * which the dispensed medication is to be completely 
         * administered to/by the patient. May differ from date 
         * prescription was issued.</p> <p>Prescription.Admin 
         * istrationStartDate (Low)</p><p>Prescription.Admin 
         * istrationStopDate 
         * (High)</p><p>DispensedItem.expectedStartDate</p> 
         * <p>Prescription.Admin istrationStartDate 
         * (Low)</p><p>Prescription.Admin istrationStopDate 
         * (High)</p><p>DispensedItem.expectedStartDate</p> 
         * <p>Prescription.Admin istrationStartDate 
         * (Low)</p><p>Prescription.Admin istrationStopDate 
         * (High)</p><p>DispensedItem.expectedStartDate</p> 
         * <p>Indicates the overall time boundaries in which the person 
         * is expected to take the drug. Denotes the reference point 
         * for calculating expected exhaustion date and quantity on 
         * hand.</p><p>Facilitates compliance checking.</p><p>Note: TID 
         * may be interpreted differently based on situation (e.g. 
         * based on schedules of a facility).</p> <p>Indicates the 
         * overall time boundaries in which the person is expected to 
         * take the drug. Denotes the reference point for calculating 
         * expected exhaustion date and quantity on 
         * hand.</p><p>Facilitates compliance checking.</p><p>Note: TID 
         * may be interpreted differently based on situation (e.g. 
         * based on schedules of a facility).</p> <p>Indicates the 
         * overall time boundaries in which the person is expected to 
         * take the drug. Denotes the reference point for calculating 
         * expected exhaustion date and quantity on 
         * hand.</p><p>Facilitates compliance checking.</p><p>Note: TID 
         * may be interpreted differently based on situation (e.g. 
         * based on schedules of a facility).</p> <p>Frequently only 
         * the duration (width) component is specified. E.g. 100mg tid 
         * for 10 days. In that case, the start date is presumed to be 
         * the date the prescription was written</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"effectiveTime"})]
        public Interval<PlatformDate> EffectiveTime {
            get { return this.effectiveTime.Value; }
            set { this.effectiveTime.Value = value; }
        }

        /**
         * <summary>Administration Sites</summary>
         * 
         * <remarks><p>A value denoting the body area where the 
         * medicine should be administered. E.g. 'Right Elbow', 'Left 
         * Ear'. When multiples sites are specified they should be 
         * treated as 'AND'.</p> <p>Allows specificity when a drug can 
         * potentially be applied to different parts of the patien's 
         * body. Multiple repetitions are used when the product should 
         * be administered to multiple parts of the body. CWE is used 
         * because using a code system is not essential for 
         * understanding or analyzing the prescription. The attribute 
         * is optional because it can be pre-coordinated with 
         * SubstanceAdministration.code when using SNOMED.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"approachSiteCode"})]
        public ICollection<HumanSubstanceAdministrationSite> ApproachSiteCode {
            get { return this.approachSiteCode.RawSet<HumanSubstanceAdministrationSite>(); }
        }

        /**
         * <summary>A:Route Code</summary>
         * 
         * <remarks><p>routeCode is mandatory and apporachSiteCode is 
         * required if not using SNOMED</p> <p>This is the means by 
         * which the dispensed drug is to be administered to the 
         * patient.</p> 
         * <p>Prescription.route</p><p>ZDP.14.2</p><p>Compound.452-E8</p><p>RXR.1</p> 
         * <p>Prescription.route</p><p>ZDP.14.2</p><p>Compound.452-E8</p><p>RXR.1</p> 
         * <p>Prescription.route</p><p>ZDP.14.2</p><p>Compound.452-E8</p><p>RXR.1</p> 
         * <p>Prescription.route</p><p>ZDP.14.2</p><p>Compound.452-E8</p><p>RXR.1</p> 
         * <p>Ensures consistency in description of routes. Provides 
         * potential for cross-checking dosage form and route. Route is 
         * an optional because it is pre-coordinated with 
         * SubstanceAdministration.code when using SNOMED.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"routeCode"})]
        public RouteOfAdministration RouteCode {
            get { return (RouteOfAdministration) this.routeCode.Value; }
            set { this.routeCode.Value = value; }
        }

        /**
         * <summary>D:Maximum Daily/Weekly Doses</summary>
         * 
         * <remarks><p>The maximum amount of the dispensed medication 
         * to be administered to the patient in a 24-hr period (doses 
         * per day) or in a 7 day period (doses per week).</p> 
         * <p>ZPB3.5(denominator=1D)</p> <p>Sets an upper boundary for 
         * the quantity of the drug to be administered over a specified 
         * period of time. Particularly useful for PRN medications.</p> 
         * <p>This field can only capture maximum doses based on 
         * explicit time periods. Dosage maximums based on other 
         * constraints such as patient lifetime, menstrual cycles must 
         * be recorded using additional dosage instruction 
         * comments.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"maxDoseQuantity"})]
        public ICollection<Ratio<PhysicalQuantity, PhysicalQuantity>> MaxDoseQuantity {
            get { return this.maxDoseQuantity.RawSet(); }
        }

        /**
         * <summary>Dosage Unit</summary>
         * 
         * <remarks><p>Identifies how the drug is measured for 
         * administration.</p><p>Specified when not implicit from the 
         * drug form (e.g. puff, inhalation, drops, etc.).</p> 
         * <p>Identifies how the drug is measured for 
         * administration.</p><p>Specified when not implicit from the 
         * drug form (e.g. puff, inhalation, drops, etc.).</p> 
         * <p>Needed when the dosage unit is not expressed as part of 
         * the dose quantity (mg, mL) or implicit as part of the drug 
         * form (capsules, tablets). Examples are Puffs, Actuations, 
         * etc.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"administrationUnitCode"})]
        public AdministrableDrugForm AdministrationUnitCode {
            get { return (AdministrableDrugForm) this.administrationUnitCode.Value; }
            set { this.administrationUnitCode.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"consumable/medication1"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.IMedication ConsumableMedication1 {
            get { return this.consumableMedication1; }
            set { this.consumableMedication1 = value; }
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220100ca.DrugProduct ConsumableMedication1AsMedication1 {
            get { return this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220100ca.DrugProduct ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220100ca.DrugProduct) this.consumableMedication1 : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220100ca.DrugProduct) null; }
        }
        public bool HasConsumableMedication1AsMedication1() {
            return (this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220100ca.DrugProduct);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220110ca.DrugProduct ConsumableMedication1AsMedication2 {
            get { return this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220110ca.DrugProduct ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220110ca.DrugProduct) this.consumableMedication1 : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220110ca.DrugProduct) null; }
        }
        public bool HasConsumableMedication1AsMedication2() {
            return (this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220110ca.DrugProduct);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220200ca.DrugProduct ConsumableMedication1AsMedication3 {
            get { return this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220200ca.DrugProduct ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220200ca.DrugProduct) this.consumableMedication1 : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220200ca.DrugProduct) null; }
        }
        public bool HasConsumableMedication1AsMedication3() {
            return (this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220200ca.DrugProduct);
        }

        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220210ca.DrugProduct ConsumableMedication1AsMedication4 {
            get { return this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220210ca.DrugProduct ? (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220210ca.DrugProduct) this.consumableMedication1 : (Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220210ca.DrugProduct) null; }
        }
        public bool HasConsumableMedication1AsMedication4() {
            return (this.consumableMedication1 is Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt220210ca.DrugProduct);
        }

        [Hl7XmlMappingAttribute(new string[] {"component1/supplementalInstruction"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.AdditionalSIGInstruction Component1SupplementalInstruction {
            get { return this.component1SupplementalInstruction; }
            set { this.component1SupplementalInstruction = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"component2"})]
        public IList<Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Coct_mt270010ca.ConsistsOf> Component2 {
            get { return this.component2; }
        }

    }

}