/**
 * Copyright 2012 Canada Health Infoway, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author:        $LastChangedBy: tmcgrady $
 * Last modified: $LastChangedDate: 2011-05-04 16:47:15 -0300 (Wed, 04 May 2011) $
 * Revision:      $LastChangedRevision: 2623 $
 */
/* This class was auto-generated by the message builder generator tools. */
namespace Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged {
    using Ca.Infoway.Messagebuilder.Annotation;
    using Ca.Infoway.Messagebuilder.Datatype;
    using Ca.Infoway.Messagebuilder.Datatype.Impl;
    using Ca.Infoway.Messagebuilder.Model;
    using System;


    /**
     * <summary>RefersTo</summary>
     * 
     * <remarks>MFMI_MT700711CA.Subject2: f:refers to <p>On 
     * creation interactions (where the state transition is 
     * null-&gt;active), this must be true otherwise it must be 
     * false.</p> <p>Indicates the item(s) being acted upon by this 
     * trigger event.</p><p>Will be mandatory in wrappers with 
     * payload messages, otherwise not present.</p> <p>Indicates 
     * the item(s) being acted upon by this trigger 
     * event.</p><p>Will be mandatory in wrappers with payload 
     * messages, otherwise not present.</p> <p>Provides information 
     * about the thing being created, modified or removed.</p> 
     * <p>If there are multiple subject items, the changes to all 
     * of them must be either accepted or rejected as a single 
     * action. I.e. One trigger event = 1 unit of work.</p> 
     * MFMI_MT700716CA.Subject2: f:refers to <p>On creation 
     * interactions (where the state transition is 
     * null-&gt;active), this must be true otherwise it must be 
     * false.</p> <p>Indicates the item(s) being acted upon by this 
     * trigger event.</p><p>Will be mandatory in wrappers with 
     * payload messages, otherwise not present.</p> <p>Indicates 
     * the item(s) being acted upon by this trigger 
     * event.</p><p>Will be mandatory in wrappers with payload 
     * messages, otherwise not present.</p> <p>Provides information 
     * about the thing being created, modified or removed.</p> 
     * <p>If there are multiple subject items, the changes to all 
     * of them must be either accepted or rejected as a single 
     * action. I.e. One trigger event = 1 unit of work.</p></remarks>
     */
    [Hl7PartTypeMappingAttribute(new string[] {"MFMI_MT700711CA.Subject2","MFMI_MT700716CA.Subject2"})]
    public class RefersTo_2<RR> : MessagePartBean {

        private BL contextConductionInd;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.RegisteredItem<RR> registrationRequestSubject;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.EHRRepository registrationRequestCustodianAssignedDevice;
        private Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.PriorRegistrationEvent registrationRequestReplacementOfPriorRegistration;

        public RefersTo_2() {
            this.contextConductionInd = new BLImpl();
        }
        /**
         * <summary>CascadeResponsibilityIndicator</summary>
         * 
         * <remarks>Cascade Responsibility Indicator <p>Indicates 
         * whether or not objects of the trigger event are to be 
         * cascaded to the payload.</p><p>If true, associations in the 
         * parent act are conducted across the ActRelationship to the 
         * message payload (act). Conduction for each association is 
         * specifically indicated by each associations' 
         * contextControlCode value.</p><p>In other words, if the 
         * &quot;subject&quot; act relationship has 
         * contextConductionInd=true; THEN the subjectOf association is 
         * carried (to the regsitrationRequest act) according to the 
         * subjectOf.contextControlCode (AP = propogate to the reg 
         * request and add to any subject(s) (issues) already present 
         * in the payload).</p> <p>Indicates whether or not objects of 
         * the trigger event are to be cascaded to the 
         * payload.</p><p>If true, associations in the parent act are 
         * conducted across the ActRelationship to the message payload 
         * (act). Conduction for each association is specifically 
         * indicated by each associations' contextControlCode 
         * value.</p><p>In other words, if the &quot;subject&quot; act 
         * relationship has contextConductionInd=true; THEN the 
         * subjectOf association is carried (to the regsitrationRequest 
         * act) according to the subjectOf.contextControlCode (AP = 
         * propogate to the reg request and add to any subject(s) 
         * (issues) already present in the payload).</p> <p>Indicates 
         * whether or not objects of the trigger event are to be 
         * cascaded to the payload.</p><p>If true, associations in the 
         * parent act are conducted across the ActRelationship to the 
         * message payload (act). Conduction for each association is 
         * specifically indicated by each associations' 
         * contextControlCode value.</p><p>In other words, if the 
         * &quot;subject&quot; act relationship has 
         * contextConductionInd=true; THEN the subjectOf association is 
         * carried (to the regsitrationRequest act) according to the 
         * subjectOf.contextControlCode (AP = propogate to the reg 
         * request and add to any subject(s) (issues) already present 
         * in the payload).</p> <p>Cascading of trigger event objects 
         * allows different messages to employ consistent and common 
         * objects.</p><p>Attribute is mandatory to ensure that 
         * cascading will be specified one way or another.</p> 
         * <p>Cascading of trigger event objects allows different 
         * messages to employ consistent and common 
         * objects.</p><p>Attribute is mandatory to ensure that 
         * cascading will be specified one way or another.</p></remarks>
         */
        [Hl7XmlMappingAttribute(new string[] {"contextConductionInd"})]
        public bool? ContextConductionInd {
            get { return this.contextConductionInd.Value; }
            set { this.contextConductionInd.Value = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"registrationRequest/subject"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.RegisteredItem<RR> RegistrationRequestSubject {
            get { return this.registrationRequestSubject; }
            set { this.registrationRequestSubject = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"registrationRequest/custodian/assignedDevice"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.EHRRepository RegistrationRequestCustodianAssignedDevice {
            get { return this.registrationRequestCustodianAssignedDevice; }
            set { this.registrationRequestCustodianAssignedDevice = value; }
        }

        [Hl7XmlMappingAttribute(new string[] {"registrationRequest/replacementOf/priorRegistration"})]
        public Ca.Infoway.Messagebuilder.Model.Pcs_mr2009_r02_04_03.Common.Merged.PriorRegistrationEvent RegistrationRequestReplacementOfPriorRegistration {
            get { return this.registrationRequestReplacementOfPriorRegistration; }
            set { this.registrationRequestReplacementOfPriorRegistration = value; }
        }

    }

}